<?php
/**
 * TaxObject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.53.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaxObject Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaxObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'name' => 'string',
        'code' => 'string',
        'description' => 'string',
        'rate' => 'float',
        'applied_to_organization' => 'bool',
        'add_ons_count' => 'int',
        'charges_count' => 'int',
        'customers_count' => 'int',
        'plans_count' => 'int',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => 'uuid',
        'name' => null,
        'code' => null,
        'description' => null,
        'rate' => null,
        'applied_to_organization' => null,
        'add_ons_count' => null,
        'charges_count' => null,
        'customers_count' => null,
        'plans_count' => null,
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => false,
        'name' => false,
        'code' => false,
        'description' => false,
        'rate' => false,
        'applied_to_organization' => false,
        'add_ons_count' => false,
        'charges_count' => false,
        'customers_count' => false,
        'plans_count' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'name' => 'name',
        'code' => 'code',
        'description' => 'description',
        'rate' => 'rate',
        'applied_to_organization' => 'applied_to_organization',
        'add_ons_count' => 'add_ons_count',
        'charges_count' => 'charges_count',
        'customers_count' => 'customers_count',
        'plans_count' => 'plans_count',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'name' => 'setName',
        'code' => 'setCode',
        'description' => 'setDescription',
        'rate' => 'setRate',
        'applied_to_organization' => 'setAppliedToOrganization',
        'add_ons_count' => 'setAddOnsCount',
        'charges_count' => 'setChargesCount',
        'customers_count' => 'setCustomersCount',
        'plans_count' => 'setPlansCount',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'name' => 'getName',
        'code' => 'getCode',
        'description' => 'getDescription',
        'rate' => 'getRate',
        'applied_to_organization' => 'getAppliedToOrganization',
        'add_ons_count' => 'getAddOnsCount',
        'charges_count' => 'getChargesCount',
        'customers_count' => 'getCustomersCount',
        'plans_count' => 'getPlansCount',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('applied_to_organization', $data ?? [], null);
        $this->setIfExists('add_ons_count', $data ?? [], null);
        $this->setIfExists('charges_count', $data ?? [], null);
        $this->setIfExists('customers_count', $data ?? [], null);
        $this->setIfExists('plans_count', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_id'] === null) {
            $invalidProperties[] = "'lago_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['rate'] === null) {
            $invalidProperties[] = "'rate' can't be null";
        }
        if ($this->container['applied_to_organization'] === null) {
            $invalidProperties[] = "'applied_to_organization' can't be null";
        }
        if ($this->container['customers_count'] === null) {
            $invalidProperties[] = "'customers_count' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string $lago_id Unique identifier of the tax, created by Lago.
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            throw new \InvalidArgumentException('non-nullable lago_id cannot be null');
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the tax.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique code used to identify the tax associated with the API request.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Internal description of the taxe
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float $rate The percentage rate of the tax
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets applied_to_organization
     *
     * @return bool
     */
    public function getAppliedToOrganization()
    {
        return $this->container['applied_to_organization'];
    }

    /**
     * Sets applied_to_organization
     *
     * @param bool $applied_to_organization Set to `true` if the tax is used as one of the organization's default
     *
     * @return self
     */
    public function setAppliedToOrganization($applied_to_organization)
    {
        if (is_null($applied_to_organization)) {
            throw new \InvalidArgumentException('non-nullable applied_to_organization cannot be null');
        }
        $this->container['applied_to_organization'] = $applied_to_organization;

        return $this;
    }

    /**
     * Gets add_ons_count
     *
     * @return int|null
     */
    public function getAddOnsCount()
    {
        return $this->container['add_ons_count'];
    }

    /**
     * Sets add_ons_count
     *
     * @param int|null $add_ons_count Number of add-ons this tax is applied to.
     *
     * @return self
     */
    public function setAddOnsCount($add_ons_count)
    {
        if (is_null($add_ons_count)) {
            throw new \InvalidArgumentException('non-nullable add_ons_count cannot be null');
        }
        $this->container['add_ons_count'] = $add_ons_count;

        return $this;
    }

    /**
     * Gets charges_count
     *
     * @return int|null
     */
    public function getChargesCount()
    {
        return $this->container['charges_count'];
    }

    /**
     * Sets charges_count
     *
     * @param int|null $charges_count Number of charges this tax is applied to.
     *
     * @return self
     */
    public function setChargesCount($charges_count)
    {
        if (is_null($charges_count)) {
            throw new \InvalidArgumentException('non-nullable charges_count cannot be null');
        }
        $this->container['charges_count'] = $charges_count;

        return $this;
    }

    /**
     * Gets customers_count
     *
     * @return int
     */
    public function getCustomersCount()
    {
        return $this->container['customers_count'];
    }

    /**
     * Sets customers_count
     *
     * @param int $customers_count Number of customers this tax is applied to (directly or via the organization's default).
     *
     * @return self
     */
    public function setCustomersCount($customers_count)
    {
        if (is_null($customers_count)) {
            throw new \InvalidArgumentException('non-nullable customers_count cannot be null');
        }
        $this->container['customers_count'] = $customers_count;

        return $this;
    }

    /**
     * Gets plans_count
     *
     * @return int|null
     */
    public function getPlansCount()
    {
        return $this->container['plans_count'];
    }

    /**
     * Sets plans_count
     *
     * @param int|null $plans_count Number of plans this tax is applied to.
     *
     * @return self
     */
    public function setPlansCount($plans_count)
    {
        if (is_null($plans_count)) {
            throw new \InvalidArgumentException('non-nullable plans_count cannot be null');
        }
        $this->container['plans_count'] = $plans_count;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date of the tax.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


