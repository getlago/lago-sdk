<?php
/**
 * WalletCreateInputWallet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.53.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WalletCreateInputWallet Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WalletCreateInputWallet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WalletCreateInput_wallet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'rate_amount' => 'string',
        'currency' => 'Currency',
        'paid_credits' => 'string',
        'granted_credits' => 'string',
        'external_customer_id' => 'string',
        'expiration_at' => '\DateTime',
        'recurring_transaction_rules' => '\OpenAPI\Client\Model\WalletCreateInputWalletRecurringTransactionRulesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'rate_amount' => null,
        'currency' => null,
        'paid_credits' => null,
        'granted_credits' => null,
        'external_customer_id' => null,
        'expiration_at' => 'date-time',
        'recurring_transaction_rules' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'rate_amount' => false,
        'currency' => false,
        'paid_credits' => true,
        'granted_credits' => true,
        'external_customer_id' => false,
        'expiration_at' => true,
        'recurring_transaction_rules' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'rate_amount' => 'rate_amount',
        'currency' => 'currency',
        'paid_credits' => 'paid_credits',
        'granted_credits' => 'granted_credits',
        'external_customer_id' => 'external_customer_id',
        'expiration_at' => 'expiration_at',
        'recurring_transaction_rules' => 'recurring_transaction_rules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'rate_amount' => 'setRateAmount',
        'currency' => 'setCurrency',
        'paid_credits' => 'setPaidCredits',
        'granted_credits' => 'setGrantedCredits',
        'external_customer_id' => 'setExternalCustomerId',
        'expiration_at' => 'setExpirationAt',
        'recurring_transaction_rules' => 'setRecurringTransactionRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'rate_amount' => 'getRateAmount',
        'currency' => 'getCurrency',
        'paid_credits' => 'getPaidCredits',
        'granted_credits' => 'getGrantedCredits',
        'external_customer_id' => 'getExternalCustomerId',
        'expiration_at' => 'getExpirationAt',
        'recurring_transaction_rules' => 'getRecurringTransactionRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('rate_amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('paid_credits', $data ?? [], null);
        $this->setIfExists('granted_credits', $data ?? [], null);
        $this->setIfExists('external_customer_id', $data ?? [], null);
        $this->setIfExists('expiration_at', $data ?? [], null);
        $this->setIfExists('recurring_transaction_rules', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rate_amount'] === null) {
            $invalidProperties[] = "'rate_amount' can't be null";
        }
        if (!preg_match("/^[0-9]+.?[0-9]*$/", $this->container['rate_amount'])) {
            $invalidProperties[] = "invalid value for 'rate_amount', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!is_null($this->container['paid_credits']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['paid_credits'])) {
            $invalidProperties[] = "invalid value for 'paid_credits', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['granted_credits']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['granted_credits'])) {
            $invalidProperties[] = "invalid value for 'granted_credits', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if ($this->container['external_customer_id'] === null) {
            $invalidProperties[] = "'external_customer_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the wallet.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rate_amount
     *
     * @return string
     */
    public function getRateAmount()
    {
        return $this->container['rate_amount'];
    }

    /**
     * Sets rate_amount
     *
     * @param string $rate_amount The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
     *
     * @return self
     */
    public function setRateAmount($rate_amount)
    {
        if (is_null($rate_amount)) {
            throw new \InvalidArgumentException('non-nullable rate_amount cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($rate_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$rate_amount when calling WalletCreateInputWallet., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['rate_amount'] = $rate_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param Currency $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets paid_credits
     *
     * @return string|null
     */
    public function getPaidCredits()
    {
        return $this->container['paid_credits'];
    }

    /**
     * Sets paid_credits
     *
     * @param string|null $paid_credits The number of paid credits. Required only if there is no granted credits.
     *
     * @return self
     */
    public function setPaidCredits($paid_credits)
    {
        if (is_null($paid_credits)) {
            array_push($this->openAPINullablesSetToNull, 'paid_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paid_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($paid_credits) && (!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($paid_credits)))) {
            throw new \InvalidArgumentException("invalid value for \$paid_credits when calling WalletCreateInputWallet., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['paid_credits'] = $paid_credits;

        return $this;
    }

    /**
     * Gets granted_credits
     *
     * @return string|null
     */
    public function getGrantedCredits()
    {
        return $this->container['granted_credits'];
    }

    /**
     * Sets granted_credits
     *
     * @param string|null $granted_credits The number of free granted credits. Required only if there is no paid credits.
     *
     * @return self
     */
    public function setGrantedCredits($granted_credits)
    {
        if (is_null($granted_credits)) {
            array_push($this->openAPINullablesSetToNull, 'granted_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('granted_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($granted_credits) && (!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($granted_credits)))) {
            throw new \InvalidArgumentException("invalid value for \$granted_credits when calling WalletCreateInputWallet., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['granted_credits'] = $granted_credits;

        return $this;
    }

    /**
     * Gets external_customer_id
     *
     * @return string
     */
    public function getExternalCustomerId()
    {
        return $this->container['external_customer_id'];
    }

    /**
     * Sets external_customer_id
     *
     * @param string $external_customer_id The customer external unique identifier (provided by your own application)
     *
     * @return self
     */
    public function setExternalCustomerId($external_customer_id)
    {
        if (is_null($external_customer_id)) {
            throw new \InvalidArgumentException('non-nullable external_customer_id cannot be null');
        }
        $this->container['external_customer_id'] = $external_customer_id;

        return $this;
    }

    /**
     * Gets expiration_at
     *
     * @return \DateTime|null
     */
    public function getExpirationAt()
    {
        return $this->container['expiration_at'];
    }

    /**
     * Sets expiration_at
     *
     * @param \DateTime|null $expiration_at The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setExpirationAt($expiration_at)
    {
        if (is_null($expiration_at)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_at'] = $expiration_at;

        return $this;
    }

    /**
     * Gets recurring_transaction_rules
     *
     * @return \OpenAPI\Client\Model\WalletCreateInputWalletRecurringTransactionRulesInner[]|null
     */
    public function getRecurringTransactionRules()
    {
        return $this->container['recurring_transaction_rules'];
    }

    /**
     * Sets recurring_transaction_rules
     *
     * @param \OpenAPI\Client\Model\WalletCreateInputWalletRecurringTransactionRulesInner[]|null $recurring_transaction_rules List of recurring transaction rules. Currently, we only allow one recurring rule per wallet.
     *
     * @return self
     */
    public function setRecurringTransactionRules($recurring_transaction_rules)
    {
        if (is_null($recurring_transaction_rules)) {
            throw new \InvalidArgumentException('non-nullable recurring_transaction_rules cannot be null');
        }
        $this->container['recurring_transaction_rules'] = $recurring_transaction_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


