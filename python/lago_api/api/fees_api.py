# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import datetime

from pydantic import StrictInt, StrictStr, field_validator

from typing import Any, Optional

from lago_api.models.fee import Fee
from lago_api.models.fee_update_input import FeeUpdateInput
from lago_api.models.fees_paginated import FeesPaginated

from lago_api.api_client import ApiClient
from lago_api.api_response import ApiResponse
from lago_api.rest import RESTResponseType


class FeesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_all_fees(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records per page.")] = None,
        external_customer_id: Annotated[Optional[StrictStr], Field(description="Unique identifier assigned to the customer in your application.")] = None,
        external_subscription_id: Annotated[Optional[StrictStr], Field(description="External subscription ID")] = None,
        currency: Annotated[Optional[Any], Field(description="Filter results by fee’s currency.")] = None,
        fee_type: Annotated[Optional[StrictStr], Field(description="The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.")] = None,
        billable_metric_code: Annotated[Optional[StrictStr], Field(description="Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types.")] = None,
        payment_status: Annotated[Optional[StrictStr], Field(description="Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`.")] = None,
        created_at_from: Annotated[Optional[datetime], Field(description="Filter results created after creation date and time in UTC.")] = None,
        created_at_to: Annotated[Optional[datetime], Field(description="Filter results created before creation date and time in UTC.")] = None,
        succeeded_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment success after creation date and time in UTC.")] = None,
        succeeded_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment success after creation date and time in UTC.")] = None,
        failed_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment failure after creation date and time in UTC.")] = None,
        failed_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment failure after creation date and time in UTC.")] = None,
        refunded_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment refund after creation date and time in UTC.")] = None,
        refunded_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment refund after creation date and time in UTC.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FeesPaginated:
        """List all fees

        This endpoint is used for retrieving all fees that has been issued.

        :param page: Page number.
        :type page: int
        :param per_page: Number of records per page.
        :type per_page: int
        :param external_customer_id: Unique identifier assigned to the customer in your application.
        :type external_customer_id: str
        :param external_subscription_id: External subscription ID
        :type external_subscription_id: str
        :param currency: Filter results by fee’s currency.
        :type currency: Currency
        :param fee_type: The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
        :type fee_type: str
        :param billable_metric_code: Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types.
        :type billable_metric_code: str
        :param payment_status: Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`.
        :type payment_status: str
        :param created_at_from: Filter results created after creation date and time in UTC.
        :type created_at_from: datetime
        :param created_at_to: Filter results created before creation date and time in UTC.
        :type created_at_to: datetime
        :param succeeded_at_from: Filter results with payment success after creation date and time in UTC.
        :type succeeded_at_from: datetime
        :param succeeded_at_to: Filter results with payment success after creation date and time in UTC.
        :type succeeded_at_to: datetime
        :param failed_at_from: Filter results with payment failure after creation date and time in UTC.
        :type failed_at_from: datetime
        :param failed_at_to: Filter results with payment failure after creation date and time in UTC.
        :type failed_at_to: datetime
        :param refunded_at_from: Filter results with payment refund after creation date and time in UTC.
        :type refunded_at_from: datetime
        :param refunded_at_to: Filter results with payment refund after creation date and time in UTC.
        :type refunded_at_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_fees_serialize(
            page=page,
            per_page=per_page,
            external_customer_id=external_customer_id,
            external_subscription_id=external_subscription_id,
            currency=currency,
            fee_type=fee_type,
            billable_metric_code=billable_metric_code,
            payment_status=payment_status,
            created_at_from=created_at_from,
            created_at_to=created_at_to,
            succeeded_at_from=succeeded_at_from,
            succeeded_at_to=succeeded_at_to,
            failed_at_from=failed_at_from,
            failed_at_to=failed_at_to,
            refunded_at_from=refunded_at_from,
            refunded_at_to=refunded_at_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeesPaginated",
            '401': "ApiErrorUnauthorized",
            '422': "ApiErrorUnprocessableEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_all_fees_with_http_info(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records per page.")] = None,
        external_customer_id: Annotated[Optional[StrictStr], Field(description="Unique identifier assigned to the customer in your application.")] = None,
        external_subscription_id: Annotated[Optional[StrictStr], Field(description="External subscription ID")] = None,
        currency: Annotated[Optional[Any], Field(description="Filter results by fee’s currency.")] = None,
        fee_type: Annotated[Optional[StrictStr], Field(description="The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.")] = None,
        billable_metric_code: Annotated[Optional[StrictStr], Field(description="Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types.")] = None,
        payment_status: Annotated[Optional[StrictStr], Field(description="Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`.")] = None,
        created_at_from: Annotated[Optional[datetime], Field(description="Filter results created after creation date and time in UTC.")] = None,
        created_at_to: Annotated[Optional[datetime], Field(description="Filter results created before creation date and time in UTC.")] = None,
        succeeded_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment success after creation date and time in UTC.")] = None,
        succeeded_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment success after creation date and time in UTC.")] = None,
        failed_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment failure after creation date and time in UTC.")] = None,
        failed_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment failure after creation date and time in UTC.")] = None,
        refunded_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment refund after creation date and time in UTC.")] = None,
        refunded_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment refund after creation date and time in UTC.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FeesPaginated]:
        """List all fees

        This endpoint is used for retrieving all fees that has been issued.

        :param page: Page number.
        :type page: int
        :param per_page: Number of records per page.
        :type per_page: int
        :param external_customer_id: Unique identifier assigned to the customer in your application.
        :type external_customer_id: str
        :param external_subscription_id: External subscription ID
        :type external_subscription_id: str
        :param currency: Filter results by fee’s currency.
        :type currency: Currency
        :param fee_type: The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
        :type fee_type: str
        :param billable_metric_code: Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types.
        :type billable_metric_code: str
        :param payment_status: Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`.
        :type payment_status: str
        :param created_at_from: Filter results created after creation date and time in UTC.
        :type created_at_from: datetime
        :param created_at_to: Filter results created before creation date and time in UTC.
        :type created_at_to: datetime
        :param succeeded_at_from: Filter results with payment success after creation date and time in UTC.
        :type succeeded_at_from: datetime
        :param succeeded_at_to: Filter results with payment success after creation date and time in UTC.
        :type succeeded_at_to: datetime
        :param failed_at_from: Filter results with payment failure after creation date and time in UTC.
        :type failed_at_from: datetime
        :param failed_at_to: Filter results with payment failure after creation date and time in UTC.
        :type failed_at_to: datetime
        :param refunded_at_from: Filter results with payment refund after creation date and time in UTC.
        :type refunded_at_from: datetime
        :param refunded_at_to: Filter results with payment refund after creation date and time in UTC.
        :type refunded_at_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_fees_serialize(
            page=page,
            per_page=per_page,
            external_customer_id=external_customer_id,
            external_subscription_id=external_subscription_id,
            currency=currency,
            fee_type=fee_type,
            billable_metric_code=billable_metric_code,
            payment_status=payment_status,
            created_at_from=created_at_from,
            created_at_to=created_at_to,
            succeeded_at_from=succeeded_at_from,
            succeeded_at_to=succeeded_at_to,
            failed_at_from=failed_at_from,
            failed_at_to=failed_at_to,
            refunded_at_from=refunded_at_from,
            refunded_at_to=refunded_at_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeesPaginated",
            '401': "ApiErrorUnauthorized",
            '422': "ApiErrorUnprocessableEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_all_fees_without_preload_content(
        self,
        page: Annotated[Optional[StrictInt], Field(description="Page number.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of records per page.")] = None,
        external_customer_id: Annotated[Optional[StrictStr], Field(description="Unique identifier assigned to the customer in your application.")] = None,
        external_subscription_id: Annotated[Optional[StrictStr], Field(description="External subscription ID")] = None,
        currency: Annotated[Optional[Any], Field(description="Filter results by fee’s currency.")] = None,
        fee_type: Annotated[Optional[StrictStr], Field(description="The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.")] = None,
        billable_metric_code: Annotated[Optional[StrictStr], Field(description="Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types.")] = None,
        payment_status: Annotated[Optional[StrictStr], Field(description="Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`.")] = None,
        created_at_from: Annotated[Optional[datetime], Field(description="Filter results created after creation date and time in UTC.")] = None,
        created_at_to: Annotated[Optional[datetime], Field(description="Filter results created before creation date and time in UTC.")] = None,
        succeeded_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment success after creation date and time in UTC.")] = None,
        succeeded_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment success after creation date and time in UTC.")] = None,
        failed_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment failure after creation date and time in UTC.")] = None,
        failed_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment failure after creation date and time in UTC.")] = None,
        refunded_at_from: Annotated[Optional[datetime], Field(description="Filter results with payment refund after creation date and time in UTC.")] = None,
        refunded_at_to: Annotated[Optional[datetime], Field(description="Filter results with payment refund after creation date and time in UTC.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all fees

        This endpoint is used for retrieving all fees that has been issued.

        :param page: Page number.
        :type page: int
        :param per_page: Number of records per page.
        :type per_page: int
        :param external_customer_id: Unique identifier assigned to the customer in your application.
        :type external_customer_id: str
        :param external_subscription_id: External subscription ID
        :type external_subscription_id: str
        :param currency: Filter results by fee’s currency.
        :type currency: Currency
        :param fee_type: The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
        :type fee_type: str
        :param billable_metric_code: Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types.
        :type billable_metric_code: str
        :param payment_status: Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`.
        :type payment_status: str
        :param created_at_from: Filter results created after creation date and time in UTC.
        :type created_at_from: datetime
        :param created_at_to: Filter results created before creation date and time in UTC.
        :type created_at_to: datetime
        :param succeeded_at_from: Filter results with payment success after creation date and time in UTC.
        :type succeeded_at_from: datetime
        :param succeeded_at_to: Filter results with payment success after creation date and time in UTC.
        :type succeeded_at_to: datetime
        :param failed_at_from: Filter results with payment failure after creation date and time in UTC.
        :type failed_at_from: datetime
        :param failed_at_to: Filter results with payment failure after creation date and time in UTC.
        :type failed_at_to: datetime
        :param refunded_at_from: Filter results with payment refund after creation date and time in UTC.
        :type refunded_at_from: datetime
        :param refunded_at_to: Filter results with payment refund after creation date and time in UTC.
        :type refunded_at_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_all_fees_serialize(
            page=page,
            per_page=per_page,
            external_customer_id=external_customer_id,
            external_subscription_id=external_subscription_id,
            currency=currency,
            fee_type=fee_type,
            billable_metric_code=billable_metric_code,
            payment_status=payment_status,
            created_at_from=created_at_from,
            created_at_to=created_at_to,
            succeeded_at_from=succeeded_at_from,
            succeeded_at_to=succeeded_at_to,
            failed_at_from=failed_at_from,
            failed_at_to=failed_at_to,
            refunded_at_from=refunded_at_from,
            refunded_at_to=refunded_at_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FeesPaginated",
            '401': "ApiErrorUnauthorized",
            '422': "ApiErrorUnprocessableEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_all_fees_serialize(
        self,
        page,
        per_page,
        external_customer_id,
        external_subscription_id,
        currency,
        fee_type,
        billable_metric_code,
        payment_status,
        created_at_from,
        created_at_to,
        succeeded_at_from,
        succeeded_at_to,
        failed_at_from,
        failed_at_to,
        refunded_at_from,
        refunded_at_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if external_customer_id is not None:
            
            _query_params.append(('external_customer_id', external_customer_id))
            
        if external_subscription_id is not None:
            
            _query_params.append(('external_subscription_id', external_subscription_id))
            
        if currency is not None:
            
            _query_params.append(('currency', currency))
            
        if fee_type is not None:
            
            _query_params.append(('fee_type', fee_type))
            
        if billable_metric_code is not None:
            
            _query_params.append(('billable_metric_code', billable_metric_code))
            
        if payment_status is not None:
            
            _query_params.append(('payment_status', payment_status))
            
        if created_at_from is not None:
            if isinstance(created_at_from, datetime):
                _query_params.append(
                    (
                        'created_at_from',
                        created_at_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_from', created_at_from))
            
        if created_at_to is not None:
            if isinstance(created_at_to, datetime):
                _query_params.append(
                    (
                        'created_at_to',
                        created_at_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_to', created_at_to))
            
        if succeeded_at_from is not None:
            if isinstance(succeeded_at_from, datetime):
                _query_params.append(
                    (
                        'succeeded_at_from',
                        succeeded_at_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('succeeded_at_from', succeeded_at_from))
            
        if succeeded_at_to is not None:
            if isinstance(succeeded_at_to, datetime):
                _query_params.append(
                    (
                        'succeeded_at_to',
                        succeeded_at_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('succeeded_at_to', succeeded_at_to))
            
        if failed_at_from is not None:
            if isinstance(failed_at_from, datetime):
                _query_params.append(
                    (
                        'failed_at_from',
                        failed_at_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('failed_at_from', failed_at_from))
            
        if failed_at_to is not None:
            if isinstance(failed_at_to, datetime):
                _query_params.append(
                    (
                        'failed_at_to',
                        failed_at_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('failed_at_to', failed_at_to))
            
        if refunded_at_from is not None:
            if isinstance(refunded_at_from, datetime):
                _query_params.append(
                    (
                        'refunded_at_from',
                        refunded_at_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('refunded_at_from', refunded_at_from))
            
        if refunded_at_to is not None:
            if isinstance(refunded_at_to, datetime):
                _query_params.append(
                    (
                        'refunded_at_to',
                        refunded_at_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('refunded_at_to', refunded_at_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fees',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_fee(
        self,
        lago_id: Annotated[StrictStr, Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Fee:
        """Retrieve a specific fee

        This endpoint is used for retrieving a specific fee that has been issued.

        :param lago_id: Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system. (required)
        :type lago_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_fee_serialize(
            lago_id=lago_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Fee",
            '401': "ApiErrorUnauthorized",
            '404': "ApiErrorNotFound",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_fee_with_http_info(
        self,
        lago_id: Annotated[StrictStr, Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Fee]:
        """Retrieve a specific fee

        This endpoint is used for retrieving a specific fee that has been issued.

        :param lago_id: Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system. (required)
        :type lago_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_fee_serialize(
            lago_id=lago_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Fee",
            '401': "ApiErrorUnauthorized",
            '404': "ApiErrorNotFound",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_fee_without_preload_content(
        self,
        lago_id: Annotated[StrictStr, Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a specific fee

        This endpoint is used for retrieving a specific fee that has been issued.

        :param lago_id: Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system. (required)
        :type lago_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_fee_serialize(
            lago_id=lago_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Fee",
            '401': "ApiErrorUnauthorized",
            '404': "ApiErrorNotFound",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_fee_serialize(
        self,
        lago_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if lago_id is not None:
            _path_params['lago_id'] = lago_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fees/{lago_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_fee(
        self,
        lago_id: Annotated[StrictStr, Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.")],
        fee_update_input: Annotated[Optional[FeeUpdateInput], Field(description="Fee payload")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Fee:
        """Update a fee

        This endpoint is used for updating a specific fee that has been issued.

        :param lago_id: Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system. (required)
        :type lago_id: str
        :param fee_update_input: Fee payload
        :type fee_update_input: FeeUpdateInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_fee_serialize(
            lago_id=lago_id,
            fee_update_input=fee_update_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Fee",
            '400': "ApiErrorBadRequest",
            '401': "ApiErrorUnauthorized",
            '404': "ApiErrorNotFound",
            '422': "ApiErrorUnprocessableEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_fee_with_http_info(
        self,
        lago_id: Annotated[StrictStr, Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.")],
        fee_update_input: Annotated[Optional[FeeUpdateInput], Field(description="Fee payload")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Fee]:
        """Update a fee

        This endpoint is used for updating a specific fee that has been issued.

        :param lago_id: Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system. (required)
        :type lago_id: str
        :param fee_update_input: Fee payload
        :type fee_update_input: FeeUpdateInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_fee_serialize(
            lago_id=lago_id,
            fee_update_input=fee_update_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Fee",
            '400': "ApiErrorBadRequest",
            '401': "ApiErrorUnauthorized",
            '404': "ApiErrorNotFound",
            '422': "ApiErrorUnprocessableEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_fee_without_preload_content(
        self,
        lago_id: Annotated[StrictStr, Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.")],
        fee_update_input: Annotated[Optional[FeeUpdateInput], Field(description="Fee payload")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a fee

        This endpoint is used for updating a specific fee that has been issued.

        :param lago_id: Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system. (required)
        :type lago_id: str
        :param fee_update_input: Fee payload
        :type fee_update_input: FeeUpdateInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_fee_serialize(
            lago_id=lago_id,
            fee_update_input=fee_update_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Fee",
            '400': "ApiErrorBadRequest",
            '401': "ApiErrorUnauthorized",
            '404': "ApiErrorNotFound",
            '422': "ApiErrorUnprocessableEntity",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_fee_serialize(
        self,
        lago_id,
        fee_update_input,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if lago_id is not None:
            _path_params['lago_id'] = lago_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if fee_update_input is not None:
            _body_params = fee_update_input


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fees/{lago_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


