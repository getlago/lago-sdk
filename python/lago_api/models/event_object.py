# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from lago_api.models.event_object_properties import EventObjectProperties
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EventObject(BaseModel):
    """
    EventObject
    """ # noqa: E501
    lago_id: StrictStr = Field(description="Unique identifier assigned to the event within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the event's record within the Lago system")
    transaction_id: StrictStr = Field(description="This field represents a unique identifier for the event. It is crucial for ensuring idempotency, meaning that each event can be uniquely identified and processed without causing any unintended side effects.")
    lago_customer_id: Optional[StrictStr] = Field(description="Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system")
    external_customer_id: Optional[StrictStr] = Field(description="The customer external unique identifier (provided by your own application). This field is optional if you send the `external_subscription_id`, targeting a specific subscription.")
    code: StrictStr = Field(description="The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.")
    timestamp: datetime = Field(description="This field captures the Unix timestamp in seconds indicating the occurrence of the event in Coordinated Universal Time (UTC). If this timestamp is not provided, the API will automatically set it to the time of event reception.")
    properties: Optional[EventObjectProperties] = None
    lago_subscription_id: Optional[StrictStr] = Field(description="Unique identifier assigned to the subscription within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the subscriptionâ€™s record within the Lago system")
    external_subscription_id: Optional[StrictStr] = Field(description="The unique identifier of the subscription within your application. It is a mandatory field when the customer possesses multiple subscriptions or when the `external_customer_id` is not provided.")
    created_at: datetime = Field(description="The creation date of the event's record in the Lago application, presented in the ISO 8601 datetime format, specifically in Coordinated Universal Time (UTC). It provides the precise timestamp of when the event's record was created within the Lago application")
    __properties: ClassVar[List[str]] = ["lago_id", "transaction_id", "lago_customer_id", "external_customer_id", "code", "timestamp", "properties", "lago_subscription_id", "external_subscription_id", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EventObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # set to None if lago_customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.lago_customer_id is None and "lago_customer_id" in self.model_fields_set:
            _dict['lago_customer_id'] = None

        # set to None if external_customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_customer_id is None and "external_customer_id" in self.model_fields_set:
            _dict['external_customer_id'] = None

        # set to None if lago_subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.lago_subscription_id is None and "lago_subscription_id" in self.model_fields_set:
            _dict['lago_subscription_id'] = None

        # set to None if external_subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_subscription_id is None and "external_subscription_id" in self.model_fields_set:
            _dict['external_subscription_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EventObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lago_id": obj.get("lago_id"),
            "transaction_id": obj.get("transaction_id"),
            "lago_customer_id": obj.get("lago_customer_id"),
            "external_customer_id": obj.get("external_customer_id"),
            "code": obj.get("code"),
            "timestamp": obj.get("timestamp"),
            "properties": EventObjectProperties.from_dict(obj.get("properties")) if obj.get("properties") is not None else None,
            "lago_subscription_id": obj.get("lago_subscription_id"),
            "external_subscription_id": obj.get("external_subscription_id"),
            "created_at": obj.get("created_at")
        })
        return _obj


