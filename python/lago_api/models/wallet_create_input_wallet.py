# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WalletCreateInputWallet(BaseModel):
    """
    WalletCreateInputWallet
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the wallet.")
    rate_amount: Annotated[str, Field(strict=True)] = Field(description="The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.")
    currency: Any
    paid_credits: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The number of paid credits. Required only if there is no granted credits.")
    granted_credits: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The number of free granted credits. Required only if there is no paid credits.")
    external_customer_id: StrictStr = Field(description="The customer external unique identifier (provided by your own application)")
    expiration_at: Optional[datetime] = Field(default=None, description="The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).")
    __properties: ClassVar[List[str]] = ["name", "rate_amount", "currency", "paid_credits", "granted_credits", "external_customer_id", "expiration_at"]

    @field_validator('rate_amount')
    def rate_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    @field_validator('paid_credits')
    def paid_credits_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    @field_validator('granted_credits')
    def granted_credits_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WalletCreateInputWallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # set to None if paid_credits (nullable) is None
        # and model_fields_set contains the field
        if self.paid_credits is None and "paid_credits" in self.model_fields_set:
            _dict['paid_credits'] = None

        # set to None if granted_credits (nullable) is None
        # and model_fields_set contains the field
        if self.granted_credits is None and "granted_credits" in self.model_fields_set:
            _dict['granted_credits'] = None

        # set to None if expiration_at (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_at is None and "expiration_at" in self.model_fields_set:
            _dict['expiration_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WalletCreateInputWallet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "rate_amount": obj.get("rate_amount"),
            "currency": Currency.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "paid_credits": obj.get("paid_credits"),
            "granted_credits": obj.get("granted_credits"),
            "external_customer_id": obj.get("external_customer_id"),
            "expiration_at": obj.get("expiration_at")
        })
        return _obj


