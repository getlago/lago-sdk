# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChargePropertiesGraduatedRangesInner(BaseModel):
    """
    ChargePropertiesGraduatedRangesInner
    """ # noqa: E501
    from_value: StrictInt = Field(description="Specifies the lower value of a tier for a `graduated` charge model. It must be either 0 or the previous range's `to_value + 1` to maintain the proper sequence of values.")
    to_value: Optional[StrictInt] = Field(description="Specifies the highest value of a tier for a `graduated` charge model. - This value must be higher than the from_value of the same tier. - This value must be null for the last tier.")
    flat_amount: Annotated[str, Field(strict=True)] = Field(description="The flat amount for a whole tier, excluding tax, for a `graduated` charge model. It is expressed as a decimal value.")
    per_unit_amount: Annotated[str, Field(strict=True)] = Field(description="The unit price, excluding tax, for a specific tier of a `graduated` charge model. It is expressed as a decimal value.")
    __properties: ClassVar[List[str]] = ["from_value", "to_value", "flat_amount", "per_unit_amount"]

    @field_validator('flat_amount')
    def flat_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    @field_validator('per_unit_amount')
    def per_unit_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChargePropertiesGraduatedRangesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if to_value (nullable) is None
        # and model_fields_set contains the field
        if self.to_value is None and "to_value" in self.model_fields_set:
            _dict['to_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChargePropertiesGraduatedRangesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from_value": obj.get("from_value"),
            "to_value": obj.get("to_value"),
            "flat_amount": obj.get("flat_amount"),
            "per_unit_amount": obj.get("per_unit_amount")
        })
        return _obj


