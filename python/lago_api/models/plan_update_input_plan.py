# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from lago_api.models.plan_update_input_plan_charges_inner import PlanUpdateInputPlanChargesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PlanUpdateInputPlan(BaseModel):
    """
    PlanUpdateInputPlan
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the plan.")
    invoice_display_name: Optional[StrictStr] = Field(default=None, description="Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.")
    code: Optional[StrictStr] = Field(default=None, description="The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.")
    interval: Optional[StrictStr] = Field(default=None, description="The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.")
    description: Optional[StrictStr] = Field(default=None, description="The description on the plan.")
    amount_cents: Optional[StrictInt] = Field(default=None, description="The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.")
    amount_currency: Optional[Any] = None
    trial_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration in days during which the base cost of the plan is offered for free.")
    pay_in_advance: Optional[StrictBool] = Field(default=None, description="This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.")
    bill_charges_monthly: Optional[StrictBool] = Field(default=None, description="This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the planâ€™s interval is `yearly`.")
    tax_codes: Optional[List[StrictStr]] = Field(default=None, description="List of unique code used to identify the taxes.")
    charges: Optional[List[PlanUpdateInputPlanChargesInner]] = Field(default=None, description="Additional usage-based charges for this plan.")
    __properties: ClassVar[List[str]] = ["name", "invoice_display_name", "code", "interval", "description", "amount_cents", "amount_currency", "trial_period", "pay_in_advance", "bill_charges_monthly", "tax_codes", "charges"]

    @field_validator('interval')
    def interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('weekly', 'monthly', 'quarterly', 'yearly'):
            raise ValueError("must be one of enum values ('weekly', 'monthly', 'quarterly', 'yearly')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PlanUpdateInputPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount_currency
        if self.amount_currency:
            _dict['amount_currency'] = self.amount_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        # set to None if bill_charges_monthly (nullable) is None
        # and model_fields_set contains the field
        if self.bill_charges_monthly is None and "bill_charges_monthly" in self.model_fields_set:
            _dict['bill_charges_monthly'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PlanUpdateInputPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "invoice_display_name": obj.get("invoice_display_name"),
            "code": obj.get("code"),
            "interval": obj.get("interval"),
            "description": obj.get("description"),
            "amount_cents": obj.get("amount_cents"),
            "amount_currency": Currency.from_dict(obj.get("amount_currency")) if obj.get("amount_currency") is not None else None,
            "trial_period": obj.get("trial_period"),
            "pay_in_advance": obj.get("pay_in_advance"),
            "bill_charges_monthly": obj.get("bill_charges_monthly"),
            "tax_codes": obj.get("tax_codes"),
            "charges": [PlanUpdateInputPlanChargesInner.from_dict(_item) for _item in obj.get("charges")] if obj.get("charges") is not None else None
        })
        return _obj


