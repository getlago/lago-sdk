# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from lago_api.models.customer_billing_configuration import CustomerBillingConfiguration
from lago_api.models.customer_create_input_customer_metadata_inner import CustomerCreateInputCustomerMetadataInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomerCreateInputCustomer(BaseModel):
    """
    CustomerCreateInputCustomer
    """ # noqa: E501
    external_id: StrictStr = Field(description="The customer external unique identifier (provided by your own application)")
    address_line1: Optional[StrictStr] = Field(default=None, description="The first line of the billing address")
    address_line2: Optional[StrictStr] = Field(default=None, description="The second line of the billing address")
    city: Optional[StrictStr] = Field(default=None, description="The city of the customer's billing address")
    country: Optional[Any] = None
    currency: Optional[Any] = None
    email: Optional[StrictStr] = Field(default=None, description="The email of the customer")
    legal_name: Optional[StrictStr] = Field(default=None, description="The legal company name of the customer")
    legal_number: Optional[StrictStr] = Field(default=None, description="The legal company number of the customer")
    logo_url: Optional[StrictStr] = Field(default=None, description="The logo URL of the customer")
    name: Optional[StrictStr] = Field(default=None, description="The full name of the customer")
    phone: Optional[StrictStr] = Field(default=None, description="The phone number of the customer")
    state: Optional[StrictStr] = Field(default=None, description="The state of the customer's billing address")
    tax_codes: Optional[List[StrictStr]] = Field(default=None, description="List of unique code used to identify the taxes.")
    tax_identification_number: Optional[StrictStr] = Field(default=None, description="The tax identification number of the customer")
    timezone: Optional[Any] = None
    url: Optional[StrictStr] = Field(default=None, description="The custom website URL of the customer")
    zipcode: Optional[StrictStr] = Field(default=None, description="The zipcode of the customer's billing address")
    net_payment_term: Optional[StrictInt] = Field(default=None, description="The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.")
    billing_configuration: Optional[CustomerBillingConfiguration] = None
    metadata: Optional[List[CustomerCreateInputCustomerMetadataInner]] = Field(default=None, description="Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format")
    __properties: ClassVar[List[str]] = ["external_id", "address_line1", "address_line2", "city", "country", "currency", "email", "legal_name", "legal_number", "logo_url", "name", "phone", "state", "tax_codes", "tax_identification_number", "timezone", "url", "zipcode", "net_payment_term", "billing_configuration", "metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomerCreateInputCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_configuration
        if self.billing_configuration:
            _dict['billing_configuration'] = self.billing_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # set to None if address_line1 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line1 is None and "address_line1" in self.model_fields_set:
            _dict['address_line1'] = None

        # set to None if address_line2 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line2 is None and "address_line2" in self.model_fields_set:
            _dict['address_line2'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if legal_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_name is None and "legal_name" in self.model_fields_set:
            _dict['legal_name'] = None

        # set to None if legal_number (nullable) is None
        # and model_fields_set contains the field
        if self.legal_number is None and "legal_number" in self.model_fields_set:
            _dict['legal_number'] = None

        # set to None if logo_url (nullable) is None
        # and model_fields_set contains the field
        if self.logo_url is None and "logo_url" in self.model_fields_set:
            _dict['logo_url'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if tax_identification_number (nullable) is None
        # and model_fields_set contains the field
        if self.tax_identification_number is None and "tax_identification_number" in self.model_fields_set:
            _dict['tax_identification_number'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if zipcode (nullable) is None
        # and model_fields_set contains the field
        if self.zipcode is None and "zipcode" in self.model_fields_set:
            _dict['zipcode'] = None

        # set to None if net_payment_term (nullable) is None
        # and model_fields_set contains the field
        if self.net_payment_term is None and "net_payment_term" in self.model_fields_set:
            _dict['net_payment_term'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomerCreateInputCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_id": obj.get("external_id"),
            "address_line1": obj.get("address_line1"),
            "address_line2": obj.get("address_line2"),
            "city": obj.get("city"),
            "country": Country.from_dict(obj.get("country")) if obj.get("country") is not None else None,
            "currency": Currency.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "email": obj.get("email"),
            "legal_name": obj.get("legal_name"),
            "legal_number": obj.get("legal_number"),
            "logo_url": obj.get("logo_url"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "state": obj.get("state"),
            "tax_codes": obj.get("tax_codes"),
            "tax_identification_number": obj.get("tax_identification_number"),
            "timezone": Timezone.from_dict(obj.get("timezone")) if obj.get("timezone") is not None else None,
            "url": obj.get("url"),
            "zipcode": obj.get("zipcode"),
            "net_payment_term": obj.get("net_payment_term"),
            "billing_configuration": CustomerBillingConfiguration.from_dict(obj.get("billing_configuration")) if obj.get("billing_configuration") is not None else None,
            "metadata": [CustomerCreateInputCustomerMetadataInner.from_dict(_item) for _item in obj.get("metadata")] if obj.get("metadata") is not None else None
        })
        return _obj


