# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WalletTransactionObject(BaseModel):
    """
    WalletTransactionObject
    """ # noqa: E501
    lago_id: StrictStr = Field(description="Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction’s record within the Lago system.")
    lago_wallet_id: StrictStr = Field(description="Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system.")
    status: StrictStr = Field(description="The status of the wallet transaction. Possible values are `pending` or `settled`.")
    transaction_type: StrictStr = Field(description="The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).")
    amount: Annotated[str, Field(strict=True)] = Field(description="The amount of credits based on the rate and the currency.")
    credit_amount: Annotated[str, Field(strict=True)] = Field(description="The number of credits used in the wallet transaction.")
    settled_at: Optional[datetime] = Field(default=None, description="The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).")
    created_at: datetime = Field(description="The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).")
    __properties: ClassVar[List[str]] = ["lago_id", "lago_wallet_id", "status", "transaction_type", "amount", "credit_amount", "settled_at", "created_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('pending', 'settled'):
            raise ValueError("must be one of enum values ('pending', 'settled')")
        return value

    @field_validator('transaction_type')
    def transaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('inbound', 'outbound'):
            raise ValueError("must be one of enum values ('inbound', 'outbound')")
        return value

    @field_validator('amount')
    def amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    @field_validator('credit_amount')
    def credit_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WalletTransactionObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WalletTransactionObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lago_id": obj.get("lago_id"),
            "lago_wallet_id": obj.get("lago_wallet_id"),
            "status": obj.get("status"),
            "transaction_type": obj.get("transaction_type"),
            "amount": obj.get("amount"),
            "credit_amount": obj.get("credit_amount"),
            "settled_at": obj.get("settled_at"),
            "created_at": obj.get("created_at")
        })
        return _obj


