# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AddOnBaseInput(BaseModel):
    """
    AddOnBaseInput
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the add-on.")
    invoice_display_name: Optional[StrictStr] = Field(default=None, description="Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.")
    code: Optional[StrictStr] = Field(default=None, description="Unique code used to identify the add-on.")
    amount_cents: Optional[StrictInt] = Field(default=None, description="The cost of the add-on in cents, excluding any applicable taxes, that is billed to a customer. By creating a one-off invoice, you will be able to override this value.")
    amount_currency: Optional[Any] = None
    description: Optional[StrictStr] = Field(default=None, description="The description of the add-on.")
    tax_codes: Optional[List[StrictStr]] = Field(default=None, description="List of unique code used to identify the taxes.")
    __properties: ClassVar[List[str]] = ["name", "invoice_display_name", "code", "amount_cents", "amount_currency", "description", "tax_codes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AddOnBaseInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount_currency
        if self.amount_currency:
            _dict['amount_currency'] = self.amount_currency.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AddOnBaseInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "invoice_display_name": obj.get("invoice_display_name"),
            "code": obj.get("code"),
            "amount_cents": obj.get("amount_cents"),
            "amount_currency": Currency.from_dict(obj.get("amount_currency")) if obj.get("amount_currency") is not None else None,
            "description": obj.get("description"),
            "tax_codes": obj.get("tax_codes")
        })
        return _obj


