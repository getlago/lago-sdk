# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from lago_api.models.plan_overrides_object_charges_inner import PlanOverridesObjectChargesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PlanOverridesObject(BaseModel):
    """
    Based plan overrides.
    """ # noqa: E501
    amount_cents: Optional[StrictInt] = Field(default=None, description="The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.")
    amount_currency: Optional[Any] = None
    description: Optional[StrictStr] = Field(default=None, description="The description on the plan.")
    invoice_display_name: Optional[StrictStr] = Field(default=None, description="Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the plan.")
    tax_codes: Optional[List[StrictStr]] = Field(default=None, description="List of unique code used to identify the taxes.")
    trial_period: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The duration in days during which the base cost of the plan is offered for free.")
    charges: Optional[List[PlanOverridesObjectChargesInner]] = Field(default=None, description="Additional usage-based charges for this plan.")
    __properties: ClassVar[List[str]] = ["amount_cents", "amount_currency", "description", "invoice_display_name", "name", "tax_codes", "trial_period", "charges"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PlanOverridesObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount_currency
        if self.amount_currency:
            _dict['amount_currency'] = self.amount_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PlanOverridesObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_cents": obj.get("amount_cents"),
            "amount_currency": Currency.from_dict(obj.get("amount_currency")) if obj.get("amount_currency") is not None else None,
            "description": obj.get("description"),
            "invoice_display_name": obj.get("invoice_display_name"),
            "name": obj.get("name"),
            "tax_codes": obj.get("tax_codes"),
            "trial_period": obj.get("trial_period"),
            "charges": [PlanOverridesObjectChargesInner.from_dict(_item) for _item in obj.get("charges")] if obj.get("charges") is not None else None
        })
        return _obj


