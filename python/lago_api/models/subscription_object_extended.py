# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from lago_api.models.plan_object import PlanObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubscriptionObjectExtended(BaseModel):
    """
    SubscriptionObjectExtended
    """ # noqa: E501
    lago_id: StrictStr = Field(description="Unique identifier assigned to the subscription within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the subscriptionâ€™s record within the Lago system")
    external_id: StrictStr = Field(description="The subscription external unique identifier (provided by your own application).")
    lago_customer_id: StrictStr = Field(description="Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system")
    external_customer_id: StrictStr = Field(description="The customer external unique identifier (provided by your own application).")
    billing_time: StrictStr = Field(description="The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).")
    name: Optional[StrictStr] = Field(default=None, description="The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.")
    plan_code: StrictStr = Field(description="The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.")
    status: StrictStr = Field(description="The status of the subscription, which can have the following values: - `pending`: a previous subscription has been downgraded, and the current one is awaiting automatic activation at the end of the billing period. - `active`: the subscription is currently active and applied to the customer. - `terminated`: the subscription is no longer active. - `canceled`: the subscription has been stopped before its activation. This can occur when two consecutive downgrades have been applied to a customer or when a subscription with a pending status is terminated.")
    created_at: datetime = Field(description="The creation date of the subscription, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). This date provides a timestamp indicating when the subscription was initially created.")
    canceled_at: Optional[datetime] = Field(default=None, description="The cancellation date of the subscription. This field is not null when the subscription is `canceled`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).")
    started_at: Optional[datetime] = Field(default=None, description="The effective start date of the subscription. This field can be null if the subscription is `pending` or `canceled`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).")
    ending_at: Optional[datetime] = Field(default=None, description="The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).")
    subscription_at: datetime = Field(description="The anniversary date and time of the initial subscription. This date serves as the basis for billing subscriptions with `anniversary` billing time. The `anniversary_date` should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).")
    terminated_at: Optional[datetime] = Field(default=None, description="The termination date of the subscription. This field is not null when the subscription is `terminated`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC)")
    previous_plan_code: Optional[StrictStr] = Field(default=None, description="The code identifying the previous plan associated with this subscription.")
    next_plan_code: Optional[StrictStr] = Field(default=None, description="The code identifying the next plan in the case of a downgrade.")
    downgrade_plan_date: Optional[datetime] = Field(default=None, description="The date when the plan will be downgraded, represented in ISO 8601 date format.")
    plan: Optional[PlanObject] = None
    __properties: ClassVar[List[str]] = ["lago_id", "external_id", "lago_customer_id", "external_customer_id", "billing_time", "name", "plan_code", "status", "created_at", "canceled_at", "started_at", "ending_at", "subscription_at", "terminated_at", "previous_plan_code", "next_plan_code", "downgrade_plan_date", "plan"]

    @field_validator('billing_time')
    def billing_time_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('calendar', 'anniversary'):
            raise ValueError("must be one of enum values ('calendar', 'anniversary')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('active', 'pending', 'terminated', 'canceled'):
            raise ValueError("must be one of enum values ('active', 'pending', 'terminated', 'canceled')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubscriptionObjectExtended from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if canceled_at (nullable) is None
        # and model_fields_set contains the field
        if self.canceled_at is None and "canceled_at" in self.model_fields_set:
            _dict['canceled_at'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if terminated_at (nullable) is None
        # and model_fields_set contains the field
        if self.terminated_at is None and "terminated_at" in self.model_fields_set:
            _dict['terminated_at'] = None

        # set to None if previous_plan_code (nullable) is None
        # and model_fields_set contains the field
        if self.previous_plan_code is None and "previous_plan_code" in self.model_fields_set:
            _dict['previous_plan_code'] = None

        # set to None if next_plan_code (nullable) is None
        # and model_fields_set contains the field
        if self.next_plan_code is None and "next_plan_code" in self.model_fields_set:
            _dict['next_plan_code'] = None

        # set to None if downgrade_plan_date (nullable) is None
        # and model_fields_set contains the field
        if self.downgrade_plan_date is None and "downgrade_plan_date" in self.model_fields_set:
            _dict['downgrade_plan_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubscriptionObjectExtended from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lago_id": obj.get("lago_id"),
            "external_id": obj.get("external_id"),
            "lago_customer_id": obj.get("lago_customer_id"),
            "external_customer_id": obj.get("external_customer_id"),
            "billing_time": obj.get("billing_time"),
            "name": obj.get("name"),
            "plan_code": obj.get("plan_code"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "canceled_at": obj.get("canceled_at"),
            "started_at": obj.get("started_at"),
            "ending_at": obj.get("ending_at"),
            "subscription_at": obj.get("subscription_at"),
            "terminated_at": obj.get("terminated_at"),
            "previous_plan_code": obj.get("previous_plan_code"),
            "next_plan_code": obj.get("next_plan_code"),
            "downgrade_plan_date": obj.get("downgrade_plan_date"),
            "plan": PlanObject.from_dict(obj.get("plan")) if obj.get("plan") is not None else None
        })
        return _obj


