# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomerBillingConfiguration(BaseModel):
    """
    Configuration specific to the payment provider, utilized for billing the customer. This object contains settings and parameters necessary for processing payments and invoicing the customer.
    """ # noqa: E501
    invoice_grace_period: Optional[StrictInt] = Field(default=None, description="The grace period, expressed in days, for the invoice. This period refers to the additional time granted to the customer beyond the invoice due date to adjust usage and line items")
    payment_provider: Optional[StrictStr] = Field(default=None, description="The payment provider utilized to initiate payments for invoices issued by Lago. Accepted values: `stripe`, `adyen`, `gocardless` or null. This field is required if you intend to assign a `provider_customer_id`.")
    provider_customer_id: Optional[StrictStr] = Field(default=None, description="The customer ID within the payment provider's system. If this field is not provided, Lago has the option to create a new customer record within the payment provider's system on behalf of the customer")
    sync: Optional[StrictBool] = Field(default=None, description="Set this field to `true` if you want to create the customer in the payment provider synchronously with the customer creation process in Lago. This option is applicable only when the `provider_customer_id` is `null` and the customer is automatically created in the payment provider through Lago. By default, the value is set to `false`")
    sync_with_provider: Optional[StrictBool] = Field(default=None, description="Set this field to `true` if you want to create a customer record in the payment provider's system. This option is applicable only when the `provider_customer_id` is null and the `sync_with_provider` field is set to `true`. By default, the value is set to `false`")
    document_locale: Optional[StrictStr] = Field(default=None, description="The document locale, specified in the ISO 639-1 format. This field represents the language or locale used for the documents issued by Lago")
    provider_payment_methods: Optional[List[StrictStr]] = Field(default=None, description="Specifies the available payment methods that can be used for this customer when `payment_provider` is set to `stripe`. The `provider_payment_methods` field is an array that allows multiple payment options to be defined. If this field is not explicitly set, all the payment methods are selected. For now, possible values are `card` and `sepa_debit`.")
    __properties: ClassVar[List[str]] = ["invoice_grace_period", "payment_provider", "provider_customer_id", "sync", "sync_with_provider", "document_locale", "provider_payment_methods"]

    @field_validator('payment_provider')
    def payment_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('stripe', 'adyen', 'gocardless'):
            raise ValueError("must be one of enum values ('stripe', 'adyen', 'gocardless')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomerBillingConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if provider_payment_methods (nullable) is None
        # and model_fields_set contains the field
        if self.provider_payment_methods is None and "provider_payment_methods" in self.model_fields_set:
            _dict['provider_payment_methods'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomerBillingConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_grace_period": obj.get("invoice_grace_period"),
            "payment_provider": obj.get("payment_provider"),
            "provider_customer_id": obj.get("provider_customer_id"),
            "sync": obj.get("sync"),
            "sync_with_provider": obj.get("sync_with_provider"),
            "document_locale": obj.get("document_locale"),
            "provider_payment_methods": obj.get("provider_payment_methods")
        })
        return _obj


