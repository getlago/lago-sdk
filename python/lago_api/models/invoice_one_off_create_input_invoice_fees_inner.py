# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoiceOneOffCreateInputInvoiceFeesInner(BaseModel):
    """
    InvoiceOneOffCreateInputInvoiceFeesInner
    """ # noqa: E501
    add_on_code: StrictStr = Field(description="The code of the add-on used as invoice item.")
    invoice_display_name: Optional[StrictStr] = Field(default=None, description="Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.")
    unit_amount_cents: Optional[StrictInt] = Field(default=None, description="The amount of the fee per unit, expressed in cents. By default, the amount of the add-on is used.")
    units: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The quantity of units associated with the fee. By default, only 1 unit is added to the invoice.")
    description: Optional[StrictStr] = Field(default=None, description="This is a description")
    tax_codes: Optional[List[StrictStr]] = Field(default=None, description="List of unique code used to identify the taxes.")
    __properties: ClassVar[List[str]] = ["add_on_code", "invoice_display_name", "unit_amount_cents", "units", "description", "tax_codes"]

    @field_validator('units')
    def units_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]+.?[0-9]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]+.?[0-9]*$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoiceOneOffCreateInputInvoiceFeesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if unit_amount_cents (nullable) is None
        # and model_fields_set contains the field
        if self.unit_amount_cents is None and "unit_amount_cents" in self.model_fields_set:
            _dict['unit_amount_cents'] = None

        # set to None if units (nullable) is None
        # and model_fields_set contains the field
        if self.units is None and "units" in self.model_fields_set:
            _dict['units'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoiceOneOffCreateInputInvoiceFeesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "add_on_code": obj.get("add_on_code"),
            "invoice_display_name": obj.get("invoice_display_name"),
            "unit_amount_cents": obj.get("unit_amount_cents"),
            "units": obj.get("units"),
            "description": obj.get("description"),
            "tax_codes": obj.get("tax_codes")
        })
        return _obj


