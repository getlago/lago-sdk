# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from lago_api.models.invoice_one_off_create_input_invoice_fees_inner import InvoiceOneOffCreateInputInvoiceFeesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoiceOneOffCreateInputInvoice(BaseModel):
    """
    InvoiceOneOffCreateInputInvoice
    """ # noqa: E501
    external_customer_id: StrictStr = Field(description="Unique identifier assigned to the customer in your application.")
    currency: Optional[Any] = None
    fees: List[InvoiceOneOffCreateInputInvoiceFeesInner]
    __properties: ClassVar[List[str]] = ["external_customer_id", "currency", "fees"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoiceOneOffCreateInputInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item in self.fees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fees'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoiceOneOffCreateInputInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_customer_id": obj.get("external_customer_id"),
            "currency": Currency.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "fees": [InvoiceOneOffCreateInputInvoiceFeesInner.from_dict(_item) for _item in obj.get("fees")] if obj.get("fees") is not None else None
        })
        return _obj


