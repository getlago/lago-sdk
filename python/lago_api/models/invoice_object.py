# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from lago_api.models.invoice_applied_tax_object import InvoiceAppliedTaxObject
from lago_api.models.invoice_metadata_object import InvoiceMetadataObject
from lago_api.models.invoice_object_customer import InvoiceObjectCustomer
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoiceObject(BaseModel):
    """
    InvoiceObject
    """ # noqa: E501
    lago_id: StrictStr = Field(description="Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system.")
    sequential_id: StrictInt = Field(description="This ID helps in uniquely identifying and organizing the invoices associated with a specific customer. It provides a sequential numbering system specific to the customer, allowing for easy tracking and management of invoices within the customer's context.")
    number: StrictStr = Field(description="The unique number assigned to the invoice. This number serves as a distinct identifier for the invoice and helps in differentiating it from other invoices in the system.")
    issuing_date: date = Field(description="The date when the invoice was issued. It is provided in the ISO 8601 date format.")
    payment_due_date: Optional[date] = Field(default=None, description="The payment due date for the invoice, specified in the ISO 8601 date format.")
    net_payment_term: Optional[StrictInt] = Field(default=None, description="The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.")
    invoice_type: StrictStr = Field(description="The type of invoice issued. Possible values are `subscription`, `one-off` or `credit`.")
    status: StrictStr = Field(description="The status of the invoice. It indicates the current state of the invoice and can have two possible values: - `draft`: the invoice is in the draft state, waiting for the end of the grace period to be finalized. During this period, events can still be ingested and added to the invoice. - `finalized`: the invoice has been issued and finalized. In this state, events cannot be ingested or added to the invoice anymore.")
    payment_status: StrictStr = Field(description="The status of the payment associated with the invoice. It can have one of the following values: - `pending`: the payment is pending, waiting for payment processing in Stripe or when the invoice is emitted but users have not updated the payment status through the endpoint. - `succeeded`: the payment of the invoice has been successfully processed. - `failed`: the payment of the invoice has failed or encountered an error during processing.")
    currency: Any
    fees_amount_cents: StrictInt = Field(description="The total sum of fees amount in cents. It calculates the cumulative amount of all the fees associated with the invoice, providing a consolidated value.")
    coupons_amount_cents: StrictInt = Field(description="The total sum of all coupons discounted on the invoice. It calculates the cumulative discount amount applied by coupons, expressed in cents.")
    credit_notes_amount_cents: StrictInt = Field(description="The total sum of all credit notes discounted on the invoice. It calculates the cumulative discount amount applied by credit notes, expressed in cents.")
    sub_total_excluding_taxes_amount_cents: StrictInt = Field(description="Subtotal amount, excluding taxes, expressed in cents. This field depends on the version number. Here are the definitions based on the version: - Version 1: is equal to the sum of `fees_amount_cents`, minus `coupons_amount_cents`, and minus `prepaid_credit_amount_cents`. - Version 2: is equal to the `fees_amount_cents`. - Version 3: is equal to the `fees_amount_cents`, minus `coupons_amount_cents`")
    taxes_amount_cents: StrictInt = Field(description="The sum of tax amount associated with the invoice, expressed in cents.")
    sub_total_including_taxes_amount_cents: StrictInt = Field(description="Subtotal amount, including taxes, expressed in cents. This field depends on the version number. Here are the definitions based on the version: - Version 1: is equal to the `total_amount_cents`. - Version 2: is equal to the sum of `fees_amount_cents` and `taxes_amount_cents`. - Version 3: is equal to the sum `sub_total_excluding_taxes_amount_cents` and `taxes_amount_cents`")
    prepaid_credit_amount_cents: StrictInt = Field(description="The total sum of all prepaid credits discounted on the invoice. It calculates the cumulative discount amount applied by prepaid credits, expressed in cents.")
    total_amount_cents: StrictInt = Field(description="The sum of the amount and taxes amount on the invoice, expressed in cents. It calculates the total financial value of the invoice, including both the original amount and any applicable taxes.")
    version_number: StrictInt
    file_url: Optional[StrictStr] = Field(default=None, description="Contains the URL that provides direct access to the invoice PDF file. You can use this URL to download or view the PDF document of the invoice")
    customer: Optional[InvoiceObjectCustomer] = None
    metadata: Optional[List[InvoiceMetadataObject]] = None
    applied_taxes: Optional[List[InvoiceAppliedTaxObject]] = None
    __properties: ClassVar[List[str]] = ["lago_id", "sequential_id", "number", "issuing_date", "payment_due_date", "net_payment_term", "invoice_type", "status", "payment_status", "currency", "fees_amount_cents", "coupons_amount_cents", "credit_notes_amount_cents", "sub_total_excluding_taxes_amount_cents", "taxes_amount_cents", "sub_total_including_taxes_amount_cents", "prepaid_credit_amount_cents", "total_amount_cents", "version_number", "file_url", "customer", "metadata", "applied_taxes"]

    @field_validator('invoice_type')
    def invoice_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('subscription', 'add_on', 'credit', 'one_off'):
            raise ValueError("must be one of enum values ('subscription', 'add_on', 'credit', 'one_off')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('draft', 'finalized'):
            raise ValueError("must be one of enum values ('draft', 'finalized')")
        return value

    @field_validator('payment_status')
    def payment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('pending', 'succeeded', 'failed'):
            raise ValueError("must be one of enum values ('pending', 'succeeded', 'failed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoiceObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in applied_taxes (list)
        _items = []
        if self.applied_taxes:
            for _item in self.applied_taxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applied_taxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoiceObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lago_id": obj.get("lago_id"),
            "sequential_id": obj.get("sequential_id"),
            "number": obj.get("number"),
            "issuing_date": obj.get("issuing_date"),
            "payment_due_date": obj.get("payment_due_date"),
            "net_payment_term": obj.get("net_payment_term"),
            "invoice_type": obj.get("invoice_type"),
            "status": obj.get("status"),
            "payment_status": obj.get("payment_status"),
            "currency": Currency.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "fees_amount_cents": obj.get("fees_amount_cents"),
            "coupons_amount_cents": obj.get("coupons_amount_cents"),
            "credit_notes_amount_cents": obj.get("credit_notes_amount_cents"),
            "sub_total_excluding_taxes_amount_cents": obj.get("sub_total_excluding_taxes_amount_cents"),
            "taxes_amount_cents": obj.get("taxes_amount_cents"),
            "sub_total_including_taxes_amount_cents": obj.get("sub_total_including_taxes_amount_cents"),
            "prepaid_credit_amount_cents": obj.get("prepaid_credit_amount_cents"),
            "total_amount_cents": obj.get("total_amount_cents"),
            "version_number": obj.get("version_number"),
            "file_url": obj.get("file_url"),
            "customer": InvoiceObjectCustomer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "metadata": [InvoiceMetadataObject.from_dict(_item) for _item in obj.get("metadata")] if obj.get("metadata") is not None else None,
            "applied_taxes": [InvoiceAppliedTaxObject.from_dict(_item) for _item in obj.get("applied_taxes")] if obj.get("applied_taxes") is not None else None
        })
        return _obj


