# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from pydantic import Field
from lago_api.models.credit_note_estimate_input_credit_note_items_inner import CreditNoteEstimateInputCreditNoteItemsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreditNoteCreateInputCreditNote(BaseModel):
    """
    CreditNoteCreateInputCreditNote
    """ # noqa: E501
    invoice_id: StrictStr = Field(description="The invoice unique identifier, created by Lago.")
    reason: Optional[StrictStr] = Field(default=None, description="The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.")
    description: Optional[StrictStr] = Field(default=None, description="The description of the credit note.")
    credit_amount_cents: Optional[StrictInt] = Field(default=None, description="The total amount to be credited on the customer balance.")
    refund_amount_cents: Optional[StrictInt] = Field(default=None, description="The total amount to be refunded to the customer.")
    items: List[CreditNoteEstimateInputCreditNoteItemsInner] = Field(description="The list of credit noteâ€™s items.")
    __properties: ClassVar[List[str]] = ["invoice_id", "reason", "description", "credit_amount_cents", "refund_amount_cents", "items"]

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('duplicated_charge', 'product_unsatisfactory', 'order_change', 'order_cancellation', 'fraudulent_charge', 'other'):
            raise ValueError("must be one of enum values ('duplicated_charge', 'product_unsatisfactory', 'order_change', 'order_cancellation', 'fraudulent_charge', 'other')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreditNoteCreateInputCreditNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if credit_amount_cents (nullable) is None
        # and model_fields_set contains the field
        if self.credit_amount_cents is None and "credit_amount_cents" in self.model_fields_set:
            _dict['credit_amount_cents'] = None

        # set to None if refund_amount_cents (nullable) is None
        # and model_fields_set contains the field
        if self.refund_amount_cents is None and "refund_amount_cents" in self.model_fields_set:
            _dict['refund_amount_cents'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreditNoteCreateInputCreditNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoice_id": obj.get("invoice_id"),
            "reason": obj.get("reason"),
            "description": obj.get("description"),
            "credit_amount_cents": obj.get("credit_amount_cents"),
            "refund_amount_cents": obj.get("refund_amount_cents"),
            "items": [CreditNoteEstimateInputCreditNoteItemsInner.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None
        })
        return _obj


