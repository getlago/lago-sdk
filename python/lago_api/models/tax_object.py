# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaxObject(BaseModel):
    """
    TaxObject
    """ # noqa: E501
    lago_id: StrictStr = Field(description="Unique identifier of the tax, created by Lago.")
    name: StrictStr = Field(description="Name of the tax.")
    code: StrictStr = Field(description="Unique code used to identify the tax associated with the API request.")
    description: Optional[StrictStr] = Field(default=None, description="Internal description of the taxe")
    rate: Union[StrictFloat, StrictInt] = Field(description="The percentage rate of the tax")
    applied_to_organization: StrictBool = Field(description="Set to `true` if the tax is used as one of the organization's default")
    add_ons_count: Optional[StrictInt] = Field(default=None, description="Number of add-ons this tax is applied to.")
    charges_count: Optional[StrictInt] = Field(default=None, description="Number of charges this tax is applied to.")
    customers_count: StrictInt = Field(description="Number of customers this tax is applied to (directly or via the organization's default).")
    plans_count: Optional[StrictInt] = Field(default=None, description="Number of plans this tax is applied to.")
    created_at: datetime = Field(description="Creation date of the tax.")
    __properties: ClassVar[List[str]] = ["lago_id", "name", "code", "description", "rate", "applied_to_organization", "add_ons_count", "charges_count", "customers_count", "plans_count", "created_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaxObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaxObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lago_id": obj.get("lago_id"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "description": obj.get("description"),
            "rate": obj.get("rate"),
            "applied_to_organization": obj.get("applied_to_organization"),
            "add_ons_count": obj.get("add_ons_count"),
            "charges_count": obj.get("charges_count"),
            "customers_count": obj.get("customers_count"),
            "plans_count": obj.get("plans_count"),
            "created_at": obj.get("created_at")
        })
        return _obj


