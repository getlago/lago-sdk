# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from lago_api.models.plan_overrides_object import PlanOverridesObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubscriptionCreateInputSubscription(BaseModel):
    """
    SubscriptionCreateInputSubscription
    """ # noqa: E501
    external_customer_id: StrictStr = Field(description="The customer external unique identifier (provided by your own application)")
    plan_code: StrictStr = Field(description="The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.")
    name: Optional[StrictStr] = Field(default=None, description="The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.")
    external_id: StrictStr = Field(description="The unique external identifier for the subscription. This identifier serves as an idempotency key, ensuring that each subscription is unique.")
    billing_time: Optional[StrictStr] = Field(default=None, description="The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).")
    ending_at: Optional[datetime] = Field(default=None, description="The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).")
    subscription_at: Optional[datetime] = Field(default=None, description="The start date for the subscription, allowing for the creation of subscriptions that can begin in the past or future. Please note that it cannot be used to update the start date of a pending subscription or schedule an upgrade/downgrade. The start_date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).")
    plan_overrides: Optional[PlanOverridesObject] = None
    __properties: ClassVar[List[str]] = ["external_customer_id", "plan_code", "name", "external_id", "billing_time", "ending_at", "subscription_at", "plan_overrides"]

    @field_validator('billing_time')
    def billing_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('calendar', 'anniversary'):
            raise ValueError("must be one of enum values ('calendar', 'anniversary')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubscriptionCreateInputSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plan_overrides
        if self.plan_overrides:
            _dict['plan_overrides'] = self.plan_overrides.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubscriptionCreateInputSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "external_customer_id": obj.get("external_customer_id"),
            "plan_code": obj.get("plan_code"),
            "name": obj.get("name"),
            "external_id": obj.get("external_id"),
            "billing_time": obj.get("billing_time"),
            "ending_at": obj.get("ending_at"),
            "subscription_at": obj.get("subscription_at"),
            "plan_overrides": PlanOverridesObject.from_dict(obj.get("plan_overrides")) if obj.get("plan_overrides") is not None else None
        })
        return _obj


