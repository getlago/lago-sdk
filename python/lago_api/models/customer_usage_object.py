# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from lago_api.models.customer_charge_usage_object import CustomerChargeUsageObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomerUsageObject(BaseModel):
    """
    CustomerUsageObject
    """ # noqa: E501
    from_datetime: datetime = Field(description="The lower bound of the billing period, expressed in the ISO 8601 datetime format in Coordinated Universal Time (UTC).")
    to_datetime: datetime = Field(description="The upper bound of the billing period, expressed in the ISO 8601 datetime format in Coordinated Universal Time (UTC).")
    issuing_date: datetime = Field(description="The date of creation of the invoice.")
    lago_invoice_id: Optional[StrictStr] = Field(default=None, description="A unique identifier associated with the invoice related to this particular usage record.")
    currency: Optional[Any] = None
    amount_cents: StrictInt = Field(description="The amount in cents, tax excluded.")
    taxes_amount_cents: StrictInt = Field(description="The tax amount in cents.")
    total_amount_cents: StrictInt = Field(description="The total amount in cents, tax included.")
    charges_usage: List[CustomerChargeUsageObject] = Field(description="Array of charges that comprise the current usage. It contains detailed information about individual charge items associated with the usage.")
    __properties: ClassVar[List[str]] = ["from_datetime", "to_datetime", "issuing_date", "lago_invoice_id", "currency", "amount_cents", "taxes_amount_cents", "total_amount_cents", "charges_usage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomerUsageObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charges_usage (list)
        _items = []
        if self.charges_usage:
            for _item in self.charges_usage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charges_usage'] = _items
        # set to None if lago_invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.lago_invoice_id is None and "lago_invoice_id" in self.model_fields_set:
            _dict['lago_invoice_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomerUsageObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from_datetime": obj.get("from_datetime"),
            "to_datetime": obj.get("to_datetime"),
            "issuing_date": obj.get("issuing_date"),
            "lago_invoice_id": obj.get("lago_invoice_id"),
            "currency": Currency.from_dict(obj.get("currency")) if obj.get("currency") is not None else None,
            "amount_cents": obj.get("amount_cents"),
            "taxes_amount_cents": obj.get("taxes_amount_cents"),
            "total_amount_cents": obj.get("total_amount_cents"),
            "charges_usage": [CustomerChargeUsageObject.from_dict(_item) for _item in obj.get("charges_usage")] if obj.get("charges_usage") is not None else None
        })
        return _obj


