# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from lago_api.models.plan_create_input_plan_charges_inner import PlanCreateInputPlanChargesInner

class TestPlanCreateInputPlanChargesInner(unittest.TestCase):
    """PlanCreateInputPlanChargesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlanCreateInputPlanChargesInner:
        """Test PlanCreateInputPlanChargesInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlanCreateInputPlanChargesInner`
        """
        model = PlanCreateInputPlanChargesInner()
        if include_optional:
            return PlanCreateInputPlanChargesInner(
                billable_metric_id = '1a901a90-1a90-1a90-1a90-1a901a901a90',
                charge_model = 'standard',
                pay_in_advance = False,
                invoiceable = True,
                invoice_display_name = 'Setup',
                prorated = False,
                min_amount_cents = 0,
                properties = None,
                group_properties = [
                    lago_api.models.plan_create_input_plan_charges_inner_group_properties_inner.PlanCreateInput_plan_charges_inner_group_properties_inner(
                        group_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        values = null, )
                    ],
                tax_codes = ["french_standard_vat"]
            )
        else:
            return PlanCreateInputPlanChargesInner(
        )
        """

    def testPlanCreateInputPlanChargesInner(self):
        """Test PlanCreateInputPlanChargesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
