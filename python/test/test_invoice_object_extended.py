# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from lago_api.models.invoice_object_extended import InvoiceObjectExtended

class TestInvoiceObjectExtended(unittest.TestCase):
    """InvoiceObjectExtended unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InvoiceObjectExtended:
        """Test InvoiceObjectExtended
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InvoiceObjectExtended`
        """
        model = InvoiceObjectExtended()
        if include_optional:
            return InvoiceObjectExtended(
                lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90',
                sequential_id = 2,
                number = 'LAG-1234-001-002',
                issuing_date = 'Sat Apr 30 00:00:00 UTC 2022',
                payment_due_date = 'Sat Apr 30 00:00:00 UTC 2022',
                net_payment_term = 30,
                invoice_type = 'subscription',
                status = 'finalized',
                payment_status = 'succeeded',
                currency = None,
                fees_amount_cents = 100,
                coupons_amount_cents = 10,
                credit_notes_amount_cents = 10,
                sub_total_excluding_taxes_amount_cents = 100,
                taxes_amount_cents = 20,
                sub_total_including_taxes_amount_cents = 120,
                prepaid_credit_amount_cents = 0,
                total_amount_cents = 100,
                version_number = 3,
                file_url = 'https://getlago.com/invoice/file',
                customer = None,
                metadata = [
                    lago_api.models.invoice_metadata_object.InvoiceMetadataObject(
                        lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        key = 'digital_ref_id', 
                        value = 'INV-0123456-98765', 
                        created_at = '2022-04-29T08:59:51Z', )
                    ],
                applied_taxes = [
                    lago_api.models.invoice_applied_tax_object.InvoiceAppliedTaxObject(
                        lago_invoice_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        fees_amount_cents = 20000, )
                    ],
                credits = [
                    lago_api.models.credit_object.CreditObject(
                        lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        amount_cents = 1200, 
                        amount_currency = null, 
                        before_taxes = False, 
                        item = lago_api.models.credit_object_item.CreditObject_item(
                            lago_item_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                            type = 'coupon', 
                            code = 'startup_deal', 
                            name = 'Startup Deal', ), 
                        invoice = lago_api.models.credit_object_invoice.CreditObject_invoice(
                            lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                            payment_status = 'succeeded', ), )
                    ],
                fees = [
                    lago_api.models.fee_object.FeeObject(
                        lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        lago_group_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        lago_invoice_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        lago_true_up_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        lago_true_up_parent_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        lago_subscription_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        lago_customer_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        external_customer_id = 'external_id', 
                        external_subscription_id = 'external_id', 
                        invoice_display_name = 'Setup Fee (SF1)', 
                        amount_cents = 100, 
                        amount_currency = null, 
                        taxes_amount_cents = 20, 
                        taxes_rate = 20, 
                        units = '0.32', 
                        precise_unit_amount = '312.5', 
                        total_amount_cents = 120, 
                        total_amount_currency = null, 
                        events_count = 23, 
                        pay_in_advance = True, 
                        invoiceable = True, 
                        from_date = '2022-04-29T08:59:51Z', 
                        to_date = '2022-05-29T08:59:51Z', 
                        payment_status = 'pending', 
                        created_at = '2022-08-24T14:58:59Z', 
                        succeeded_at = '2022-08-24T14:58:59Z', 
                        failed_at = '2022-08-24T14:58:59Z', 
                        refunded_at = '2022-08-24T14:58:59Z', 
                        event_transaction_id = 'transaction_1234567890', 
                        item = lago_api.models.fee_object_item.FeeObject_item(
                            type = 'subscription', 
                            code = 'startup', 
                            name = 'Startup', 
                            invoice_display_name = 'Setup Fee (SF1)', 
                            group_invoice_display_name = 'Transactions - ACH', 
                            lago_item_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                            item_type = 'Subscription', ), 
                        applied_taxes = [
                            lago_api.models.fee_applied_tax_object.FeeAppliedTaxObject(
                                lago_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', )
                            ], )
                    ],
                subscriptions = [
                    lago_api.models.subscription_object.SubscriptionObject(
                        lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        external_id = '5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba', 
                        lago_customer_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        external_customer_id = '5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba', 
                        billing_time = 'anniversary', 
                        name = 'Repository A', 
                        plan_code = 'premium', 
                        status = 'active', 
                        created_at = '2022-08-08T00:00Z', 
                        canceled_at = '2022-09-14T16:35:31Z', 
                        started_at = '2022-08-08T00:00Z', 
                        ending_at = '2022-10-08T00:00Z', 
                        subscription_at = '2022-08-08T00:00Z', 
                        terminated_at = '2022-09-14T16:35:31Z', 
                        previous_plan_code = '', 
                        next_plan_code = '', 
                        downgrade_plan_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return InvoiceObjectExtended(
                lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90',
                sequential_id = 2,
                number = 'LAG-1234-001-002',
                issuing_date = 'Sat Apr 30 00:00:00 UTC 2022',
                invoice_type = 'subscription',
                status = 'finalized',
                payment_status = 'succeeded',
                currency = None,
                fees_amount_cents = 100,
                coupons_amount_cents = 10,
                credit_notes_amount_cents = 10,
                sub_total_excluding_taxes_amount_cents = 100,
                taxes_amount_cents = 20,
                sub_total_including_taxes_amount_cents = 120,
                prepaid_credit_amount_cents = 0,
                total_amount_cents = 100,
                version_number = 3,
        )
        """

    def testInvoiceObjectExtended(self):
        """Test InvoiceObjectExtended"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
