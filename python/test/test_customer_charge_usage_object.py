# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from lago_api.models.customer_charge_usage_object import CustomerChargeUsageObject

class TestCustomerChargeUsageObject(unittest.TestCase):
    """CustomerChargeUsageObject unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomerChargeUsageObject:
        """Test CustomerChargeUsageObject
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomerChargeUsageObject`
        """
        model = CustomerChargeUsageObject()
        if include_optional:
            return CustomerChargeUsageObject(
                units = '1.0',
                events_count = 10,
                amount_cents = 123,
                amount_currency = None,
                charge = lago_api.models.customer_charge_usage_object_charge.CustomerChargeUsageObject_charge(
                    lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    charge_model = 'graduated', 
                    invoice_display_name = 'Setup', ),
                billable_metric = lago_api.models.customer_charge_usage_object_billable_metric.CustomerChargeUsageObject_billable_metric(
                    lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    name = 'Storage', 
                    code = 'storage', 
                    aggregation_type = 'sum_agg', ),
                groups = [
                    lago_api.models.customer_charge_usage_object_groups_inner.CustomerChargeUsageObject_groups_inner(
                        lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        key = '', 
                        value = 'europe', 
                        units = '0.9', 
                        events_count = 10, 
                        amount_cents = 1000, )
                    ]
            )
        else:
            return CustomerChargeUsageObject(
                units = '1.0',
                events_count = 10,
                amount_cents = 123,
                amount_currency = None,
                charge = lago_api.models.customer_charge_usage_object_charge.CustomerChargeUsageObject_charge(
                    lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    charge_model = 'graduated', 
                    invoice_display_name = 'Setup', ),
                billable_metric = lago_api.models.customer_charge_usage_object_billable_metric.CustomerChargeUsageObject_billable_metric(
                    lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    name = 'Storage', 
                    code = 'storage', 
                    aggregation_type = 'sum_agg', ),
                groups = [
                    lago_api.models.customer_charge_usage_object_groups_inner.CustomerChargeUsageObject_groups_inner(
                        lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        key = '', 
                        value = 'europe', 
                        units = '0.9', 
                        events_count = 10, 
                        amount_cents = 1000, )
                    ],
        )
        """

    def testCustomerChargeUsageObject(self):
        """Test CustomerChargeUsageObject"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
