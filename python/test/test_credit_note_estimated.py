# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from lago_api.models.credit_note_estimated import CreditNoteEstimated

class TestCreditNoteEstimated(unittest.TestCase):
    """CreditNoteEstimated unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreditNoteEstimated:
        """Test CreditNoteEstimated
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreditNoteEstimated`
        """
        model = CreditNoteEstimated()
        if include_optional:
            return CreditNoteEstimated(
                estimated_credit_note = lago_api.models.credit_note_estimated_estimated_credit_note.CreditNoteEstimated_estimated_credit_note(
                    lago_invoice_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    invoice_number = 'LAG-1234', 
                    currency = null, 
                    taxes_amount_cents = 20, 
                    taxes_rate = 20, 
                    sub_total_excluding_taxes_amount_cents = 100, 
                    max_creditable_amount_cents = 100, 
                    max_refundable_amount_cents = 0, 
                    coupons_adjustment_amount_cents = 20, 
                    items = [
                        lago_api.models.credit_note_estimated_estimated_credit_note_items_inner.CreditNoteEstimated_estimated_credit_note_items_inner(
                            amount_cents = 100, 
                            lago_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', )
                        ], 
                    applied_taxes = [
                        lago_api.models.credit_note_estimated_estimated_credit_note_applied_taxes_inner.CreditNoteEstimated_estimated_credit_note_applied_taxes_inner(
                            lago_tax_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                            tax_name = 'TVA', 
                            tax_code = 'french_standard_vat', 
                            tax_rate = 20, 
                            tax_description = 'French standard VAT', 
                            base_amount_cents = 100, 
                            amount_cents = 2000, 
                            amount_currency = null, )
                        ], )
            )
        else:
            return CreditNoteEstimated(
                estimated_credit_note = lago_api.models.credit_note_estimated_estimated_credit_note.CreditNoteEstimated_estimated_credit_note(
                    lago_invoice_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    invoice_number = 'LAG-1234', 
                    currency = null, 
                    taxes_amount_cents = 20, 
                    taxes_rate = 20, 
                    sub_total_excluding_taxes_amount_cents = 100, 
                    max_creditable_amount_cents = 100, 
                    max_refundable_amount_cents = 0, 
                    coupons_adjustment_amount_cents = 20, 
                    items = [
                        lago_api.models.credit_note_estimated_estimated_credit_note_items_inner.CreditNoteEstimated_estimated_credit_note_items_inner(
                            amount_cents = 100, 
                            lago_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', )
                        ], 
                    applied_taxes = [
                        lago_api.models.credit_note_estimated_estimated_credit_note_applied_taxes_inner.CreditNoteEstimated_estimated_credit_note_applied_taxes_inner(
                            lago_tax_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                            tax_name = 'TVA', 
                            tax_code = 'french_standard_vat', 
                            tax_rate = 20, 
                            tax_description = 'French standard VAT', 
                            base_amount_cents = 100, 
                            amount_cents = 2000, 
                            amount_currency = null, )
                        ], ),
        )
        """

    def testCreditNoteEstimated(self):
        """Test CreditNoteEstimated"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
