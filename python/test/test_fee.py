# coding: utf-8

"""
    Lago API documentation

    Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

    The version of the OpenAPI document: 0.52.0-beta
    Contact: tech@getlago.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from lago_api.models.fee import Fee

class TestFee(unittest.TestCase):
    """Fee unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Fee:
        """Test Fee
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Fee`
        """
        model = Fee()
        if include_optional:
            return Fee(
                fee = lago_api.models.fee_object.FeeObject(
                    lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_group_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_invoice_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_true_up_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_true_up_parent_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_subscription_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_customer_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    external_customer_id = 'external_id', 
                    external_subscription_id = 'external_id', 
                    invoice_display_name = 'Setup Fee (SF1)', 
                    amount_cents = 100, 
                    amount_currency = null, 
                    taxes_amount_cents = 20, 
                    taxes_rate = 20, 
                    units = '0.32', 
                    precise_unit_amount = '312.5', 
                    total_amount_cents = 120, 
                    total_amount_currency = null, 
                    events_count = 23, 
                    pay_in_advance = True, 
                    invoiceable = True, 
                    from_date = '2022-04-29T08:59:51Z', 
                    to_date = '2022-05-29T08:59:51Z', 
                    payment_status = 'pending', 
                    created_at = '2022-08-24T14:58:59Z', 
                    succeeded_at = '2022-08-24T14:58:59Z', 
                    failed_at = '2022-08-24T14:58:59Z', 
                    refunded_at = '2022-08-24T14:58:59Z', 
                    event_transaction_id = 'transaction_1234567890', 
                    item = lago_api.models.fee_object_item.FeeObject_item(
                        type = 'subscription', 
                        code = 'startup', 
                        name = 'Startup', 
                        invoice_display_name = 'Setup Fee (SF1)', 
                        group_invoice_display_name = 'Transactions - ACH', 
                        lago_item_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        item_type = 'Subscription', ), 
                    applied_taxes = [
                        lago_api.models.fee_applied_tax_object.FeeAppliedTaxObject(
                            lago_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', )
                        ], )
            )
        else:
            return Fee(
                fee = lago_api.models.fee_object.FeeObject(
                    lago_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_group_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_invoice_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_true_up_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_true_up_parent_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_subscription_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    lago_customer_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                    external_customer_id = 'external_id', 
                    external_subscription_id = 'external_id', 
                    invoice_display_name = 'Setup Fee (SF1)', 
                    amount_cents = 100, 
                    amount_currency = null, 
                    taxes_amount_cents = 20, 
                    taxes_rate = 20, 
                    units = '0.32', 
                    precise_unit_amount = '312.5', 
                    total_amount_cents = 120, 
                    total_amount_currency = null, 
                    events_count = 23, 
                    pay_in_advance = True, 
                    invoiceable = True, 
                    from_date = '2022-04-29T08:59:51Z', 
                    to_date = '2022-05-29T08:59:51Z', 
                    payment_status = 'pending', 
                    created_at = '2022-08-24T14:58:59Z', 
                    succeeded_at = '2022-08-24T14:58:59Z', 
                    failed_at = '2022-08-24T14:58:59Z', 
                    refunded_at = '2022-08-24T14:58:59Z', 
                    event_transaction_id = 'transaction_1234567890', 
                    item = lago_api.models.fee_object_item.FeeObject_item(
                        type = 'subscription', 
                        code = 'startup', 
                        name = 'Startup', 
                        invoice_display_name = 'Setup Fee (SF1)', 
                        group_invoice_display_name = 'Transactions - ACH', 
                        lago_item_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', 
                        item_type = 'Subscription', ), 
                    applied_taxes = [
                        lago_api.models.fee_applied_tax_object.FeeAppliedTaxObject(
                            lago_fee_id = '1a901a90-1a90-1a90-1a90-1a901a901a90', )
                        ], ),
        )
        """

    def testFee(self):
        """Test Fee"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
