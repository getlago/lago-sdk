=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.53.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module LagoAPI
  class OrganizationObject
    # Unique identifier assigned to the organization within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the organization's record within the Lago system
    attr_accessor :lago_id

    # The name of your organization.
    attr_accessor :name

    # The date of creation of your organization, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
    attr_accessor :created_at

    # The URL of your newest updated webhook endpoint. This URL allows your organization to receive important messages, notifications, or data from the Lago system. By configuring your webhook endpoint to this URL, you can ensure that your organization stays informed and receives relevant information in a timely manner.
    attr_accessor :webhook_url

    # The array containing your webhooks URLs.
    attr_accessor :webhook_urls

    attr_accessor :country

    attr_accessor :default_currency

    # The first line of your organization’s billing address.
    attr_accessor :address_line1

    # The second line of your organization’s billing address.
    attr_accessor :address_line2

    # The state of your organization’s billing address.
    attr_accessor :state

    # The zipcode of your organization’s billing address.
    attr_accessor :zipcode

    # The email address of your organization used to bill your customers.
    attr_accessor :email

    # The city of your organization’s billing address.
    attr_accessor :city

    # The legal name of your organization.
    attr_accessor :legal_name

    # The legal number of your organization.
    attr_accessor :legal_number

    # This parameter configures the method of incrementing invoice numbers for your customers.  - `per_customer`: Invoice numbers are incremented individually for each customer. This means every customer will have their own unique sequence of invoice numbers, separate from other customers. It ensures that each customer's invoice numbers follow a distinct and isolated numbering pattern. - `per_organization`: Invoice number incrementation is made across your entire organization. Rather than individual sequences for each customer, all invoices within the organization follow a single, unified numbering system. This creates a continuous and organization-wide sequence for all invoice numbers. Invoices are incremented per month (dynamic value used is YYYYMM), and invoice numbers are reset at the end of each month.  The default value for `document_numbering` is set to `per_customer`, meaning that, unless changed, invoice numbers will increment uniquely for each customer.
    attr_accessor :document_numbering

    # Sets the prefix for invoices and credit notes. Default is the first three letters of your organization name plus the last four digits of your organization ID. Customizable within 1-10 characters, and automatically capitalized by Lago.
    attr_accessor :document_number_prefix

    # The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
    attr_accessor :net_payment_term

    # The tax identification number of your organization.
    attr_accessor :tax_identification_number

    attr_accessor :timezone

    attr_accessor :billing_configuration

    # List of default organization taxes
    attr_accessor :taxes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'lago_id' => :'lago_id',
        :'name' => :'name',
        :'created_at' => :'created_at',
        :'webhook_url' => :'webhook_url',
        :'webhook_urls' => :'webhook_urls',
        :'country' => :'country',
        :'default_currency' => :'default_currency',
        :'address_line1' => :'address_line1',
        :'address_line2' => :'address_line2',
        :'state' => :'state',
        :'zipcode' => :'zipcode',
        :'email' => :'email',
        :'city' => :'city',
        :'legal_name' => :'legal_name',
        :'legal_number' => :'legal_number',
        :'document_numbering' => :'document_numbering',
        :'document_number_prefix' => :'document_number_prefix',
        :'net_payment_term' => :'net_payment_term',
        :'tax_identification_number' => :'tax_identification_number',
        :'timezone' => :'timezone',
        :'billing_configuration' => :'billing_configuration',
        :'taxes' => :'taxes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'lago_id' => :'String',
        :'name' => :'String',
        :'created_at' => :'Time',
        :'webhook_url' => :'String',
        :'webhook_urls' => :'Array<String>',
        :'country' => :'Country',
        :'default_currency' => :'Currency',
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'state' => :'String',
        :'zipcode' => :'String',
        :'email' => :'String',
        :'city' => :'String',
        :'legal_name' => :'String',
        :'legal_number' => :'String',
        :'document_numbering' => :'String',
        :'document_number_prefix' => :'String',
        :'net_payment_term' => :'Integer',
        :'tax_identification_number' => :'String',
        :'timezone' => :'Timezone',
        :'billing_configuration' => :'OrganizationBillingConfiguration',
        :'taxes' => :'Array<TaxObject>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'created_at',
        :'webhook_url',
        :'webhook_urls',
        :'address_line1',
        :'address_line2',
        :'state',
        :'zipcode',
        :'email',
        :'city',
        :'legal_name',
        :'legal_number',
        :'tax_identification_number',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LagoAPI::OrganizationObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LagoAPI::OrganizationObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'lago_id')
        self.lago_id = attributes[:'lago_id']
      else
        self.lago_id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'webhook_url')
        self.webhook_url = attributes[:'webhook_url']
      end

      if attributes.key?(:'webhook_urls')
        if (value = attributes[:'webhook_urls']).is_a?(Array)
          self.webhook_urls = value
        end
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'default_currency')
        self.default_currency = attributes[:'default_currency']
      end

      if attributes.key?(:'address_line1')
        self.address_line1 = attributes[:'address_line1']
      end

      if attributes.key?(:'address_line2')
        self.address_line2 = attributes[:'address_line2']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zipcode')
        self.zipcode = attributes[:'zipcode']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'legal_name')
        self.legal_name = attributes[:'legal_name']
      end

      if attributes.key?(:'legal_number')
        self.legal_number = attributes[:'legal_number']
      end

      if attributes.key?(:'document_numbering')
        self.document_numbering = attributes[:'document_numbering']
      else
        self.document_numbering = nil
      end

      if attributes.key?(:'document_number_prefix')
        self.document_number_prefix = attributes[:'document_number_prefix']
      else
        self.document_number_prefix = nil
      end

      if attributes.key?(:'net_payment_term')
        self.net_payment_term = attributes[:'net_payment_term']
      end

      if attributes.key?(:'tax_identification_number')
        self.tax_identification_number = attributes[:'tax_identification_number']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'billing_configuration')
        self.billing_configuration = attributes[:'billing_configuration']
      else
        self.billing_configuration = nil
      end

      if attributes.key?(:'taxes')
        if (value = attributes[:'taxes']).is_a?(Array)
          self.taxes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @lago_id.nil?
        invalid_properties.push('invalid value for "lago_id", lago_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @document_numbering.nil?
        invalid_properties.push('invalid value for "document_numbering", document_numbering cannot be nil.')
      end

      if @document_number_prefix.nil?
        invalid_properties.push('invalid value for "document_number_prefix", document_number_prefix cannot be nil.')
      end

      if @billing_configuration.nil?
        invalid_properties.push('invalid value for "billing_configuration", billing_configuration cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @lago_id.nil?
      return false if @name.nil?
      return false if @document_numbering.nil?
      document_numbering_validator = EnumAttributeValidator.new('String', ["per_customer", "per_organization"])
      return false unless document_numbering_validator.valid?(@document_numbering)
      return false if @document_number_prefix.nil?
      return false if @billing_configuration.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] document_numbering Object to be assigned
    def document_numbering=(document_numbering)
      validator = EnumAttributeValidator.new('String', ["per_customer", "per_organization"])
      unless validator.valid?(document_numbering)
        fail ArgumentError, "invalid value for \"document_numbering\", must be one of #{validator.allowable_values}."
      end
      @document_numbering = document_numbering
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          lago_id == o.lago_id &&
          name == o.name &&
          created_at == o.created_at &&
          webhook_url == o.webhook_url &&
          webhook_urls == o.webhook_urls &&
          country == o.country &&
          default_currency == o.default_currency &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          state == o.state &&
          zipcode == o.zipcode &&
          email == o.email &&
          city == o.city &&
          legal_name == o.legal_name &&
          legal_number == o.legal_number &&
          document_numbering == o.document_numbering &&
          document_number_prefix == o.document_number_prefix &&
          net_payment_term == o.net_payment_term &&
          tax_identification_number == o.tax_identification_number &&
          timezone == o.timezone &&
          billing_configuration == o.billing_configuration &&
          taxes == o.taxes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [lago_id, name, created_at, webhook_url, webhook_urls, country, default_currency, address_line1, address_line2, state, zipcode, email, city, legal_name, legal_number, document_numbering, document_number_prefix, net_payment_term, tax_identification_number, timezone, billing_configuration, taxes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LagoAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
