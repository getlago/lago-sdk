=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'date'
require 'time'

module LagoAPI
  class CreditNoteObject
    # The credit note unique identifier, created by Lago.
    attr_accessor :lago_id

    # The sequential identifier of the credit note, specifically scoped on the associated invoice. It provides a unique numerical identifier for the credit note within the context of the invoice.
    attr_accessor :sequential_id

    # The credit note unique number.
    attr_accessor :number

    # Unique identifier assigned to the invoice that the credit note belongs to
    attr_accessor :lago_invoice_id

    # The invoice unique number, related to the credit note.
    attr_accessor :invoice_number

    # The date of creation of the credit note. It follows the ISO 8601 date format and provides the specific date when the credit note was created.
    attr_accessor :issuing_date

    # The status of the credit portion of the credit note. It indicates the current state or condition of the credit amount associated with the credit note. The possible values for this field are:  - `available`: this status indicates that an amount remains available for future usage. The credit can be applied towards future transactions or invoices. - `consumed`: this status indicates that the credit amount has been fully consumed. The remaining amount is 0, indicating that the credit has been utilized in its entirety. - `voided`: this status indicates that the remaining amount of the credit cannot be used any further. The credit has been voided and is no longer available for application or redemption.
    attr_accessor :credit_status

    # The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:  - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet. - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient. - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
    attr_accessor :refund_status

    # The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
    attr_accessor :reason

    # The description of the credit note.
    attr_accessor :description

    attr_accessor :currency

    # The total amount of the credit note, expressed in cents.
    attr_accessor :total_amount_cents

    # The tax amount of the credit note, expressed in cents.
    attr_accessor :taxes_amount_cents

    # The tax rate associated with this specific credit note.
    attr_accessor :taxes_rate

    # The subtotal of the credit note excluding any applicable taxes, expressed in cents.
    attr_accessor :sub_total_excluding_taxes_amount_cents

    # The remaining credit note amount, expressed in cents.
    attr_accessor :balance_amount_cents

    # The credited amount of the credit note, expressed in cents.
    attr_accessor :credit_amount_cents

    # The refunded amount of the credit note, expressed in cents.
    attr_accessor :refund_amount_cents

    # The pro-rated amount of the coupons applied to the source invoice.
    attr_accessor :coupons_adjustment_amount_cents

    # The date when the credit note was created. It is expressed in Coordinated Universal Time (UTC).
    attr_accessor :created_at

    # The date when the credit note was last updated. It is expressed in Coordinated Universal Time (UTC).
    attr_accessor :updated_at

    # The PDF file of the credit note.
    attr_accessor :file_url

    # Array of credit noteâ€™s items.
    attr_accessor :items

    attr_accessor :applied_taxes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'lago_id' => :'lago_id',
        :'sequential_id' => :'sequential_id',
        :'number' => :'number',
        :'lago_invoice_id' => :'lago_invoice_id',
        :'invoice_number' => :'invoice_number',
        :'issuing_date' => :'issuing_date',
        :'credit_status' => :'credit_status',
        :'refund_status' => :'refund_status',
        :'reason' => :'reason',
        :'description' => :'description',
        :'currency' => :'currency',
        :'total_amount_cents' => :'total_amount_cents',
        :'taxes_amount_cents' => :'taxes_amount_cents',
        :'taxes_rate' => :'taxes_rate',
        :'sub_total_excluding_taxes_amount_cents' => :'sub_total_excluding_taxes_amount_cents',
        :'balance_amount_cents' => :'balance_amount_cents',
        :'credit_amount_cents' => :'credit_amount_cents',
        :'refund_amount_cents' => :'refund_amount_cents',
        :'coupons_adjustment_amount_cents' => :'coupons_adjustment_amount_cents',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'file_url' => :'file_url',
        :'items' => :'items',
        :'applied_taxes' => :'applied_taxes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'lago_id' => :'String',
        :'sequential_id' => :'Integer',
        :'number' => :'String',
        :'lago_invoice_id' => :'String',
        :'invoice_number' => :'String',
        :'issuing_date' => :'Date',
        :'credit_status' => :'String',
        :'refund_status' => :'String',
        :'reason' => :'String',
        :'description' => :'String',
        :'currency' => :'Currency',
        :'total_amount_cents' => :'Integer',
        :'taxes_amount_cents' => :'Integer',
        :'taxes_rate' => :'Float',
        :'sub_total_excluding_taxes_amount_cents' => :'Integer',
        :'balance_amount_cents' => :'Integer',
        :'credit_amount_cents' => :'Integer',
        :'refund_amount_cents' => :'Integer',
        :'coupons_adjustment_amount_cents' => :'Integer',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'file_url' => :'String',
        :'items' => :'Array<CreditNoteItemObject>',
        :'applied_taxes' => :'Array<CreditNoteAppliedTaxObject>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'credit_status',
        :'refund_status',
        :'description',
        :'file_url',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `LagoAPI::CreditNoteObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `LagoAPI::CreditNoteObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'lago_id')
        self.lago_id = attributes[:'lago_id']
      else
        self.lago_id = nil
      end

      if attributes.key?(:'sequential_id')
        self.sequential_id = attributes[:'sequential_id']
      else
        self.sequential_id = nil
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      else
        self.number = nil
      end

      if attributes.key?(:'lago_invoice_id')
        self.lago_invoice_id = attributes[:'lago_invoice_id']
      else
        self.lago_invoice_id = nil
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      else
        self.invoice_number = nil
      end

      if attributes.key?(:'issuing_date')
        self.issuing_date = attributes[:'issuing_date']
      else
        self.issuing_date = nil
      end

      if attributes.key?(:'credit_status')
        self.credit_status = attributes[:'credit_status']
      end

      if attributes.key?(:'refund_status')
        self.refund_status = attributes[:'refund_status']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      else
        self.reason = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      else
        self.currency = nil
      end

      if attributes.key?(:'total_amount_cents')
        self.total_amount_cents = attributes[:'total_amount_cents']
      else
        self.total_amount_cents = nil
      end

      if attributes.key?(:'taxes_amount_cents')
        self.taxes_amount_cents = attributes[:'taxes_amount_cents']
      else
        self.taxes_amount_cents = nil
      end

      if attributes.key?(:'taxes_rate')
        self.taxes_rate = attributes[:'taxes_rate']
      else
        self.taxes_rate = nil
      end

      if attributes.key?(:'sub_total_excluding_taxes_amount_cents')
        self.sub_total_excluding_taxes_amount_cents = attributes[:'sub_total_excluding_taxes_amount_cents']
      else
        self.sub_total_excluding_taxes_amount_cents = nil
      end

      if attributes.key?(:'balance_amount_cents')
        self.balance_amount_cents = attributes[:'balance_amount_cents']
      else
        self.balance_amount_cents = nil
      end

      if attributes.key?(:'credit_amount_cents')
        self.credit_amount_cents = attributes[:'credit_amount_cents']
      else
        self.credit_amount_cents = nil
      end

      if attributes.key?(:'refund_amount_cents')
        self.refund_amount_cents = attributes[:'refund_amount_cents']
      else
        self.refund_amount_cents = nil
      end

      if attributes.key?(:'coupons_adjustment_amount_cents')
        self.coupons_adjustment_amount_cents = attributes[:'coupons_adjustment_amount_cents']
      else
        self.coupons_adjustment_amount_cents = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'file_url')
        self.file_url = attributes[:'file_url']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'applied_taxes')
        if (value = attributes[:'applied_taxes']).is_a?(Array)
          self.applied_taxes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @lago_id.nil?
        invalid_properties.push('invalid value for "lago_id", lago_id cannot be nil.')
      end

      if @sequential_id.nil?
        invalid_properties.push('invalid value for "sequential_id", sequential_id cannot be nil.')
      end

      if @number.nil?
        invalid_properties.push('invalid value for "number", number cannot be nil.')
      end

      if @lago_invoice_id.nil?
        invalid_properties.push('invalid value for "lago_invoice_id", lago_invoice_id cannot be nil.')
      end

      if @invoice_number.nil?
        invalid_properties.push('invalid value for "invoice_number", invoice_number cannot be nil.')
      end

      if @issuing_date.nil?
        invalid_properties.push('invalid value for "issuing_date", issuing_date cannot be nil.')
      end

      if @reason.nil?
        invalid_properties.push('invalid value for "reason", reason cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @total_amount_cents.nil?
        invalid_properties.push('invalid value for "total_amount_cents", total_amount_cents cannot be nil.')
      end

      if @taxes_amount_cents.nil?
        invalid_properties.push('invalid value for "taxes_amount_cents", taxes_amount_cents cannot be nil.')
      end

      if @taxes_rate.nil?
        invalid_properties.push('invalid value for "taxes_rate", taxes_rate cannot be nil.')
      end

      if @sub_total_excluding_taxes_amount_cents.nil?
        invalid_properties.push('invalid value for "sub_total_excluding_taxes_amount_cents", sub_total_excluding_taxes_amount_cents cannot be nil.')
      end

      if @balance_amount_cents.nil?
        invalid_properties.push('invalid value for "balance_amount_cents", balance_amount_cents cannot be nil.')
      end

      if @credit_amount_cents.nil?
        invalid_properties.push('invalid value for "credit_amount_cents", credit_amount_cents cannot be nil.')
      end

      if @refund_amount_cents.nil?
        invalid_properties.push('invalid value for "refund_amount_cents", refund_amount_cents cannot be nil.')
      end

      if @coupons_adjustment_amount_cents.nil?
        invalid_properties.push('invalid value for "coupons_adjustment_amount_cents", coupons_adjustment_amount_cents cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @lago_id.nil?
      return false if @sequential_id.nil?
      return false if @number.nil?
      return false if @lago_invoice_id.nil?
      return false if @invoice_number.nil?
      return false if @issuing_date.nil?
      credit_status_validator = EnumAttributeValidator.new('String', ["available", "consumed", "voided"])
      return false unless credit_status_validator.valid?(@credit_status)
      refund_status_validator = EnumAttributeValidator.new('String', ["pending", "succeeded", "failed"])
      return false unless refund_status_validator.valid?(@refund_status)
      return false if @reason.nil?
      reason_validator = EnumAttributeValidator.new('String', ["duplicated_charge", "product_unsatisfactory", "order_change", "order_cancellation", "fraudulent_charge", "other"])
      return false unless reason_validator.valid?(@reason)
      return false if @currency.nil?
      return false if @total_amount_cents.nil?
      return false if @taxes_amount_cents.nil?
      return false if @taxes_rate.nil?
      return false if @sub_total_excluding_taxes_amount_cents.nil?
      return false if @balance_amount_cents.nil?
      return false if @credit_amount_cents.nil?
      return false if @refund_amount_cents.nil?
      return false if @coupons_adjustment_amount_cents.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credit_status Object to be assigned
    def credit_status=(credit_status)
      validator = EnumAttributeValidator.new('String', ["available", "consumed", "voided"])
      unless validator.valid?(credit_status)
        fail ArgumentError, "invalid value for \"credit_status\", must be one of #{validator.allowable_values}."
      end
      @credit_status = credit_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] refund_status Object to be assigned
    def refund_status=(refund_status)
      validator = EnumAttributeValidator.new('String', ["pending", "succeeded", "failed"])
      unless validator.valid?(refund_status)
        fail ArgumentError, "invalid value for \"refund_status\", must be one of #{validator.allowable_values}."
      end
      @refund_status = refund_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reason Object to be assigned
    def reason=(reason)
      validator = EnumAttributeValidator.new('String', ["duplicated_charge", "product_unsatisfactory", "order_change", "order_cancellation", "fraudulent_charge", "other"])
      unless validator.valid?(reason)
        fail ArgumentError, "invalid value for \"reason\", must be one of #{validator.allowable_values}."
      end
      @reason = reason
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          lago_id == o.lago_id &&
          sequential_id == o.sequential_id &&
          number == o.number &&
          lago_invoice_id == o.lago_invoice_id &&
          invoice_number == o.invoice_number &&
          issuing_date == o.issuing_date &&
          credit_status == o.credit_status &&
          refund_status == o.refund_status &&
          reason == o.reason &&
          description == o.description &&
          currency == o.currency &&
          total_amount_cents == o.total_amount_cents &&
          taxes_amount_cents == o.taxes_amount_cents &&
          taxes_rate == o.taxes_rate &&
          sub_total_excluding_taxes_amount_cents == o.sub_total_excluding_taxes_amount_cents &&
          balance_amount_cents == o.balance_amount_cents &&
          credit_amount_cents == o.credit_amount_cents &&
          refund_amount_cents == o.refund_amount_cents &&
          coupons_adjustment_amount_cents == o.coupons_adjustment_amount_cents &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          file_url == o.file_url &&
          items == o.items &&
          applied_taxes == o.applied_taxes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [lago_id, sequential_id, number, lago_invoice_id, invoice_number, issuing_date, credit_status, refund_status, reason, description, currency, total_amount_cents, taxes_amount_cents, taxes_rate, sub_total_excluding_taxes_amount_cents, balance_amount_cents, credit_amount_cents, refund_amount_cents, coupons_adjustment_amount_cents, created_at, updated_at, file_url, items, applied_taxes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = LagoAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
