=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module LagoAPI
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List gross revenue
    # Gross revenue is the sum of monthly `finalized` invoice payments and fees paid in advance that are not invoiceable. This total is calculated after deducting taxes and discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency Currency of revenue analytics. Format must be ISO 4217.
    # @option opts [String] :external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level.
    # @return [GrossRevenues]
    def find_all_gross_revenues(opts = {})
      data, _status_code, _headers = find_all_gross_revenues_with_http_info(opts)
      data
    end

    # List gross revenue
    # Gross revenue is the sum of monthly &#x60;finalized&#x60; invoice payments and fees paid in advance that are not invoiceable. This total is calculated after deducting taxes and discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency Currency of revenue analytics. Format must be ISO 4217.
    # @option opts [String] :external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level.
    # @return [Array<(GrossRevenues, Integer, Hash)>] GrossRevenues data, response status code and response headers
    def find_all_gross_revenues_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.find_all_gross_revenues ...'
      end
      # resource path
      local_var_path = '/analytics/gross_revenue'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'external_customer_id'] = opts[:'external_customer_id'] if !opts[:'external_customer_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GrossRevenues'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.find_all_gross_revenues",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#find_all_gross_revenues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List usage revenue
    # Reports a monthly analysis focused on the revenue generated from all usage-based fees. It exclusively accounts for revenue that has been formally invoiced. Importantly, this report does not include revenue related to the usage in the current billing period, limiting its scope to previously invoiced amounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency The currency of invoiced usage analytics. Format must be ISO 4217.
    # @return [InvoicedUsages]
    def find_all_invoiced_usages(opts = {})
      data, _status_code, _headers = find_all_invoiced_usages_with_http_info(opts)
      data
    end

    # List usage revenue
    # Reports a monthly analysis focused on the revenue generated from all usage-based fees. It exclusively accounts for revenue that has been formally invoiced. Importantly, this report does not include revenue related to the usage in the current billing period, limiting its scope to previously invoiced amounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency The currency of invoiced usage analytics. Format must be ISO 4217.
    # @return [Array<(InvoicedUsages, Integer, Hash)>] InvoicedUsages data, response status code and response headers
    def find_all_invoiced_usages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.find_all_invoiced_usages ...'
      end
      # resource path
      local_var_path = '/analytics/invoiced_usage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InvoicedUsages'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.find_all_invoiced_usages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#find_all_invoiced_usages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List MRR
    # This endpoint is used to list MRR.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and prior to the deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next three months) as well as to fees paid in arrears (allocated to the preceding three months). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next twelve months) and for fees paid in arrears (spread over the previous twelve months). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month.
    # @option opts [Integer] :months Show data only for given number of months.
    # @return [Mrrs]
    def find_all_mrrs(opts = {})
      data, _status_code, _headers = find_all_mrrs_with_http_info(opts)
      data
    end

    # List MRR
    # This endpoint is used to list MRR.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and prior to the deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next three months) as well as to fees paid in arrears (allocated to the preceding three months). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next twelve months) and for fees paid in arrears (spread over the previous twelve months). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month.
    # @option opts [Integer] :months Show data only for given number of months.
    # @return [Array<(Mrrs, Integer, Hash)>] Mrrs data, response status code and response headers
    def find_all_mrrs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.find_all_mrrs ...'
      end
      # resource path
      local_var_path = '/analytics/mrr'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'months'] = opts[:'months'] if !opts[:'months'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Mrrs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.find_all_mrrs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#find_all_mrrs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List outstanding invoices
    # Represents a monthly aggregation, detailing both the total count and the cumulative amount of invoices that have been marked as `finalized`. This report sorts invoices categorically based on their `payment_status`.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency The currency of revenue analytics. Format must be ISO 4217.
    # @return [OutstandingInvoices]
    def find_all_outstanding_invoices(opts = {})
      data, _status_code, _headers = find_all_outstanding_invoices_with_http_info(opts)
      data
    end

    # List outstanding invoices
    # Represents a monthly aggregation, detailing both the total count and the cumulative amount of invoices that have been marked as &#x60;finalized&#x60;. This report sorts invoices categorically based on their &#x60;payment_status&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [Currency] :currency The currency of revenue analytics. Format must be ISO 4217.
    # @return [Array<(OutstandingInvoices, Integer, Hash)>] OutstandingInvoices data, response status code and response headers
    def find_all_outstanding_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.find_all_outstanding_invoices ...'
      end
      # resource path
      local_var_path = '/analytics/outstanding_invoices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutstandingInvoices'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.find_all_outstanding_invoices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#find_all_outstanding_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
