=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module LagoAPI
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Batch multiple events
    # This endpoint is used for transmitting a batch of usage measurement events to multiple subscriptions for a single customer.
    # @param event_batch_input [EventBatchInput] Batch events payload
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_batch_events(event_batch_input, opts = {})
      create_batch_events_with_http_info(event_batch_input, opts)
      nil
    end

    # Batch multiple events
    # This endpoint is used for transmitting a batch of usage measurement events to multiple subscriptions for a single customer.
    # @param event_batch_input [EventBatchInput] Batch events payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_batch_events_with_http_info(event_batch_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.create_batch_events ...'
      end
      # verify the required parameter 'event_batch_input' is set
      if @api_client.config.client_side_validation && event_batch_input.nil?
        fail ArgumentError, "Missing the required parameter 'event_batch_input' when calling EventsApi.create_batch_events"
      end
      # resource path
      local_var_path = '/events/batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(event_batch_input)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.create_batch_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#create_batch_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send usage events
    # This endpoint is used for transmitting usage measurement events to either a designated customer or a specific subscription.
    # @param event_input [EventInput] Event payload
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def create_event(event_input, opts = {})
      data, _status_code, _headers = create_event_with_http_info(event_input, opts)
      data
    end

    # Send usage events
    # This endpoint is used for transmitting usage measurement events to either a designated customer or a specific subscription.
    # @param event_input [EventInput] Event payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def create_event_with_http_info(event_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.create_event ...'
      end
      # verify the required parameter 'event_input' is set
      if @api_client.config.client_side_validation && event_input.nil?
        fail ArgumentError, "Missing the required parameter 'event_input' when calling EventsApi.create_event"
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(event_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.create_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#create_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Estimate fees for a pay in advance charge
    # Estimate the fees that would be created after reception of an event for a billable metric attached to one or multiple pay in advance charges
    # @param event_estimate_fees_input [EventEstimateFeesInput] Event estimate payload
    # @param [Hash] opts the optional parameters
    # @return [Fees]
    def event_estimate_fees(event_estimate_fees_input, opts = {})
      data, _status_code, _headers = event_estimate_fees_with_http_info(event_estimate_fees_input, opts)
      data
    end

    # Estimate fees for a pay in advance charge
    # Estimate the fees that would be created after reception of an event for a billable metric attached to one or multiple pay in advance charges
    # @param event_estimate_fees_input [EventEstimateFeesInput] Event estimate payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fees, Integer, Hash)>] Fees data, response status code and response headers
    def event_estimate_fees_with_http_info(event_estimate_fees_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.event_estimate_fees ...'
      end
      # verify the required parameter 'event_estimate_fees_input' is set
      if @api_client.config.client_side_validation && event_estimate_fees_input.nil?
        fail ArgumentError, "Missing the required parameter 'event_estimate_fees_input' when calling EventsApi.event_estimate_fees"
      end
      # resource path
      local_var_path = '/events/estimate_fees'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(event_estimate_fees_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Fees'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.event_estimate_fees",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#event_estimate_fees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific event
    # This endpoint is used for retrieving a specific usage measurement event that has been sent to a customer or a subscription.
    # @param transaction_id [String] This field represents the unique identifier sent for this specific event.
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def find_event(transaction_id, opts = {})
      data, _status_code, _headers = find_event_with_http_info(transaction_id, opts)
      data
    end

    # Retrieve a specific event
    # This endpoint is used for retrieving a specific usage measurement event that has been sent to a customer or a subscription.
    # @param transaction_id [String] This field represents the unique identifier sent for this specific event.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def find_event_with_http_info(transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.find_event ...'
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling EventsApi.find_event"
      end
      # resource path
      local_var_path = '/events/{transaction_id}'.sub('{' + 'transaction_id' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.find_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#find_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
