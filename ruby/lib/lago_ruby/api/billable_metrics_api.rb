=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module LagoAPI
  class BillableMetricsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a billable metric
    # This endpoint creates a new billable metric representing a pricing component of your application.
    # @param billable_metric_create_input [BillableMetricCreateInput] Billable metric payload
    # @param [Hash] opts the optional parameters
    # @return [BillableMetric]
    def create_billable_metric(billable_metric_create_input, opts = {})
      data, _status_code, _headers = create_billable_metric_with_http_info(billable_metric_create_input, opts)
      data
    end

    # Create a billable metric
    # This endpoint creates a new billable metric representing a pricing component of your application.
    # @param billable_metric_create_input [BillableMetricCreateInput] Billable metric payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillableMetric, Integer, Hash)>] BillableMetric data, response status code and response headers
    def create_billable_metric_with_http_info(billable_metric_create_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillableMetricsApi.create_billable_metric ...'
      end
      # verify the required parameter 'billable_metric_create_input' is set
      if @api_client.config.client_side_validation && billable_metric_create_input.nil?
        fail ArgumentError, "Missing the required parameter 'billable_metric_create_input' when calling BillableMetricsApi.create_billable_metric"
      end
      # resource path
      local_var_path = '/billable_metrics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billable_metric_create_input)

      # return_type
      return_type = opts[:debug_return_type] || 'BillableMetric'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BillableMetricsApi.create_billable_metric",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillableMetricsApi#create_billable_metric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a billable metric
    # This endpoint deletes an existing billable metric representing a pricing component of your application.
    # @param code [String] Code of the existing billable metric.
    # @param [Hash] opts the optional parameters
    # @return [BillableMetric]
    def destroy_billable_metric(code, opts = {})
      data, _status_code, _headers = destroy_billable_metric_with_http_info(code, opts)
      data
    end

    # Delete a billable metric
    # This endpoint deletes an existing billable metric representing a pricing component of your application.
    # @param code [String] Code of the existing billable metric.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillableMetric, Integer, Hash)>] BillableMetric data, response status code and response headers
    def destroy_billable_metric_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillableMetricsApi.destroy_billable_metric ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling BillableMetricsApi.destroy_billable_metric"
      end
      # resource path
      local_var_path = '/billable_metrics/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillableMetric'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BillableMetricsApi.destroy_billable_metric",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillableMetricsApi#destroy_billable_metric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a billable metric's groups
    # This endpoint retrieves all groups for a billable metric.
    # @param code [String] Code of the existing billable metric.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [GroupsPaginated]
    def find_all_billable_metric_groups(code, opts = {})
      data, _status_code, _headers = find_all_billable_metric_groups_with_http_info(code, opts)
      data
    end

    # Find a billable metric&#39;s groups
    # This endpoint retrieves all groups for a billable metric.
    # @param code [String] Code of the existing billable metric.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [Array<(GroupsPaginated, Integer, Hash)>] GroupsPaginated data, response status code and response headers
    def find_all_billable_metric_groups_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillableMetricsApi.find_all_billable_metric_groups ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling BillableMetricsApi.find_all_billable_metric_groups"
      end
      # resource path
      local_var_path = '/billable_metrics/{code}/groups'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupsPaginated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BillableMetricsApi.find_all_billable_metric_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillableMetricsApi#find_all_billable_metric_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all billable metrics
    # This endpoint retrieves all existing billable metrics that represent pricing components of your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [BillableMetricsPaginated]
    def find_all_billable_metrics(opts = {})
      data, _status_code, _headers = find_all_billable_metrics_with_http_info(opts)
      data
    end

    # List all billable metrics
    # This endpoint retrieves all existing billable metrics that represent pricing components of your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [Array<(BillableMetricsPaginated, Integer, Hash)>] BillableMetricsPaginated data, response status code and response headers
    def find_all_billable_metrics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillableMetricsApi.find_all_billable_metrics ...'
      end
      # resource path
      local_var_path = '/billable_metrics'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillableMetricsPaginated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BillableMetricsApi.find_all_billable_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillableMetricsApi#find_all_billable_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a billable metric
    # This endpoint retrieves an existing billable metric that represents a pricing component of your application. The billable metric is identified by its unique code.
    # @param code [String] Code of the existing billable metric.
    # @param [Hash] opts the optional parameters
    # @return [BillableMetric]
    def find_billable_metric(code, opts = {})
      data, _status_code, _headers = find_billable_metric_with_http_info(code, opts)
      data
    end

    # Retrieve a billable metric
    # This endpoint retrieves an existing billable metric that represents a pricing component of your application. The billable metric is identified by its unique code.
    # @param code [String] Code of the existing billable metric.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillableMetric, Integer, Hash)>] BillableMetric data, response status code and response headers
    def find_billable_metric_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillableMetricsApi.find_billable_metric ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling BillableMetricsApi.find_billable_metric"
      end
      # resource path
      local_var_path = '/billable_metrics/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillableMetric'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BillableMetricsApi.find_billable_metric",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillableMetricsApi#find_billable_metric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a billable metric
    # This endpoint updates an existing billable metric representing a pricing component of your application.
    # @param code [String] Code of the existing billable metric.
    # @param billable_metric_update_input [BillableMetricUpdateInput] Billable metric payload
    # @param [Hash] opts the optional parameters
    # @return [BillableMetric]
    def update_billable_metric(code, billable_metric_update_input, opts = {})
      data, _status_code, _headers = update_billable_metric_with_http_info(code, billable_metric_update_input, opts)
      data
    end

    # Update a billable metric
    # This endpoint updates an existing billable metric representing a pricing component of your application.
    # @param code [String] Code of the existing billable metric.
    # @param billable_metric_update_input [BillableMetricUpdateInput] Billable metric payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillableMetric, Integer, Hash)>] BillableMetric data, response status code and response headers
    def update_billable_metric_with_http_info(code, billable_metric_update_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillableMetricsApi.update_billable_metric ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling BillableMetricsApi.update_billable_metric"
      end
      # verify the required parameter 'billable_metric_update_input' is set
      if @api_client.config.client_side_validation && billable_metric_update_input.nil?
        fail ArgumentError, "Missing the required parameter 'billable_metric_update_input' when calling BillableMetricsApi.update_billable_metric"
      end
      # resource path
      local_var_path = '/billable_metrics/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billable_metric_update_input)

      # return_type
      return_type = opts[:debug_return_type] || 'BillableMetric'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"BillableMetricsApi.update_billable_metric",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillableMetricsApi#update_billable_metric\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
