=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module LagoAPI
  class TaxesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a tax
    # This endpoint creates a new tax representing a customizable tax rate applicable to either the organization or a specific customer.
    # @param tax_create_input [TaxCreateInput] Tax creation payload
    # @param [Hash] opts the optional parameters
    # @return [Tax]
    def create_tax(tax_create_input, opts = {})
      data, _status_code, _headers = create_tax_with_http_info(tax_create_input, opts)
      data
    end

    # Create a tax
    # This endpoint creates a new tax representing a customizable tax rate applicable to either the organization or a specific customer.
    # @param tax_create_input [TaxCreateInput] Tax creation payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tax, Integer, Hash)>] Tax data, response status code and response headers
    def create_tax_with_http_info(tax_create_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxesApi.create_tax ...'
      end
      # verify the required parameter 'tax_create_input' is set
      if @api_client.config.client_side_validation && tax_create_input.nil?
        fail ArgumentError, "Missing the required parameter 'tax_create_input' when calling TaxesApi.create_tax"
      end
      # resource path
      local_var_path = '/taxes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tax_create_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Tax'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxesApi.create_tax",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxesApi#create_tax\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a tax
    # This endpoint is used to delete a tax.
    # @param code [String] The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
    # @param [Hash] opts the optional parameters
    # @return [Tax]
    def destroy_tax(code, opts = {})
      data, _status_code, _headers = destroy_tax_with_http_info(code, opts)
      data
    end

    # Delete a tax
    # This endpoint is used to delete a tax.
    # @param code [String] The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tax, Integer, Hash)>] Tax data, response status code and response headers
    def destroy_tax_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxesApi.destroy_tax ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling TaxesApi.destroy_tax"
      end
      # resource path
      local_var_path = '/taxes/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Tax'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxesApi.destroy_tax",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxesApi#destroy_tax\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all taxes
    # This endpoint retrieves all existing taxes representing a customizable tax rate applicable to either the organization or a specific customer.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [TaxesPaginated]
    def find_all_taxes(opts = {})
      data, _status_code, _headers = find_all_taxes_with_http_info(opts)
      data
    end

    # List all taxes
    # This endpoint retrieves all existing taxes representing a customizable tax rate applicable to either the organization or a specific customer.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [Array<(TaxesPaginated, Integer, Hash)>] TaxesPaginated data, response status code and response headers
    def find_all_taxes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxesApi.find_all_taxes ...'
      end
      # resource path
      local_var_path = '/taxes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TaxesPaginated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxesApi.find_all_taxes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxesApi#find_all_taxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Tax
    # This endpoint retrieves an existing tax representing a customizable tax rate applicable to either the organization or a specific customer. The tax is identified by its unique code.
    # @param code [String] The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
    # @param [Hash] opts the optional parameters
    # @return [Tax]
    def find_tax(code, opts = {})
      data, _status_code, _headers = find_tax_with_http_info(code, opts)
      data
    end

    # Retrieve a Tax
    # This endpoint retrieves an existing tax representing a customizable tax rate applicable to either the organization or a specific customer. The tax is identified by its unique code.
    # @param code [String] The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tax, Integer, Hash)>] Tax data, response status code and response headers
    def find_tax_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxesApi.find_tax ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling TaxesApi.find_tax"
      end
      # resource path
      local_var_path = '/taxes/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Tax'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxesApi.find_tax",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxesApi#find_tax\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a tax
    # This endpoint updates an existing tax representing a customizable tax rate applicable to either the organization or a specific customer.
    # @param code [String] The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
    # @param tax_update_input [TaxUpdateInput] Tax update payload
    # @param [Hash] opts the optional parameters
    # @return [Tax]
    def update_tax(code, tax_update_input, opts = {})
      data, _status_code, _headers = update_tax_with_http_info(code, tax_update_input, opts)
      data
    end

    # Update a tax
    # This endpoint updates an existing tax representing a customizable tax rate applicable to either the organization or a specific customer.
    # @param code [String] The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
    # @param tax_update_input [TaxUpdateInput] Tax update payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tax, Integer, Hash)>] Tax data, response status code and response headers
    def update_tax_with_http_info(code, tax_update_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxesApi.update_tax ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling TaxesApi.update_tax"
      end
      # verify the required parameter 'tax_update_input' is set
      if @api_client.config.client_side_validation && tax_update_input.nil?
        fail ArgumentError, "Missing the required parameter 'tax_update_input' when calling TaxesApi.update_tax"
      end
      # resource path
      local_var_path = '/taxes/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tax_update_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Tax'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TaxesApi.update_tax",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxesApi#update_tax\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
