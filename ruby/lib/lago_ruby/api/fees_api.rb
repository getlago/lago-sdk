=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module LagoAPI
  class FeesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all fees
    # This endpoint is used for retrieving all fees that has been issued.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @option opts [String] :external_customer_id Unique identifier assigned to the customer in your application.
    # @option opts [String] :external_subscription_id External subscription ID
    # @option opts [Currency] :currency Filter results by fee’s currency.
    # @option opts [String] :fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;.
    # @option opts [String] :billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types.
    # @option opts [String] :payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;.
    # @option opts [Time] :created_at_from Filter results created after creation date and time in UTC.
    # @option opts [Time] :created_at_to Filter results created before creation date and time in UTC.
    # @option opts [Time] :succeeded_at_from Filter results with payment success after creation date and time in UTC.
    # @option opts [Time] :succeeded_at_to Filter results with payment success after creation date and time in UTC.
    # @option opts [Time] :failed_at_from Filter results with payment failure after creation date and time in UTC.
    # @option opts [Time] :failed_at_to Filter results with payment failure after creation date and time in UTC.
    # @option opts [Time] :refunded_at_from Filter results with payment refund after creation date and time in UTC.
    # @option opts [Time] :refunded_at_to Filter results with payment refund after creation date and time in UTC.
    # @return [FeesPaginated]
    def find_all_fees(opts = {})
      data, _status_code, _headers = find_all_fees_with_http_info(opts)
      data
    end

    # List all fees
    # This endpoint is used for retrieving all fees that has been issued.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @option opts [String] :external_customer_id Unique identifier assigned to the customer in your application.
    # @option opts [String] :external_subscription_id External subscription ID
    # @option opts [Currency] :currency Filter results by fee’s currency.
    # @option opts [String] :fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;.
    # @option opts [String] :billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types.
    # @option opts [String] :payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;.
    # @option opts [Time] :created_at_from Filter results created after creation date and time in UTC.
    # @option opts [Time] :created_at_to Filter results created before creation date and time in UTC.
    # @option opts [Time] :succeeded_at_from Filter results with payment success after creation date and time in UTC.
    # @option opts [Time] :succeeded_at_to Filter results with payment success after creation date and time in UTC.
    # @option opts [Time] :failed_at_from Filter results with payment failure after creation date and time in UTC.
    # @option opts [Time] :failed_at_to Filter results with payment failure after creation date and time in UTC.
    # @option opts [Time] :refunded_at_from Filter results with payment refund after creation date and time in UTC.
    # @option opts [Time] :refunded_at_to Filter results with payment refund after creation date and time in UTC.
    # @return [Array<(FeesPaginated, Integer, Hash)>] FeesPaginated data, response status code and response headers
    def find_all_fees_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesApi.find_all_fees ...'
      end
      allowable_values = ["charge", "add_on", "subscription", "credit", "instant_charge"]
      if @api_client.config.client_side_validation && opts[:'fee_type'] && !allowable_values.include?(opts[:'fee_type'])
        fail ArgumentError, "invalid value for \"fee_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["pending", "succeeded", "failed", "refunded"]
      if @api_client.config.client_side_validation && opts[:'payment_status'] && !allowable_values.include?(opts[:'payment_status'])
        fail ArgumentError, "invalid value for \"payment_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/fees'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'external_customer_id'] = opts[:'external_customer_id'] if !opts[:'external_customer_id'].nil?
      query_params[:'external_subscription_id'] = opts[:'external_subscription_id'] if !opts[:'external_subscription_id'].nil?
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?
      query_params[:'fee_type'] = opts[:'fee_type'] if !opts[:'fee_type'].nil?
      query_params[:'billable_metric_code'] = opts[:'billable_metric_code'] if !opts[:'billable_metric_code'].nil?
      query_params[:'payment_status'] = opts[:'payment_status'] if !opts[:'payment_status'].nil?
      query_params[:'created_at_from'] = opts[:'created_at_from'] if !opts[:'created_at_from'].nil?
      query_params[:'created_at_to'] = opts[:'created_at_to'] if !opts[:'created_at_to'].nil?
      query_params[:'succeeded_at_from'] = opts[:'succeeded_at_from'] if !opts[:'succeeded_at_from'].nil?
      query_params[:'succeeded_at_to'] = opts[:'succeeded_at_to'] if !opts[:'succeeded_at_to'].nil?
      query_params[:'failed_at_from'] = opts[:'failed_at_from'] if !opts[:'failed_at_from'].nil?
      query_params[:'failed_at_to'] = opts[:'failed_at_to'] if !opts[:'failed_at_to'].nil?
      query_params[:'refunded_at_from'] = opts[:'refunded_at_from'] if !opts[:'refunded_at_from'].nil?
      query_params[:'refunded_at_to'] = opts[:'refunded_at_to'] if !opts[:'refunded_at_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FeesPaginated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesApi.find_all_fees",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesApi#find_all_fees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a specific fee
    # This endpoint is used for retrieving a specific fee that has been issued.
    # @param lago_id [String] Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.
    # @param [Hash] opts the optional parameters
    # @return [Fee]
    def find_fee(lago_id, opts = {})
      data, _status_code, _headers = find_fee_with_http_info(lago_id, opts)
      data
    end

    # Retrieve a specific fee
    # This endpoint is used for retrieving a specific fee that has been issued.
    # @param lago_id [String] Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Fee, Integer, Hash)>] Fee data, response status code and response headers
    def find_fee_with_http_info(lago_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesApi.find_fee ...'
      end
      # verify the required parameter 'lago_id' is set
      if @api_client.config.client_side_validation && lago_id.nil?
        fail ArgumentError, "Missing the required parameter 'lago_id' when calling FeesApi.find_fee"
      end
      # resource path
      local_var_path = '/fees/{lago_id}'.sub('{' + 'lago_id' + '}', CGI.escape(lago_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Fee'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesApi.find_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesApi#find_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a fee
    # This endpoint is used for updating a specific fee that has been issued.
    # @param lago_id [String] Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.
    # @param [Hash] opts the optional parameters
    # @option opts [FeeUpdateInput] :fee_update_input Fee payload
    # @return [Fee]
    def update_fee(lago_id, opts = {})
      data, _status_code, _headers = update_fee_with_http_info(lago_id, opts)
      data
    end

    # Update a fee
    # This endpoint is used for updating a specific fee that has been issued.
    # @param lago_id [String] Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee’s record within the Lago system.
    # @param [Hash] opts the optional parameters
    # @option opts [FeeUpdateInput] :fee_update_input Fee payload
    # @return [Array<(Fee, Integer, Hash)>] Fee data, response status code and response headers
    def update_fee_with_http_info(lago_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeesApi.update_fee ...'
      end
      # verify the required parameter 'lago_id' is set
      if @api_client.config.client_side_validation && lago_id.nil?
        fail ArgumentError, "Missing the required parameter 'lago_id' when calling FeesApi.update_fee"
      end
      # resource path
      local_var_path = '/fees/{lago_id}'.sub('{' + 'lago_id' + '}', CGI.escape(lago_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'fee_update_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'Fee'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"FeesApi.update_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeesApi#update_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
