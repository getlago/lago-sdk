=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.51.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.2.0-SNAPSHOT

=end

require 'cgi'

module LagoAPI
  class CouponsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply a coupon to a customer
    # This endpoint is used to apply a specific coupon to a customer, before or during a subscription.
    # @param applied_coupon_input [AppliedCouponInput] Apply coupon payload
    # @param [Hash] opts the optional parameters
    # @return [AppliedCoupon]
    def apply_coupon(applied_coupon_input, opts = {})
      data, _status_code, _headers = apply_coupon_with_http_info(applied_coupon_input, opts)
      data
    end

    # Apply a coupon to a customer
    # This endpoint is used to apply a specific coupon to a customer, before or during a subscription.
    # @param applied_coupon_input [AppliedCouponInput] Apply coupon payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppliedCoupon, Integer, Hash)>] AppliedCoupon data, response status code and response headers
    def apply_coupon_with_http_info(applied_coupon_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.apply_coupon ...'
      end
      # verify the required parameter 'applied_coupon_input' is set
      if @api_client.config.client_side_validation && applied_coupon_input.nil?
        fail ArgumentError, "Missing the required parameter 'applied_coupon_input' when calling CouponsApi.apply_coupon"
      end
      # resource path
      local_var_path = '/applied_coupons'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(applied_coupon_input)

      # return_type
      return_type = opts[:debug_return_type] || 'AppliedCoupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.apply_coupon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#apply_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a coupon
    # This endpoint is used to create a coupon that can be then attached to a customer to create a discount.
    # @param coupon_create_input [CouponCreateInput] Coupon payload
    # @param [Hash] opts the optional parameters
    # @return [Coupon]
    def create_coupon(coupon_create_input, opts = {})
      data, _status_code, _headers = create_coupon_with_http_info(coupon_create_input, opts)
      data
    end

    # Create a coupon
    # This endpoint is used to create a coupon that can be then attached to a customer to create a discount.
    # @param coupon_create_input [CouponCreateInput] Coupon payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def create_coupon_with_http_info(coupon_create_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.create_coupon ...'
      end
      # verify the required parameter 'coupon_create_input' is set
      if @api_client.config.client_side_validation && coupon_create_input.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_create_input' when calling CouponsApi.create_coupon"
      end
      # resource path
      local_var_path = '/coupons'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(coupon_create_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Coupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.create_coupon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#create_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an applied coupon
    # This endpoint is used to delete a specific coupon that has been applied to a customer.
    # @param external_customer_id [String] The customer external unique identifier (provided by your own application)
    # @param applied_coupon_id [String] Unique identifier of the applied coupon, created by Lago.
    # @param [Hash] opts the optional parameters
    # @return [AppliedCoupon]
    def delete_applied_coupon(external_customer_id, applied_coupon_id, opts = {})
      data, _status_code, _headers = delete_applied_coupon_with_http_info(external_customer_id, applied_coupon_id, opts)
      data
    end

    # Delete an applied coupon
    # This endpoint is used to delete a specific coupon that has been applied to a customer.
    # @param external_customer_id [String] The customer external unique identifier (provided by your own application)
    # @param applied_coupon_id [String] Unique identifier of the applied coupon, created by Lago.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppliedCoupon, Integer, Hash)>] AppliedCoupon data, response status code and response headers
    def delete_applied_coupon_with_http_info(external_customer_id, applied_coupon_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.delete_applied_coupon ...'
      end
      # verify the required parameter 'external_customer_id' is set
      if @api_client.config.client_side_validation && external_customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_customer_id' when calling CouponsApi.delete_applied_coupon"
      end
      # verify the required parameter 'applied_coupon_id' is set
      if @api_client.config.client_side_validation && applied_coupon_id.nil?
        fail ArgumentError, "Missing the required parameter 'applied_coupon_id' when calling CouponsApi.delete_applied_coupon"
      end
      # resource path
      local_var_path = '/customers/{external_customer_id}/applied_coupons/{applied_coupon_id}'.sub('{' + 'external_customer_id' + '}', CGI.escape(external_customer_id.to_s)).sub('{' + 'applied_coupon_id' + '}', CGI.escape(applied_coupon_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppliedCoupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.delete_applied_coupon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#delete_applied_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a coupon
    # This endpoint is used to delete a coupon.
    # @param code [String] Unique code used to identify the coupon.
    # @param [Hash] opts the optional parameters
    # @return [Coupon]
    def destroy_coupon(code, opts = {})
      data, _status_code, _headers = destroy_coupon_with_http_info(code, opts)
      data
    end

    # Delete a coupon
    # This endpoint is used to delete a coupon.
    # @param code [String] Unique code used to identify the coupon.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def destroy_coupon_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.destroy_coupon ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling CouponsApi.destroy_coupon"
      end
      # resource path
      local_var_path = '/coupons/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Coupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.destroy_coupon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#destroy_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all applied coupons
    # This endpoint is used to list all applied coupons. You can filter by coupon status and by customer.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @option opts [String] :status The status of the coupon. Can be either &#x60;active&#x60; or &#x60;terminated&#x60;.
    # @option opts [String] :external_customer_id The customer external unique identifier (provided by your own application)
    # @return [AppliedCouponsPaginated]
    def find_all_applied_coupons(opts = {})
      data, _status_code, _headers = find_all_applied_coupons_with_http_info(opts)
      data
    end

    # List all applied coupons
    # This endpoint is used to list all applied coupons. You can filter by coupon status and by customer.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @option opts [String] :status The status of the coupon. Can be either &#x60;active&#x60; or &#x60;terminated&#x60;.
    # @option opts [String] :external_customer_id The customer external unique identifier (provided by your own application)
    # @return [Array<(AppliedCouponsPaginated, Integer, Hash)>] AppliedCouponsPaginated data, response status code and response headers
    def find_all_applied_coupons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.find_all_applied_coupons ...'
      end
      allowable_values = ["active", "terminated"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/applied_coupons'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'external_customer_id'] = opts[:'external_customer_id'] if !opts[:'external_customer_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppliedCouponsPaginated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.find_all_applied_coupons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#find_all_applied_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all coupons
    # This endpoint is used to list all existing coupons.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [CouponsPaginated]
    def find_all_coupons(opts = {})
      data, _status_code, _headers = find_all_coupons_with_http_info(opts)
      data
    end

    # List all coupons
    # This endpoint is used to list all existing coupons.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number.
    # @option opts [Integer] :per_page Number of records per page.
    # @return [Array<(CouponsPaginated, Integer, Hash)>] CouponsPaginated data, response status code and response headers
    def find_all_coupons_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.find_all_coupons ...'
      end
      # resource path
      local_var_path = '/coupons'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CouponsPaginated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.find_all_coupons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#find_all_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a coupon
    # This endpoint is used to retrieve a specific coupon.
    # @param code [String] Unique code used to identify the coupon.
    # @param [Hash] opts the optional parameters
    # @return [Coupon]
    def find_coupon(code, opts = {})
      data, _status_code, _headers = find_coupon_with_http_info(code, opts)
      data
    end

    # Retrieve a coupon
    # This endpoint is used to retrieve a specific coupon.
    # @param code [String] Unique code used to identify the coupon.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def find_coupon_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.find_coupon ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling CouponsApi.find_coupon"
      end
      # resource path
      local_var_path = '/coupons/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Coupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.find_coupon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#find_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a coupon
    # This endpoint is used to update a coupon that can be then attached to a customer to create a discount.
    # @param code [String] Unique code used to identify the coupon.
    # @param coupon_update_input [CouponUpdateInput] Coupon payload
    # @param [Hash] opts the optional parameters
    # @return [Coupon]
    def update_coupon(code, coupon_update_input, opts = {})
      data, _status_code, _headers = update_coupon_with_http_info(code, coupon_update_input, opts)
      data
    end

    # Update a coupon
    # This endpoint is used to update a coupon that can be then attached to a customer to create a discount.
    # @param code [String] Unique code used to identify the coupon.
    # @param coupon_update_input [CouponUpdateInput] Coupon payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def update_coupon_with_http_info(code, coupon_update_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CouponsApi.update_coupon ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling CouponsApi.update_coupon"
      end
      # verify the required parameter 'coupon_update_input' is set
      if @api_client.config.client_side_validation && coupon_update_input.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_update_input' when calling CouponsApi.update_coupon"
      end
      # resource path
      local_var_path = '/coupons/{code}'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(coupon_update_input)

      # return_type
      return_type = opts[:debug_return_type] || 'Coupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CouponsApi.update_coupon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CouponsApi#update_coupon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
