=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.45.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for LagoAPI::AddOnsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AddOnsApi' do
  before do
    # run before each test
    @api_instance = LagoAPI::AddOnsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AddOnsApi' do
    it 'should create an instance of AddOnsApi' do
      expect(@api_instance).to be_instance_of(LagoAPI::AddOnsApi)
    end
  end

  # unit tests for apply_add_on
  # Apply an add-on to a customer
  # Apply an add-on to a customer
  # @param applied_add_on_input Apply add-on payload
  # @param [Hash] opts the optional parameters
  # @return [AppliedAddOn]
  describe 'apply_add_on test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_add_on
  # Create an add-on
  # This endpoint is used to create an add-on that can be then attached to a one-off invoice.
  # @param add_on_create_input Add-on payload
  # @param [Hash] opts the optional parameters
  # @return [AddOn]
  describe 'create_add_on test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for destroy_add_on
  # Delete an add-on
  # This endpoint is used to delete an existing add-on.
  # @param code Unique code used to identify the add-on.
  # @param [Hash] opts the optional parameters
  # @return [AddOn]
  describe 'destroy_add_on test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_add_on
  # Retrieve an add-on
  # This endpoint is used to retrieve a specific add-on.
  # @param code Unique code used to identify the add-on.
  # @param [Hash] opts the optional parameters
  # @return [AddOn]
  describe 'find_add_on test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_all_add_ons
  # List all add-ons
  # This endpoint is used to list all existing add-ons.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number.
  # @option opts [Integer] :per_page Number of records per page.
  # @return [AddOnsPaginated]
  describe 'find_all_add_ons test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_add_on
  # Update an add-on
  # This endpoint is used to update an existing add-on.
  # @param code Unique code used to identify the add-on.
  # @param add_on_update_input Add-on payload
  # @param [Hash] opts the optional parameters
  # @return [AddOn]
  describe 'update_add_on test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
