=begin
#Lago API documentation

#Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

The version of the OpenAPI document: 0.45.0-beta
Contact: tech@getlago.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for LagoAPI::TaxesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TaxesApi' do
  before do
    # run before each test
    @api_instance = LagoAPI::TaxesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TaxesApi' do
    it 'should create an instance of TaxesApi' do
      expect(@api_instance).to be_instance_of(LagoAPI::TaxesApi)
    end
  end

  # unit tests for create_tax
  # Create a tax
  # This endpoint creates a new tax representing a customizable tax rate applicable to either the organization or a specific customer.
  # @param tax_create_input Tax creation payload
  # @param [Hash] opts the optional parameters
  # @return [Tax]
  describe 'create_tax test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for destroy_tax
  # Delete a tax
  # This endpoint is used to delete a tax.
  # @param code The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
  # @param [Hash] opts the optional parameters
  # @return [Tax]
  describe 'destroy_tax test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_all_taxes
  # List all taxes
  # This endpoint retrieves all existing taxes representing a customizable tax rate applicable to either the organization or a specific customer.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number.
  # @option opts [Integer] :per_page Number of records per page.
  # @return [TaxesPaginated]
  describe 'find_all_taxes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for find_tax
  # Retrieve a Tax
  # This endpoint retrieves an existing tax representing a customizable tax rate applicable to either the organization or a specific customer. The tax is identified by its unique code.
  # @param code The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
  # @param [Hash] opts the optional parameters
  # @return [Tax]
  describe 'find_tax test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for update_tax
  # Update a tax
  # This endpoint updates an existing tax representing a customizable tax rate applicable to either the organization or a specific customer.
  # @param code The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.
  # @param tax_update_input Tax update payload
  # @param [Hash] opts the optional parameters
  # @return [Tax]
  describe 'update_tax test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
