/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerUsage{}

// CustomerUsage struct for CustomerUsage
type CustomerUsage struct {
	CustomerUsage CustomerUsageObject `json:"customer_usage"`
}

type _CustomerUsage CustomerUsage

// NewCustomerUsage instantiates a new CustomerUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerUsage(customerUsage CustomerUsageObject) *CustomerUsage {
	this := CustomerUsage{}
	this.CustomerUsage = customerUsage
	return &this
}

// NewCustomerUsageWithDefaults instantiates a new CustomerUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerUsageWithDefaults() *CustomerUsage {
	this := CustomerUsage{}
	return &this
}

// GetCustomerUsage returns the CustomerUsage field value
func (o *CustomerUsage) GetCustomerUsage() CustomerUsageObject {
	if o == nil {
		var ret CustomerUsageObject
		return ret
	}

	return o.CustomerUsage
}

// GetCustomerUsageOk returns a tuple with the CustomerUsage field value
// and a boolean to check if the value has been set.
func (o *CustomerUsage) GetCustomerUsageOk() (*CustomerUsageObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerUsage, true
}

// SetCustomerUsage sets field value
func (o *CustomerUsage) SetCustomerUsage(v CustomerUsageObject) {
	o.CustomerUsage = v
}

func (o CustomerUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer_usage"] = o.CustomerUsage
	return toSerialize, nil
}

func (o *CustomerUsage) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerUsage := _CustomerUsage{}

	err = json.Unmarshal(bytes, &varCustomerUsage)

	if err != nil {
		return err
	}

	*o = CustomerUsage(varCustomerUsage)

	return err
}

type NullableCustomerUsage struct {
	value *CustomerUsage
	isSet bool
}

func (v NullableCustomerUsage) Get() *CustomerUsage {
	return v.value
}

func (v *NullableCustomerUsage) Set(val *CustomerUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerUsage(val *CustomerUsage) *NullableCustomerUsage {
	return &NullableCustomerUsage{value: val, isSet: true}
}

func (v NullableCustomerUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


