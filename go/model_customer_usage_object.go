/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CustomerUsageObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerUsageObject{}

// CustomerUsageObject struct for CustomerUsageObject
type CustomerUsageObject struct {
	// The lower bound of the billing period, expressed in the ISO 8601 datetime format in Coordinated Universal Time (UTC).
	FromDatetime time.Time `json:"from_datetime"`
	// The upper bound of the billing period, expressed in the ISO 8601 datetime format in Coordinated Universal Time (UTC).
	ToDatetime time.Time `json:"to_datetime"`
	// The date of creation of the invoice.
	IssuingDate time.Time `json:"issuing_date"`
	// A unique identifier associated with the invoice related to this particular usage record.
	LagoInvoiceId NullableString `json:"lago_invoice_id,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	// The amount in cents, tax excluded.
	AmountCents int32 `json:"amount_cents"`
	// The tax amount in cents.
	TaxesAmountCents int32 `json:"taxes_amount_cents"`
	// The total amount in cents, tax included.
	TotalAmountCents int32 `json:"total_amount_cents"`
	// Array of charges that comprise the current usage. It contains detailed information about individual charge items associated with the usage.
	ChargesUsage []CustomerChargeUsageObject `json:"charges_usage"`
}

type _CustomerUsageObject CustomerUsageObject

// NewCustomerUsageObject instantiates a new CustomerUsageObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerUsageObject(fromDatetime time.Time, toDatetime time.Time, issuingDate time.Time, amountCents int32, taxesAmountCents int32, totalAmountCents int32, chargesUsage []CustomerChargeUsageObject) *CustomerUsageObject {
	this := CustomerUsageObject{}
	this.FromDatetime = fromDatetime
	this.ToDatetime = toDatetime
	this.IssuingDate = issuingDate
	this.AmountCents = amountCents
	this.TaxesAmountCents = taxesAmountCents
	this.TotalAmountCents = totalAmountCents
	this.ChargesUsage = chargesUsage
	return &this
}

// NewCustomerUsageObjectWithDefaults instantiates a new CustomerUsageObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerUsageObjectWithDefaults() *CustomerUsageObject {
	this := CustomerUsageObject{}
	return &this
}

// GetFromDatetime returns the FromDatetime field value
func (o *CustomerUsageObject) GetFromDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FromDatetime
}

// GetFromDatetimeOk returns a tuple with the FromDatetime field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetFromDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromDatetime, true
}

// SetFromDatetime sets field value
func (o *CustomerUsageObject) SetFromDatetime(v time.Time) {
	o.FromDatetime = v
}

// GetToDatetime returns the ToDatetime field value
func (o *CustomerUsageObject) GetToDatetime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ToDatetime
}

// GetToDatetimeOk returns a tuple with the ToDatetime field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetToDatetimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToDatetime, true
}

// SetToDatetime sets field value
func (o *CustomerUsageObject) SetToDatetime(v time.Time) {
	o.ToDatetime = v
}

// GetIssuingDate returns the IssuingDate field value
func (o *CustomerUsageObject) GetIssuingDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuingDate
}

// GetIssuingDateOk returns a tuple with the IssuingDate field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetIssuingDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuingDate, true
}

// SetIssuingDate sets field value
func (o *CustomerUsageObject) SetIssuingDate(v time.Time) {
	o.IssuingDate = v
}

// GetLagoInvoiceId returns the LagoInvoiceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerUsageObject) GetLagoInvoiceId() string {
	if o == nil || IsNil(o.LagoInvoiceId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoInvoiceId.Get()
}

// GetLagoInvoiceIdOk returns a tuple with the LagoInvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerUsageObject) GetLagoInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoInvoiceId.Get(), o.LagoInvoiceId.IsSet()
}

// HasLagoInvoiceId returns a boolean if a field has been set.
func (o *CustomerUsageObject) HasLagoInvoiceId() bool {
	if o != nil && o.LagoInvoiceId.IsSet() {
		return true
	}

	return false
}

// SetLagoInvoiceId gets a reference to the given NullableString and assigns it to the LagoInvoiceId field.
func (o *CustomerUsageObject) SetLagoInvoiceId(v string) {
	o.LagoInvoiceId.Set(&v)
}
// SetLagoInvoiceIdNil sets the value for LagoInvoiceId to be an explicit nil
func (o *CustomerUsageObject) SetLagoInvoiceIdNil() {
	o.LagoInvoiceId.Set(nil)
}

// UnsetLagoInvoiceId ensures that no value is present for LagoInvoiceId, not even an explicit nil
func (o *CustomerUsageObject) UnsetLagoInvoiceId() {
	o.LagoInvoiceId.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CustomerUsageObject) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CustomerUsageObject) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *CustomerUsageObject) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetAmountCents returns the AmountCents field value
func (o *CustomerUsageObject) GetAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCents, true
}

// SetAmountCents sets field value
func (o *CustomerUsageObject) SetAmountCents(v int32) {
	o.AmountCents = v
}

// GetTaxesAmountCents returns the TaxesAmountCents field value
func (o *CustomerUsageObject) GetTaxesAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TaxesAmountCents
}

// GetTaxesAmountCentsOk returns a tuple with the TaxesAmountCents field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetTaxesAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxesAmountCents, true
}

// SetTaxesAmountCents sets field value
func (o *CustomerUsageObject) SetTaxesAmountCents(v int32) {
	o.TaxesAmountCents = v
}

// GetTotalAmountCents returns the TotalAmountCents field value
func (o *CustomerUsageObject) GetTotalAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAmountCents
}

// GetTotalAmountCentsOk returns a tuple with the TotalAmountCents field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetTotalAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmountCents, true
}

// SetTotalAmountCents sets field value
func (o *CustomerUsageObject) SetTotalAmountCents(v int32) {
	o.TotalAmountCents = v
}

// GetChargesUsage returns the ChargesUsage field value
func (o *CustomerUsageObject) GetChargesUsage() []CustomerChargeUsageObject {
	if o == nil {
		var ret []CustomerChargeUsageObject
		return ret
	}

	return o.ChargesUsage
}

// GetChargesUsageOk returns a tuple with the ChargesUsage field value
// and a boolean to check if the value has been set.
func (o *CustomerUsageObject) GetChargesUsageOk() ([]CustomerChargeUsageObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChargesUsage, true
}

// SetChargesUsage sets field value
func (o *CustomerUsageObject) SetChargesUsage(v []CustomerChargeUsageObject) {
	o.ChargesUsage = v
}

func (o CustomerUsageObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerUsageObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from_datetime"] = o.FromDatetime
	toSerialize["to_datetime"] = o.ToDatetime
	toSerialize["issuing_date"] = o.IssuingDate
	if o.LagoInvoiceId.IsSet() {
		toSerialize["lago_invoice_id"] = o.LagoInvoiceId.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["amount_cents"] = o.AmountCents
	toSerialize["taxes_amount_cents"] = o.TaxesAmountCents
	toSerialize["total_amount_cents"] = o.TotalAmountCents
	toSerialize["charges_usage"] = o.ChargesUsage
	return toSerialize, nil
}

func (o *CustomerUsageObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from_datetime",
		"to_datetime",
		"issuing_date",
		"amount_cents",
		"taxes_amount_cents",
		"total_amount_cents",
		"charges_usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerUsageObject := _CustomerUsageObject{}

	err = json.Unmarshal(bytes, &varCustomerUsageObject)

	if err != nil {
		return err
	}

	*o = CustomerUsageObject(varCustomerUsageObject)

	return err
}

type NullableCustomerUsageObject struct {
	value *CustomerUsageObject
	isSet bool
}

func (v NullableCustomerUsageObject) Get() *CustomerUsageObject {
	return v.value
}

func (v *NullableCustomerUsageObject) Set(val *CustomerUsageObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerUsageObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerUsageObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerUsageObject(val *CustomerUsageObject) *NullableCustomerUsageObject {
	return &NullableCustomerUsageObject{value: val, isSet: true}
}

func (v NullableCustomerUsageObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerUsageObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


