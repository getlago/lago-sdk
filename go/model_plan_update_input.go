/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PlanUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanUpdateInput{}

// PlanUpdateInput struct for PlanUpdateInput
type PlanUpdateInput struct {
	Plan PlanUpdateInputPlan `json:"plan"`
}

type _PlanUpdateInput PlanUpdateInput

// NewPlanUpdateInput instantiates a new PlanUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanUpdateInput(plan PlanUpdateInputPlan) *PlanUpdateInput {
	this := PlanUpdateInput{}
	this.Plan = plan
	return &this
}

// NewPlanUpdateInputWithDefaults instantiates a new PlanUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanUpdateInputWithDefaults() *PlanUpdateInput {
	this := PlanUpdateInput{}
	return &this
}

// GetPlan returns the Plan field value
func (o *PlanUpdateInput) GetPlan() PlanUpdateInputPlan {
	if o == nil {
		var ret PlanUpdateInputPlan
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *PlanUpdateInput) GetPlanOk() (*PlanUpdateInputPlan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *PlanUpdateInput) SetPlan(v PlanUpdateInputPlan) {
	o.Plan = v
}

func (o PlanUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plan"] = o.Plan
	return toSerialize, nil
}

func (o *PlanUpdateInput) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanUpdateInput := _PlanUpdateInput{}

	err = json.Unmarshal(bytes, &varPlanUpdateInput)

	if err != nil {
		return err
	}

	*o = PlanUpdateInput(varPlanUpdateInput)

	return err
}

type NullablePlanUpdateInput struct {
	value *PlanUpdateInput
	isSet bool
}

func (v NullablePlanUpdateInput) Get() *PlanUpdateInput {
	return v.value
}

func (v *NullablePlanUpdateInput) Set(val *PlanUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanUpdateInput(val *PlanUpdateInput) *NullablePlanUpdateInput {
	return &NullablePlanUpdateInput{value: val, isSet: true}
}

func (v NullablePlanUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


