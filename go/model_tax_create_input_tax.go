/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TaxCreateInputTax type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxCreateInputTax{}

// TaxCreateInputTax struct for TaxCreateInputTax
type TaxCreateInputTax struct {
	// Name of the tax.
	Name string `json:"name"`
	// Unique code used to identify the tax associated with the API request.
	Code string `json:"code"`
	// The percentage rate of the tax
	Rate string `json:"rate"`
	// Internal description of the taxe
	Description NullableString `json:"description,omitempty"`
	// Set to `true` if the tax is used as one of the organization's default
	AppliedToOrganization *bool `json:"applied_to_organization,omitempty"`
}

type _TaxCreateInputTax TaxCreateInputTax

// NewTaxCreateInputTax instantiates a new TaxCreateInputTax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxCreateInputTax(name string, code string, rate string) *TaxCreateInputTax {
	this := TaxCreateInputTax{}
	this.Name = name
	this.Code = code
	this.Rate = rate
	return &this
}

// NewTaxCreateInputTaxWithDefaults instantiates a new TaxCreateInputTax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxCreateInputTaxWithDefaults() *TaxCreateInputTax {
	this := TaxCreateInputTax{}
	return &this
}

// GetName returns the Name field value
func (o *TaxCreateInputTax) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaxCreateInputTax) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TaxCreateInputTax) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *TaxCreateInputTax) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TaxCreateInputTax) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TaxCreateInputTax) SetCode(v string) {
	o.Code = v
}

// GetRate returns the Rate field value
func (o *TaxCreateInputTax) GetRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *TaxCreateInputTax) GetRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *TaxCreateInputTax) SetRate(v string) {
	o.Rate = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaxCreateInputTax) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaxCreateInputTax) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TaxCreateInputTax) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TaxCreateInputTax) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TaxCreateInputTax) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TaxCreateInputTax) UnsetDescription() {
	o.Description.Unset()
}

// GetAppliedToOrganization returns the AppliedToOrganization field value if set, zero value otherwise.
func (o *TaxCreateInputTax) GetAppliedToOrganization() bool {
	if o == nil || IsNil(o.AppliedToOrganization) {
		var ret bool
		return ret
	}
	return *o.AppliedToOrganization
}

// GetAppliedToOrganizationOk returns a tuple with the AppliedToOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxCreateInputTax) GetAppliedToOrganizationOk() (*bool, bool) {
	if o == nil || IsNil(o.AppliedToOrganization) {
		return nil, false
	}
	return o.AppliedToOrganization, true
}

// HasAppliedToOrganization returns a boolean if a field has been set.
func (o *TaxCreateInputTax) HasAppliedToOrganization() bool {
	if o != nil && !IsNil(o.AppliedToOrganization) {
		return true
	}

	return false
}

// SetAppliedToOrganization gets a reference to the given bool and assigns it to the AppliedToOrganization field.
func (o *TaxCreateInputTax) SetAppliedToOrganization(v bool) {
	o.AppliedToOrganization = &v
}

func (o TaxCreateInputTax) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxCreateInputTax) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["rate"] = o.Rate
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.AppliedToOrganization) {
		toSerialize["applied_to_organization"] = o.AppliedToOrganization
	}
	return toSerialize, nil
}

func (o *TaxCreateInputTax) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"rate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxCreateInputTax := _TaxCreateInputTax{}

	err = json.Unmarshal(bytes, &varTaxCreateInputTax)

	if err != nil {
		return err
	}

	*o = TaxCreateInputTax(varTaxCreateInputTax)

	return err
}

type NullableTaxCreateInputTax struct {
	value *TaxCreateInputTax
	isSet bool
}

func (v NullableTaxCreateInputTax) Get() *TaxCreateInputTax {
	return v.value
}

func (v *NullableTaxCreateInputTax) Set(val *TaxCreateInputTax) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxCreateInputTax) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxCreateInputTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxCreateInputTax(val *TaxCreateInputTax) *NullableTaxCreateInputTax {
	return &NullableTaxCreateInputTax{value: val, isSet: true}
}

func (v NullableTaxCreateInputTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxCreateInputTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


