/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PlanCreateInputPlanChargesInnerGroupPropertiesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanCreateInputPlanChargesInnerGroupPropertiesInner{}

// PlanCreateInputPlanChargesInnerGroupPropertiesInner struct for PlanCreateInputPlanChargesInnerGroupPropertiesInner
type PlanCreateInputPlanChargesInnerGroupPropertiesInner struct {
	// Unique identifier of a billable metric group, created by Lago.
	GroupId string `json:"group_id"`
	Values GroupPropertiesObjectValues `json:"values"`
}

type _PlanCreateInputPlanChargesInnerGroupPropertiesInner PlanCreateInputPlanChargesInnerGroupPropertiesInner

// NewPlanCreateInputPlanChargesInnerGroupPropertiesInner instantiates a new PlanCreateInputPlanChargesInnerGroupPropertiesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanCreateInputPlanChargesInnerGroupPropertiesInner(groupId string, values GroupPropertiesObjectValues) *PlanCreateInputPlanChargesInnerGroupPropertiesInner {
	this := PlanCreateInputPlanChargesInnerGroupPropertiesInner{}
	this.GroupId = groupId
	this.Values = values
	return &this
}

// NewPlanCreateInputPlanChargesInnerGroupPropertiesInnerWithDefaults instantiates a new PlanCreateInputPlanChargesInnerGroupPropertiesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanCreateInputPlanChargesInnerGroupPropertiesInnerWithDefaults() *PlanCreateInputPlanChargesInnerGroupPropertiesInner {
	this := PlanCreateInputPlanChargesInnerGroupPropertiesInner{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) SetGroupId(v string) {
	o.GroupId = v
}

// GetValues returns the Values field value
func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) GetValues() GroupPropertiesObjectValues {
	if o == nil {
		var ret GroupPropertiesObjectValues
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) GetValuesOk() (*GroupPropertiesObjectValues, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) SetValues(v GroupPropertiesObjectValues) {
	o.Values = v
}

func (o PlanCreateInputPlanChargesInnerGroupPropertiesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanCreateInputPlanChargesInnerGroupPropertiesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_id"] = o.GroupId
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *PlanCreateInputPlanChargesInnerGroupPropertiesInner) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanCreateInputPlanChargesInnerGroupPropertiesInner := _PlanCreateInputPlanChargesInnerGroupPropertiesInner{}

	err = json.Unmarshal(bytes, &varPlanCreateInputPlanChargesInnerGroupPropertiesInner)

	if err != nil {
		return err
	}

	*o = PlanCreateInputPlanChargesInnerGroupPropertiesInner(varPlanCreateInputPlanChargesInnerGroupPropertiesInner)

	return err
}

type NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner struct {
	value *PlanCreateInputPlanChargesInnerGroupPropertiesInner
	isSet bool
}

func (v NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner) Get() *PlanCreateInputPlanChargesInnerGroupPropertiesInner {
	return v.value
}

func (v *NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner) Set(val *PlanCreateInputPlanChargesInnerGroupPropertiesInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanCreateInputPlanChargesInnerGroupPropertiesInner(val *PlanCreateInputPlanChargesInnerGroupPropertiesInner) *NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner {
	return &NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner{value: val, isSet: true}
}

func (v NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanCreateInputPlanChargesInnerGroupPropertiesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


