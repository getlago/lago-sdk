/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
)

// checks if the PlanUpdateInputPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanUpdateInputPlan{}

// PlanUpdateInputPlan struct for PlanUpdateInputPlan
type PlanUpdateInputPlan struct {
	// The name of the plan.
	Name *string `json:"name,omitempty"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
	Code *string `json:"code,omitempty"`
	// The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.
	Interval *string `json:"interval,omitempty"`
	// The description on the plan.
	Description *string `json:"description,omitempty"`
	// The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
	AmountCents *int32 `json:"amount_cents,omitempty"`
	AmountCurrency *Currency `json:"amount_currency,omitempty"`
	// The duration in days during which the base cost of the plan is offered for free.
	TrialPeriod *float32 `json:"trial_period,omitempty"`
	// This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.
	PayInAdvance *bool `json:"pay_in_advance,omitempty"`
	// This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the planâ€™s interval is `yearly`.
	BillChargesMonthly NullableBool `json:"bill_charges_monthly,omitempty"`
	// List of unique code used to identify the taxes.
	TaxCodes []string `json:"tax_codes,omitempty"`
	// Additional usage-based charges for this plan.
	Charges []PlanUpdateInputPlanChargesInner `json:"charges,omitempty"`
}

// NewPlanUpdateInputPlan instantiates a new PlanUpdateInputPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanUpdateInputPlan() *PlanUpdateInputPlan {
	this := PlanUpdateInputPlan{}
	return &this
}

// NewPlanUpdateInputPlanWithDefaults instantiates a new PlanUpdateInputPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanUpdateInputPlanWithDefaults() *PlanUpdateInputPlan {
	this := PlanUpdateInputPlan{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlanUpdateInputPlan) SetName(v string) {
	o.Name = &v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *PlanUpdateInputPlan) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PlanUpdateInputPlan) SetCode(v string) {
	o.Code = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *PlanUpdateInputPlan) SetInterval(v string) {
	o.Interval = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlanUpdateInputPlan) SetDescription(v string) {
	o.Description = &v
}

// GetAmountCents returns the AmountCents field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetAmountCents() int32 {
	if o == nil || IsNil(o.AmountCents) {
		var ret int32
		return ret
	}
	return *o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetAmountCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountCents) {
		return nil, false
	}
	return o.AmountCents, true
}

// HasAmountCents returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasAmountCents() bool {
	if o != nil && !IsNil(o.AmountCents) {
		return true
	}

	return false
}

// SetAmountCents gets a reference to the given int32 and assigns it to the AmountCents field.
func (o *PlanUpdateInputPlan) SetAmountCents(v int32) {
	o.AmountCents = &v
}

// GetAmountCurrency returns the AmountCurrency field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetAmountCurrency() Currency {
	if o == nil || IsNil(o.AmountCurrency) {
		var ret Currency
		return ret
	}
	return *o.AmountCurrency
}

// GetAmountCurrencyOk returns a tuple with the AmountCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetAmountCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.AmountCurrency) {
		return nil, false
	}
	return o.AmountCurrency, true
}

// HasAmountCurrency returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasAmountCurrency() bool {
	if o != nil && !IsNil(o.AmountCurrency) {
		return true
	}

	return false
}

// SetAmountCurrency gets a reference to the given Currency and assigns it to the AmountCurrency field.
func (o *PlanUpdateInputPlan) SetAmountCurrency(v Currency) {
	o.AmountCurrency = &v
}

// GetTrialPeriod returns the TrialPeriod field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetTrialPeriod() float32 {
	if o == nil || IsNil(o.TrialPeriod) {
		var ret float32
		return ret
	}
	return *o.TrialPeriod
}

// GetTrialPeriodOk returns a tuple with the TrialPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetTrialPeriodOk() (*float32, bool) {
	if o == nil || IsNil(o.TrialPeriod) {
		return nil, false
	}
	return o.TrialPeriod, true
}

// HasTrialPeriod returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasTrialPeriod() bool {
	if o != nil && !IsNil(o.TrialPeriod) {
		return true
	}

	return false
}

// SetTrialPeriod gets a reference to the given float32 and assigns it to the TrialPeriod field.
func (o *PlanUpdateInputPlan) SetTrialPeriod(v float32) {
	o.TrialPeriod = &v
}

// GetPayInAdvance returns the PayInAdvance field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetPayInAdvance() bool {
	if o == nil || IsNil(o.PayInAdvance) {
		var ret bool
		return ret
	}
	return *o.PayInAdvance
}

// GetPayInAdvanceOk returns a tuple with the PayInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetPayInAdvanceOk() (*bool, bool) {
	if o == nil || IsNil(o.PayInAdvance) {
		return nil, false
	}
	return o.PayInAdvance, true
}

// HasPayInAdvance returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasPayInAdvance() bool {
	if o != nil && !IsNil(o.PayInAdvance) {
		return true
	}

	return false
}

// SetPayInAdvance gets a reference to the given bool and assigns it to the PayInAdvance field.
func (o *PlanUpdateInputPlan) SetPayInAdvance(v bool) {
	o.PayInAdvance = &v
}

// GetBillChargesMonthly returns the BillChargesMonthly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanUpdateInputPlan) GetBillChargesMonthly() bool {
	if o == nil || IsNil(o.BillChargesMonthly.Get()) {
		var ret bool
		return ret
	}
	return *o.BillChargesMonthly.Get()
}

// GetBillChargesMonthlyOk returns a tuple with the BillChargesMonthly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanUpdateInputPlan) GetBillChargesMonthlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillChargesMonthly.Get(), o.BillChargesMonthly.IsSet()
}

// HasBillChargesMonthly returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasBillChargesMonthly() bool {
	if o != nil && o.BillChargesMonthly.IsSet() {
		return true
	}

	return false
}

// SetBillChargesMonthly gets a reference to the given NullableBool and assigns it to the BillChargesMonthly field.
func (o *PlanUpdateInputPlan) SetBillChargesMonthly(v bool) {
	o.BillChargesMonthly.Set(&v)
}
// SetBillChargesMonthlyNil sets the value for BillChargesMonthly to be an explicit nil
func (o *PlanUpdateInputPlan) SetBillChargesMonthlyNil() {
	o.BillChargesMonthly.Set(nil)
}

// UnsetBillChargesMonthly ensures that no value is present for BillChargesMonthly, not even an explicit nil
func (o *PlanUpdateInputPlan) UnsetBillChargesMonthly() {
	o.BillChargesMonthly.Unset()
}

// GetTaxCodes returns the TaxCodes field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetTaxCodes() []string {
	if o == nil || IsNil(o.TaxCodes) {
		var ret []string
		return ret
	}
	return o.TaxCodes
}

// GetTaxCodesOk returns a tuple with the TaxCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetTaxCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TaxCodes) {
		return nil, false
	}
	return o.TaxCodes, true
}

// HasTaxCodes returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasTaxCodes() bool {
	if o != nil && !IsNil(o.TaxCodes) {
		return true
	}

	return false
}

// SetTaxCodes gets a reference to the given []string and assigns it to the TaxCodes field.
func (o *PlanUpdateInputPlan) SetTaxCodes(v []string) {
	o.TaxCodes = v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *PlanUpdateInputPlan) GetCharges() []PlanUpdateInputPlanChargesInner {
	if o == nil || IsNil(o.Charges) {
		var ret []PlanUpdateInputPlanChargesInner
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlan) GetChargesOk() ([]PlanUpdateInputPlanChargesInner, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *PlanUpdateInputPlan) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []PlanUpdateInputPlanChargesInner and assigns it to the Charges field.
func (o *PlanUpdateInputPlan) SetCharges(v []PlanUpdateInputPlanChargesInner) {
	o.Charges = v
}

func (o PlanUpdateInputPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanUpdateInputPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AmountCents) {
		toSerialize["amount_cents"] = o.AmountCents
	}
	if !IsNil(o.AmountCurrency) {
		toSerialize["amount_currency"] = o.AmountCurrency
	}
	if !IsNil(o.TrialPeriod) {
		toSerialize["trial_period"] = o.TrialPeriod
	}
	if !IsNil(o.PayInAdvance) {
		toSerialize["pay_in_advance"] = o.PayInAdvance
	}
	if o.BillChargesMonthly.IsSet() {
		toSerialize["bill_charges_monthly"] = o.BillChargesMonthly.Get()
	}
	if !IsNil(o.TaxCodes) {
		toSerialize["tax_codes"] = o.TaxCodes
	}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}
	return toSerialize, nil
}

type NullablePlanUpdateInputPlan struct {
	value *PlanUpdateInputPlan
	isSet bool
}

func (v NullablePlanUpdateInputPlan) Get() *PlanUpdateInputPlan {
	return v.value
}

func (v *NullablePlanUpdateInputPlan) Set(val *PlanUpdateInputPlan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanUpdateInputPlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanUpdateInputPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanUpdateInputPlan(val *PlanUpdateInputPlan) *NullablePlanUpdateInputPlan {
	return &NullablePlanUpdateInputPlan{value: val, isSet: true}
}

func (v NullablePlanUpdateInputPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanUpdateInputPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


