/*
Lago API documentation

Testing BillableMetricsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lagoapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/getlago/sdk/go"
)

func Test_lagoapi_BillableMetricsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BillableMetricsAPIService CreateBillableMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BillableMetricsAPI.CreateBillableMetric(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillableMetricsAPIService DestroyBillableMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.BillableMetricsAPI.DestroyBillableMetric(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillableMetricsAPIService FindAllBillableMetricGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.BillableMetricsAPI.FindAllBillableMetricGroups(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillableMetricsAPIService FindAllBillableMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BillableMetricsAPI.FindAllBillableMetrics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillableMetricsAPIService FindBillableMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.BillableMetricsAPI.FindBillableMetric(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BillableMetricsAPIService UpdateBillableMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.BillableMetricsAPI.UpdateBillableMetric(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
