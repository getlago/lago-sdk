/*
Lago API documentation

Testing InvoicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lagoapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/getlago/sdk/go"
)

func Test_lagoapi_InvoicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InvoicesAPIService CreateInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.CreateInvoice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService DownloadInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.InvoicesAPI.DownloadInvoice(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService FinalizeInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.InvoicesAPI.FinalizeInvoice(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService FindAllInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.FindAllInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService FindInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.InvoicesAPI.FindInvoice(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService RefreshInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.InvoicesAPI.RefreshInvoice(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService RetryPayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		httpRes, err := apiClient.InvoicesAPI.RetryPayment(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService UpdateInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.InvoicesAPI.UpdateInvoice(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
