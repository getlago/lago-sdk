/*
Lago API documentation

Testing CustomersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lagoapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/getlago/sdk/go"
)

func Test_lagoapi_CustomersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomersAPIService CreateCustomer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomersAPI.CreateCustomer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService DeleteAppliedCoupon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCustomerId string
		var appliedCouponId string

		resp, httpRes, err := apiClient.CustomersAPI.DeleteAppliedCoupon(context.Background(), externalCustomerId, appliedCouponId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService DestroyCustomer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalId string

		resp, httpRes, err := apiClient.CustomersAPI.DestroyCustomer(context.Background(), externalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService FindAllCustomerPastUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCustomerId string

		resp, httpRes, err := apiClient.CustomersAPI.FindAllCustomerPastUsage(context.Background(), externalCustomerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService FindAllCustomers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomersAPI.FindAllCustomers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService FindCustomer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalId string

		resp, httpRes, err := apiClient.CustomersAPI.FindCustomer(context.Background(), externalId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService FindCustomerCurrentUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCustomerId string

		resp, httpRes, err := apiClient.CustomersAPI.FindCustomerCurrentUsage(context.Background(), externalCustomerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService GenerateCustomerCheckoutURL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCustomerId string

		resp, httpRes, err := apiClient.CustomersAPI.GenerateCustomerCheckoutURL(context.Background(), externalCustomerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomersAPIService GetCustomerPortalUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCustomerId string

		resp, httpRes, err := apiClient.CustomersAPI.GetCustomerPortalUrl(context.Background(), externalCustomerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
