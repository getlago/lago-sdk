/*
Lago API documentation

Testing CreditNotesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lagoapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/getlago/sdk/go"
)

func Test_lagoapi_CreditNotesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CreditNotesAPIService CreateCreditNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CreditNotesAPI.CreateCreditNote(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreditNotesAPIService DownloadCreditNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.CreditNotesAPI.DownloadCreditNote(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreditNotesAPIService EstimateCreditNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CreditNotesAPI.EstimateCreditNote(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreditNotesAPIService FindAllCreditNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CreditNotesAPI.FindAllCreditNotes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreditNotesAPIService FindCreditNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.CreditNotesAPI.FindCreditNote(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreditNotesAPIService UpdateCreditNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.CreditNotesAPI.UpdateCreditNote(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CreditNotesAPIService VoidCreditNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lagoId string

		resp, httpRes, err := apiClient.CreditNotesAPI.VoidCreditNote(context.Background(), lagoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
