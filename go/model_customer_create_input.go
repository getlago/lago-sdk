/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerCreateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerCreateInput{}

// CustomerCreateInput struct for CustomerCreateInput
type CustomerCreateInput struct {
	Customer CustomerCreateInputCustomer `json:"customer"`
}

type _CustomerCreateInput CustomerCreateInput

// NewCustomerCreateInput instantiates a new CustomerCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerCreateInput(customer CustomerCreateInputCustomer) *CustomerCreateInput {
	this := CustomerCreateInput{}
	this.Customer = customer
	return &this
}

// NewCustomerCreateInputWithDefaults instantiates a new CustomerCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerCreateInputWithDefaults() *CustomerCreateInput {
	this := CustomerCreateInput{}
	return &this
}

// GetCustomer returns the Customer field value
func (o *CustomerCreateInput) GetCustomer() CustomerCreateInputCustomer {
	if o == nil {
		var ret CustomerCreateInputCustomer
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *CustomerCreateInput) GetCustomerOk() (*CustomerCreateInputCustomer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *CustomerCreateInput) SetCustomer(v CustomerCreateInputCustomer) {
	o.Customer = v
}

func (o CustomerCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerCreateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer"] = o.Customer
	return toSerialize, nil
}

func (o *CustomerCreateInput) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerCreateInput := _CustomerCreateInput{}

	err = json.Unmarshal(bytes, &varCustomerCreateInput)

	if err != nil {
		return err
	}

	*o = CustomerCreateInput(varCustomerCreateInput)

	return err
}

type NullableCustomerCreateInput struct {
	value *CustomerCreateInput
	isSet bool
}

func (v NullableCustomerCreateInput) Get() *CustomerCreateInput {
	return v.value
}

func (v *NullableCustomerCreateInput) Set(val *CustomerCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerCreateInput(val *CustomerCreateInput) *NullableCustomerCreateInput {
	return &NullableCustomerCreateInput{value: val, isSet: true}
}

func (v NullableCustomerCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


