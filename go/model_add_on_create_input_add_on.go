/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AddOnCreateInputAddOn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOnCreateInputAddOn{}

// AddOnCreateInputAddOn struct for AddOnCreateInputAddOn
type AddOnCreateInputAddOn struct {
	// The name of the add-on.
	Name string `json:"name"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// Unique code used to identify the add-on.
	Code string `json:"code"`
	// The cost of the add-on in cents, excluding any applicable taxes, that is billed to a customer. By creating a one-off invoice, you will be able to override this value.
	AmountCents int32 `json:"amount_cents"`
	AmountCurrency Currency `json:"amount_currency"`
	// The description of the add-on.
	Description NullableString `json:"description,omitempty"`
	// List of unique code used to identify the taxes.
	TaxCodes []string `json:"tax_codes,omitempty"`
}

type _AddOnCreateInputAddOn AddOnCreateInputAddOn

// NewAddOnCreateInputAddOn instantiates a new AddOnCreateInputAddOn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOnCreateInputAddOn(name string, code string, amountCents int32, amountCurrency Currency) *AddOnCreateInputAddOn {
	this := AddOnCreateInputAddOn{}
	this.Name = name
	this.Code = code
	this.AmountCents = amountCents
	this.AmountCurrency = amountCurrency
	return &this
}

// NewAddOnCreateInputAddOnWithDefaults instantiates a new AddOnCreateInputAddOn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOnCreateInputAddOnWithDefaults() *AddOnCreateInputAddOn {
	this := AddOnCreateInputAddOn{}
	return &this
}

// GetName returns the Name field value
func (o *AddOnCreateInputAddOn) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddOnCreateInputAddOn) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddOnCreateInputAddOn) SetName(v string) {
	o.Name = v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *AddOnCreateInputAddOn) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnCreateInputAddOn) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *AddOnCreateInputAddOn) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *AddOnCreateInputAddOn) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetCode returns the Code field value
func (o *AddOnCreateInputAddOn) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AddOnCreateInputAddOn) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AddOnCreateInputAddOn) SetCode(v string) {
	o.Code = v
}

// GetAmountCents returns the AmountCents field value
func (o *AddOnCreateInputAddOn) GetAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value
// and a boolean to check if the value has been set.
func (o *AddOnCreateInputAddOn) GetAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCents, true
}

// SetAmountCents sets field value
func (o *AddOnCreateInputAddOn) SetAmountCents(v int32) {
	o.AmountCents = v
}

// GetAmountCurrency returns the AmountCurrency field value
func (o *AddOnCreateInputAddOn) GetAmountCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.AmountCurrency
}

// GetAmountCurrencyOk returns a tuple with the AmountCurrency field value
// and a boolean to check if the value has been set.
func (o *AddOnCreateInputAddOn) GetAmountCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCurrency, true
}

// SetAmountCurrency sets field value
func (o *AddOnCreateInputAddOn) SetAmountCurrency(v Currency) {
	o.AmountCurrency = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddOnCreateInputAddOn) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddOnCreateInputAddOn) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AddOnCreateInputAddOn) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AddOnCreateInputAddOn) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AddOnCreateInputAddOn) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AddOnCreateInputAddOn) UnsetDescription() {
	o.Description.Unset()
}

// GetTaxCodes returns the TaxCodes field value if set, zero value otherwise.
func (o *AddOnCreateInputAddOn) GetTaxCodes() []string {
	if o == nil || IsNil(o.TaxCodes) {
		var ret []string
		return ret
	}
	return o.TaxCodes
}

// GetTaxCodesOk returns a tuple with the TaxCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnCreateInputAddOn) GetTaxCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TaxCodes) {
		return nil, false
	}
	return o.TaxCodes, true
}

// HasTaxCodes returns a boolean if a field has been set.
func (o *AddOnCreateInputAddOn) HasTaxCodes() bool {
	if o != nil && !IsNil(o.TaxCodes) {
		return true
	}

	return false
}

// SetTaxCodes gets a reference to the given []string and assigns it to the TaxCodes field.
func (o *AddOnCreateInputAddOn) SetTaxCodes(v []string) {
	o.TaxCodes = v
}

func (o AddOnCreateInputAddOn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOnCreateInputAddOn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	toSerialize["code"] = o.Code
	toSerialize["amount_cents"] = o.AmountCents
	toSerialize["amount_currency"] = o.AmountCurrency
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.TaxCodes) {
		toSerialize["tax_codes"] = o.TaxCodes
	}
	return toSerialize, nil
}

func (o *AddOnCreateInputAddOn) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"amount_cents",
		"amount_currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddOnCreateInputAddOn := _AddOnCreateInputAddOn{}

	err = json.Unmarshal(bytes, &varAddOnCreateInputAddOn)

	if err != nil {
		return err
	}

	*o = AddOnCreateInputAddOn(varAddOnCreateInputAddOn)

	return err
}

type NullableAddOnCreateInputAddOn struct {
	value *AddOnCreateInputAddOn
	isSet bool
}

func (v NullableAddOnCreateInputAddOn) Get() *AddOnCreateInputAddOn {
	return v.value
}

func (v *NullableAddOnCreateInputAddOn) Set(val *AddOnCreateInputAddOn) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOnCreateInputAddOn) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOnCreateInputAddOn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOnCreateInputAddOn(val *AddOnCreateInputAddOn) *NullableAddOnCreateInputAddOn {
	return &NullableAddOnCreateInputAddOn{value: val, isSet: true}
}

func (v NullableAddOnCreateInputAddOn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOnCreateInputAddOn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


