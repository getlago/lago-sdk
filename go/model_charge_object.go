/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ChargeObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeObject{}

// ChargeObject struct for ChargeObject
type ChargeObject struct {
	// Unique identifier of charge, created by Lago.
	LagoId string `json:"lago_id"`
	// Unique identifier of the billable metric created by Lago.
	LagoBillableMetricId string `json:"lago_billable_metric_id"`
	// Unique code identifying a billable metric.
	BillableMetricCode string `json:"billable_metric_code"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// The date and time when the charge was created. It is expressed in UTC format according to the ISO 8601 datetime standard.
	CreatedAt time.Time `json:"created_at"`
	// Specifies the pricing model used for the calculation of the final fee. It can be `standard`, `graduated`, `graduated_percentage`, `package`, `percentage` or `volume`.
	ChargeModel string `json:"charge_model"`
	// This field determines the billing timing for this specific usage-based charge. When set to `true`, the charge is due and invoiced immediately. Conversely, when set to `false`, the charge is due and invoiced at the end of each billing period.
	PayInAdvance *bool `json:"pay_in_advance,omitempty"`
	// This field specifies whether the charge should be included in a proper invoice. If set to `false`, no invoice will be issued for this charge. You can only set it to `false` when `pay_in_advance` is `true`.
	Invoiceable *bool `json:"invoiceable,omitempty"`
	// Specifies whether a charge is prorated based on the remaining number of days in the billing period or billed fully.  - If set to `true`, the charge is prorated based on the remaining days in the current billing period. - If set to `false`, the charge is billed in full. - If not defined in the request, default value is `false`.
	Prorated *bool `json:"prorated,omitempty"`
	// The minimum spending amount required for the charge, measured in cents and excluding any applicable taxes. It indicates the minimum amount that needs to be charged for each billing period.
	MinAmountCents *int32 `json:"min_amount_cents,omitempty"`
	Properties *ChargeObjectProperties `json:"properties,omitempty"`
	// All charge information, sorted by groups.
	GroupProperties []GroupPropertiesObject `json:"group_properties,omitempty"`
	// All taxes applied to the charge.
	Taxes []TaxObject `json:"taxes,omitempty"`
}

type _ChargeObject ChargeObject

// NewChargeObject instantiates a new ChargeObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeObject(lagoId string, lagoBillableMetricId string, billableMetricCode string, createdAt time.Time, chargeModel string) *ChargeObject {
	this := ChargeObject{}
	this.LagoId = lagoId
	this.LagoBillableMetricId = lagoBillableMetricId
	this.BillableMetricCode = billableMetricCode
	this.CreatedAt = createdAt
	this.ChargeModel = chargeModel
	return &this
}

// NewChargeObjectWithDefaults instantiates a new ChargeObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeObjectWithDefaults() *ChargeObject {
	this := ChargeObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *ChargeObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *ChargeObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetLagoBillableMetricId returns the LagoBillableMetricId field value
func (o *ChargeObject) GetLagoBillableMetricId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoBillableMetricId
}

// GetLagoBillableMetricIdOk returns a tuple with the LagoBillableMetricId field value
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetLagoBillableMetricIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoBillableMetricId, true
}

// SetLagoBillableMetricId sets field value
func (o *ChargeObject) SetLagoBillableMetricId(v string) {
	o.LagoBillableMetricId = v
}

// GetBillableMetricCode returns the BillableMetricCode field value
func (o *ChargeObject) GetBillableMetricCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillableMetricCode
}

// GetBillableMetricCodeOk returns a tuple with the BillableMetricCode field value
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetBillableMetricCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillableMetricCode, true
}

// SetBillableMetricCode sets field value
func (o *ChargeObject) SetBillableMetricCode(v string) {
	o.BillableMetricCode = v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *ChargeObject) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *ChargeObject) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *ChargeObject) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ChargeObject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ChargeObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetChargeModel returns the ChargeModel field value
func (o *ChargeObject) GetChargeModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeModel
}

// GetChargeModelOk returns a tuple with the ChargeModel field value
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetChargeModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeModel, true
}

// SetChargeModel sets field value
func (o *ChargeObject) SetChargeModel(v string) {
	o.ChargeModel = v
}

// GetPayInAdvance returns the PayInAdvance field value if set, zero value otherwise.
func (o *ChargeObject) GetPayInAdvance() bool {
	if o == nil || IsNil(o.PayInAdvance) {
		var ret bool
		return ret
	}
	return *o.PayInAdvance
}

// GetPayInAdvanceOk returns a tuple with the PayInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetPayInAdvanceOk() (*bool, bool) {
	if o == nil || IsNil(o.PayInAdvance) {
		return nil, false
	}
	return o.PayInAdvance, true
}

// HasPayInAdvance returns a boolean if a field has been set.
func (o *ChargeObject) HasPayInAdvance() bool {
	if o != nil && !IsNil(o.PayInAdvance) {
		return true
	}

	return false
}

// SetPayInAdvance gets a reference to the given bool and assigns it to the PayInAdvance field.
func (o *ChargeObject) SetPayInAdvance(v bool) {
	o.PayInAdvance = &v
}

// GetInvoiceable returns the Invoiceable field value if set, zero value otherwise.
func (o *ChargeObject) GetInvoiceable() bool {
	if o == nil || IsNil(o.Invoiceable) {
		var ret bool
		return ret
	}
	return *o.Invoiceable
}

// GetInvoiceableOk returns a tuple with the Invoiceable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetInvoiceableOk() (*bool, bool) {
	if o == nil || IsNil(o.Invoiceable) {
		return nil, false
	}
	return o.Invoiceable, true
}

// HasInvoiceable returns a boolean if a field has been set.
func (o *ChargeObject) HasInvoiceable() bool {
	if o != nil && !IsNil(o.Invoiceable) {
		return true
	}

	return false
}

// SetInvoiceable gets a reference to the given bool and assigns it to the Invoiceable field.
func (o *ChargeObject) SetInvoiceable(v bool) {
	o.Invoiceable = &v
}

// GetProrated returns the Prorated field value if set, zero value otherwise.
func (o *ChargeObject) GetProrated() bool {
	if o == nil || IsNil(o.Prorated) {
		var ret bool
		return ret
	}
	return *o.Prorated
}

// GetProratedOk returns a tuple with the Prorated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetProratedOk() (*bool, bool) {
	if o == nil || IsNil(o.Prorated) {
		return nil, false
	}
	return o.Prorated, true
}

// HasProrated returns a boolean if a field has been set.
func (o *ChargeObject) HasProrated() bool {
	if o != nil && !IsNil(o.Prorated) {
		return true
	}

	return false
}

// SetProrated gets a reference to the given bool and assigns it to the Prorated field.
func (o *ChargeObject) SetProrated(v bool) {
	o.Prorated = &v
}

// GetMinAmountCents returns the MinAmountCents field value if set, zero value otherwise.
func (o *ChargeObject) GetMinAmountCents() int32 {
	if o == nil || IsNil(o.MinAmountCents) {
		var ret int32
		return ret
	}
	return *o.MinAmountCents
}

// GetMinAmountCentsOk returns a tuple with the MinAmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetMinAmountCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinAmountCents) {
		return nil, false
	}
	return o.MinAmountCents, true
}

// HasMinAmountCents returns a boolean if a field has been set.
func (o *ChargeObject) HasMinAmountCents() bool {
	if o != nil && !IsNil(o.MinAmountCents) {
		return true
	}

	return false
}

// SetMinAmountCents gets a reference to the given int32 and assigns it to the MinAmountCents field.
func (o *ChargeObject) SetMinAmountCents(v int32) {
	o.MinAmountCents = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ChargeObject) GetProperties() ChargeObjectProperties {
	if o == nil || IsNil(o.Properties) {
		var ret ChargeObjectProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetPropertiesOk() (*ChargeObjectProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ChargeObject) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given ChargeObjectProperties and assigns it to the Properties field.
func (o *ChargeObject) SetProperties(v ChargeObjectProperties) {
	o.Properties = &v
}

// GetGroupProperties returns the GroupProperties field value if set, zero value otherwise.
func (o *ChargeObject) GetGroupProperties() []GroupPropertiesObject {
	if o == nil || IsNil(o.GroupProperties) {
		var ret []GroupPropertiesObject
		return ret
	}
	return o.GroupProperties
}

// GetGroupPropertiesOk returns a tuple with the GroupProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetGroupPropertiesOk() ([]GroupPropertiesObject, bool) {
	if o == nil || IsNil(o.GroupProperties) {
		return nil, false
	}
	return o.GroupProperties, true
}

// HasGroupProperties returns a boolean if a field has been set.
func (o *ChargeObject) HasGroupProperties() bool {
	if o != nil && !IsNil(o.GroupProperties) {
		return true
	}

	return false
}

// SetGroupProperties gets a reference to the given []GroupPropertiesObject and assigns it to the GroupProperties field.
func (o *ChargeObject) SetGroupProperties(v []GroupPropertiesObject) {
	o.GroupProperties = v
}

// GetTaxes returns the Taxes field value if set, zero value otherwise.
func (o *ChargeObject) GetTaxes() []TaxObject {
	if o == nil || IsNil(o.Taxes) {
		var ret []TaxObject
		return ret
	}
	return o.Taxes
}

// GetTaxesOk returns a tuple with the Taxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeObject) GetTaxesOk() ([]TaxObject, bool) {
	if o == nil || IsNil(o.Taxes) {
		return nil, false
	}
	return o.Taxes, true
}

// HasTaxes returns a boolean if a field has been set.
func (o *ChargeObject) HasTaxes() bool {
	if o != nil && !IsNil(o.Taxes) {
		return true
	}

	return false
}

// SetTaxes gets a reference to the given []TaxObject and assigns it to the Taxes field.
func (o *ChargeObject) SetTaxes(v []TaxObject) {
	o.Taxes = v
}

func (o ChargeObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["lago_billable_metric_id"] = o.LagoBillableMetricId
	toSerialize["billable_metric_code"] = o.BillableMetricCode
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["charge_model"] = o.ChargeModel
	if !IsNil(o.PayInAdvance) {
		toSerialize["pay_in_advance"] = o.PayInAdvance
	}
	if !IsNil(o.Invoiceable) {
		toSerialize["invoiceable"] = o.Invoiceable
	}
	if !IsNil(o.Prorated) {
		toSerialize["prorated"] = o.Prorated
	}
	if !IsNil(o.MinAmountCents) {
		toSerialize["min_amount_cents"] = o.MinAmountCents
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.GroupProperties) {
		toSerialize["group_properties"] = o.GroupProperties
	}
	if !IsNil(o.Taxes) {
		toSerialize["taxes"] = o.Taxes
	}
	return toSerialize, nil
}

func (o *ChargeObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"lago_billable_metric_id",
		"billable_metric_code",
		"created_at",
		"charge_model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeObject := _ChargeObject{}

	err = json.Unmarshal(bytes, &varChargeObject)

	if err != nil {
		return err
	}

	*o = ChargeObject(varChargeObject)

	return err
}

type NullableChargeObject struct {
	value *ChargeObject
	isSet bool
}

func (v NullableChargeObject) Get() *ChargeObject {
	return v.value
}

func (v *NullableChargeObject) Set(val *ChargeObject) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeObject) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeObject(val *ChargeObject) *NullableChargeObject {
	return &NullableChargeObject{value: val, isSet: true}
}

func (v NullableChargeObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


