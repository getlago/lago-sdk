/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the WalletObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletObject{}

// WalletObject struct for WalletObject
type WalletObject struct {
	// Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system.
	LagoId string `json:"lago_id"`
	// Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer’s record within the Lago system.
	LagoCustomerId string `json:"lago_customer_id"`
	// The customer external unique identifier (provided by your own application)
	ExternalCustomerId string `json:"external_customer_id"`
	// The status of the wallet. Possible values are `active` or `terminated`.
	Status string `json:"status"`
	Currency Currency `json:"currency"`
	// The name of the wallet.
	Name *string `json:"name,omitempty"`
	// The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
	RateAmount string `json:"rate_amount"`
	// The current wallet balance expressed in credits.
	CreditsBalance string `json:"credits_balance"`
	// The current wallet balance expressed in cents.
	BalanceCents int32 `json:"balance_cents"`
	// The number of consumed credits.
	ConsumedCredits string `json:"consumed_credits"`
	// The date of the wallet creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
	CreatedAt time.Time `json:"created_at"`
	// The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
	ExpirationAt NullableTime `json:"expiration_at,omitempty"`
	// The date and time of the last balance top-up. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
	LastBalanceSyncAt NullableTime `json:"last_balance_sync_at,omitempty"`
	// The date and time of the last credits consumption. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
	LastConsumedCreditAt NullableTime `json:"last_consumed_credit_at,omitempty"`
	// The date of terminaison of the wallet. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
	TerminatedAt NullableTime `json:"terminated_at,omitempty"`
}

type _WalletObject WalletObject

// NewWalletObject instantiates a new WalletObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletObject(lagoId string, lagoCustomerId string, externalCustomerId string, status string, currency Currency, rateAmount string, creditsBalance string, balanceCents int32, consumedCredits string, createdAt time.Time) *WalletObject {
	this := WalletObject{}
	this.LagoId = lagoId
	this.LagoCustomerId = lagoCustomerId
	this.ExternalCustomerId = externalCustomerId
	this.Status = status
	this.Currency = currency
	this.RateAmount = rateAmount
	this.CreditsBalance = creditsBalance
	this.BalanceCents = balanceCents
	this.ConsumedCredits = consumedCredits
	this.CreatedAt = createdAt
	return &this
}

// NewWalletObjectWithDefaults instantiates a new WalletObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletObjectWithDefaults() *WalletObject {
	this := WalletObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *WalletObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *WalletObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetLagoCustomerId returns the LagoCustomerId field value
func (o *WalletObject) GetLagoCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoCustomerId
}

// GetLagoCustomerIdOk returns a tuple with the LagoCustomerId field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetLagoCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoCustomerId, true
}

// SetLagoCustomerId sets field value
func (o *WalletObject) SetLagoCustomerId(v string) {
	o.LagoCustomerId = v
}

// GetExternalCustomerId returns the ExternalCustomerId field value
func (o *WalletObject) GetExternalCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalCustomerId
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalCustomerId, true
}

// SetExternalCustomerId sets field value
func (o *WalletObject) SetExternalCustomerId(v string) {
	o.ExternalCustomerId = v
}

// GetStatus returns the Status field value
func (o *WalletObject) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WalletObject) SetStatus(v string) {
	o.Status = v
}

// GetCurrency returns the Currency field value
func (o *WalletObject) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *WalletObject) SetCurrency(v Currency) {
	o.Currency = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WalletObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WalletObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WalletObject) SetName(v string) {
	o.Name = &v
}

// GetRateAmount returns the RateAmount field value
func (o *WalletObject) GetRateAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RateAmount
}

// GetRateAmountOk returns a tuple with the RateAmount field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetRateAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RateAmount, true
}

// SetRateAmount sets field value
func (o *WalletObject) SetRateAmount(v string) {
	o.RateAmount = v
}

// GetCreditsBalance returns the CreditsBalance field value
func (o *WalletObject) GetCreditsBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditsBalance
}

// GetCreditsBalanceOk returns a tuple with the CreditsBalance field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetCreditsBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsBalance, true
}

// SetCreditsBalance sets field value
func (o *WalletObject) SetCreditsBalance(v string) {
	o.CreditsBalance = v
}

// GetBalanceCents returns the BalanceCents field value
func (o *WalletObject) GetBalanceCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BalanceCents
}

// GetBalanceCentsOk returns a tuple with the BalanceCents field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetBalanceCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceCents, true
}

// SetBalanceCents sets field value
func (o *WalletObject) SetBalanceCents(v int32) {
	o.BalanceCents = v
}

// GetConsumedCredits returns the ConsumedCredits field value
func (o *WalletObject) GetConsumedCredits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumedCredits
}

// GetConsumedCreditsOk returns a tuple with the ConsumedCredits field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetConsumedCreditsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumedCredits, true
}

// SetConsumedCredits sets field value
func (o *WalletObject) SetConsumedCredits(v string) {
	o.ConsumedCredits = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WalletObject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WalletObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WalletObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetExpirationAt returns the ExpirationAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletObject) GetExpirationAt() time.Time {
	if o == nil || IsNil(o.ExpirationAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationAt.Get()
}

// GetExpirationAtOk returns a tuple with the ExpirationAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletObject) GetExpirationAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationAt.Get(), o.ExpirationAt.IsSet()
}

// HasExpirationAt returns a boolean if a field has been set.
func (o *WalletObject) HasExpirationAt() bool {
	if o != nil && o.ExpirationAt.IsSet() {
		return true
	}

	return false
}

// SetExpirationAt gets a reference to the given NullableTime and assigns it to the ExpirationAt field.
func (o *WalletObject) SetExpirationAt(v time.Time) {
	o.ExpirationAt.Set(&v)
}
// SetExpirationAtNil sets the value for ExpirationAt to be an explicit nil
func (o *WalletObject) SetExpirationAtNil() {
	o.ExpirationAt.Set(nil)
}

// UnsetExpirationAt ensures that no value is present for ExpirationAt, not even an explicit nil
func (o *WalletObject) UnsetExpirationAt() {
	o.ExpirationAt.Unset()
}

// GetLastBalanceSyncAt returns the LastBalanceSyncAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletObject) GetLastBalanceSyncAt() time.Time {
	if o == nil || IsNil(o.LastBalanceSyncAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastBalanceSyncAt.Get()
}

// GetLastBalanceSyncAtOk returns a tuple with the LastBalanceSyncAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletObject) GetLastBalanceSyncAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastBalanceSyncAt.Get(), o.LastBalanceSyncAt.IsSet()
}

// HasLastBalanceSyncAt returns a boolean if a field has been set.
func (o *WalletObject) HasLastBalanceSyncAt() bool {
	if o != nil && o.LastBalanceSyncAt.IsSet() {
		return true
	}

	return false
}

// SetLastBalanceSyncAt gets a reference to the given NullableTime and assigns it to the LastBalanceSyncAt field.
func (o *WalletObject) SetLastBalanceSyncAt(v time.Time) {
	o.LastBalanceSyncAt.Set(&v)
}
// SetLastBalanceSyncAtNil sets the value for LastBalanceSyncAt to be an explicit nil
func (o *WalletObject) SetLastBalanceSyncAtNil() {
	o.LastBalanceSyncAt.Set(nil)
}

// UnsetLastBalanceSyncAt ensures that no value is present for LastBalanceSyncAt, not even an explicit nil
func (o *WalletObject) UnsetLastBalanceSyncAt() {
	o.LastBalanceSyncAt.Unset()
}

// GetLastConsumedCreditAt returns the LastConsumedCreditAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletObject) GetLastConsumedCreditAt() time.Time {
	if o == nil || IsNil(o.LastConsumedCreditAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastConsumedCreditAt.Get()
}

// GetLastConsumedCreditAtOk returns a tuple with the LastConsumedCreditAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletObject) GetLastConsumedCreditAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastConsumedCreditAt.Get(), o.LastConsumedCreditAt.IsSet()
}

// HasLastConsumedCreditAt returns a boolean if a field has been set.
func (o *WalletObject) HasLastConsumedCreditAt() bool {
	if o != nil && o.LastConsumedCreditAt.IsSet() {
		return true
	}

	return false
}

// SetLastConsumedCreditAt gets a reference to the given NullableTime and assigns it to the LastConsumedCreditAt field.
func (o *WalletObject) SetLastConsumedCreditAt(v time.Time) {
	o.LastConsumedCreditAt.Set(&v)
}
// SetLastConsumedCreditAtNil sets the value for LastConsumedCreditAt to be an explicit nil
func (o *WalletObject) SetLastConsumedCreditAtNil() {
	o.LastConsumedCreditAt.Set(nil)
}

// UnsetLastConsumedCreditAt ensures that no value is present for LastConsumedCreditAt, not even an explicit nil
func (o *WalletObject) UnsetLastConsumedCreditAt() {
	o.LastConsumedCreditAt.Unset()
}

// GetTerminatedAt returns the TerminatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletObject) GetTerminatedAt() time.Time {
	if o == nil || IsNil(o.TerminatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TerminatedAt.Get()
}

// GetTerminatedAtOk returns a tuple with the TerminatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletObject) GetTerminatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TerminatedAt.Get(), o.TerminatedAt.IsSet()
}

// HasTerminatedAt returns a boolean if a field has been set.
func (o *WalletObject) HasTerminatedAt() bool {
	if o != nil && o.TerminatedAt.IsSet() {
		return true
	}

	return false
}

// SetTerminatedAt gets a reference to the given NullableTime and assigns it to the TerminatedAt field.
func (o *WalletObject) SetTerminatedAt(v time.Time) {
	o.TerminatedAt.Set(&v)
}
// SetTerminatedAtNil sets the value for TerminatedAt to be an explicit nil
func (o *WalletObject) SetTerminatedAtNil() {
	o.TerminatedAt.Set(nil)
}

// UnsetTerminatedAt ensures that no value is present for TerminatedAt, not even an explicit nil
func (o *WalletObject) UnsetTerminatedAt() {
	o.TerminatedAt.Unset()
}

func (o WalletObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["lago_customer_id"] = o.LagoCustomerId
	toSerialize["external_customer_id"] = o.ExternalCustomerId
	toSerialize["status"] = o.Status
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["rate_amount"] = o.RateAmount
	toSerialize["credits_balance"] = o.CreditsBalance
	toSerialize["balance_cents"] = o.BalanceCents
	toSerialize["consumed_credits"] = o.ConsumedCredits
	toSerialize["created_at"] = o.CreatedAt
	if o.ExpirationAt.IsSet() {
		toSerialize["expiration_at"] = o.ExpirationAt.Get()
	}
	if o.LastBalanceSyncAt.IsSet() {
		toSerialize["last_balance_sync_at"] = o.LastBalanceSyncAt.Get()
	}
	if o.LastConsumedCreditAt.IsSet() {
		toSerialize["last_consumed_credit_at"] = o.LastConsumedCreditAt.Get()
	}
	if o.TerminatedAt.IsSet() {
		toSerialize["terminated_at"] = o.TerminatedAt.Get()
	}
	return toSerialize, nil
}

func (o *WalletObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"lago_customer_id",
		"external_customer_id",
		"status",
		"currency",
		"rate_amount",
		"credits_balance",
		"balance_cents",
		"consumed_credits",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletObject := _WalletObject{}

	err = json.Unmarshal(bytes, &varWalletObject)

	if err != nil {
		return err
	}

	*o = WalletObject(varWalletObject)

	return err
}

type NullableWalletObject struct {
	value *WalletObject
	isSet bool
}

func (v NullableWalletObject) Get() *WalletObject {
	return v.value
}

func (v *NullableWalletObject) Set(val *WalletObject) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletObject) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletObject(val *WalletObject) *NullableWalletObject {
	return &NullableWalletObject{value: val, isSet: true}
}

func (v NullableWalletObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


