/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreditNoteEstimateInputCreditNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditNoteEstimateInputCreditNote{}

// CreditNoteEstimateInputCreditNote struct for CreditNoteEstimateInputCreditNote
type CreditNoteEstimateInputCreditNote struct {
	// The invoice unique identifier, created by Lago.
	InvoiceId string `json:"invoice_id"`
	// The list of credit noteâ€™s items.
	Items []CreditNoteEstimateInputCreditNoteItemsInner `json:"items"`
}

type _CreditNoteEstimateInputCreditNote CreditNoteEstimateInputCreditNote

// NewCreditNoteEstimateInputCreditNote instantiates a new CreditNoteEstimateInputCreditNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditNoteEstimateInputCreditNote(invoiceId string, items []CreditNoteEstimateInputCreditNoteItemsInner) *CreditNoteEstimateInputCreditNote {
	this := CreditNoteEstimateInputCreditNote{}
	this.InvoiceId = invoiceId
	this.Items = items
	return &this
}

// NewCreditNoteEstimateInputCreditNoteWithDefaults instantiates a new CreditNoteEstimateInputCreditNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditNoteEstimateInputCreditNoteWithDefaults() *CreditNoteEstimateInputCreditNote {
	this := CreditNoteEstimateInputCreditNote{}
	return &this
}

// GetInvoiceId returns the InvoiceId field value
func (o *CreditNoteEstimateInputCreditNote) GetInvoiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value
// and a boolean to check if the value has been set.
func (o *CreditNoteEstimateInputCreditNote) GetInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceId, true
}

// SetInvoiceId sets field value
func (o *CreditNoteEstimateInputCreditNote) SetInvoiceId(v string) {
	o.InvoiceId = v
}

// GetItems returns the Items field value
func (o *CreditNoteEstimateInputCreditNote) GetItems() []CreditNoteEstimateInputCreditNoteItemsInner {
	if o == nil {
		var ret []CreditNoteEstimateInputCreditNoteItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CreditNoteEstimateInputCreditNote) GetItemsOk() ([]CreditNoteEstimateInputCreditNoteItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CreditNoteEstimateInputCreditNote) SetItems(v []CreditNoteEstimateInputCreditNoteItemsInner) {
	o.Items = v
}

func (o CreditNoteEstimateInputCreditNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditNoteEstimateInputCreditNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invoice_id"] = o.InvoiceId
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CreditNoteEstimateInputCreditNote) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invoice_id",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditNoteEstimateInputCreditNote := _CreditNoteEstimateInputCreditNote{}

	err = json.Unmarshal(bytes, &varCreditNoteEstimateInputCreditNote)

	if err != nil {
		return err
	}

	*o = CreditNoteEstimateInputCreditNote(varCreditNoteEstimateInputCreditNote)

	return err
}

type NullableCreditNoteEstimateInputCreditNote struct {
	value *CreditNoteEstimateInputCreditNote
	isSet bool
}

func (v NullableCreditNoteEstimateInputCreditNote) Get() *CreditNoteEstimateInputCreditNote {
	return v.value
}

func (v *NullableCreditNoteEstimateInputCreditNote) Set(val *CreditNoteEstimateInputCreditNote) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNoteEstimateInputCreditNote) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNoteEstimateInputCreditNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNoteEstimateInputCreditNote(val *CreditNoteEstimateInputCreditNote) *NullableCreditNoteEstimateInputCreditNote {
	return &NullableCreditNoteEstimateInputCreditNote{value: val, isSet: true}
}

func (v NullableCreditNoteEstimateInputCreditNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNoteEstimateInputCreditNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


