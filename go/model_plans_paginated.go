/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PlansPaginated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlansPaginated{}

// PlansPaginated struct for PlansPaginated
type PlansPaginated struct {
	Plans []PlanObject `json:"plans"`
	Meta PaginationMeta `json:"meta"`
}

type _PlansPaginated PlansPaginated

// NewPlansPaginated instantiates a new PlansPaginated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlansPaginated(plans []PlanObject, meta PaginationMeta) *PlansPaginated {
	this := PlansPaginated{}
	this.Plans = plans
	this.Meta = meta
	return &this
}

// NewPlansPaginatedWithDefaults instantiates a new PlansPaginated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlansPaginatedWithDefaults() *PlansPaginated {
	this := PlansPaginated{}
	return &this
}

// GetPlans returns the Plans field value
func (o *PlansPaginated) GetPlans() []PlanObject {
	if o == nil {
		var ret []PlanObject
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *PlansPaginated) GetPlansOk() ([]PlanObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *PlansPaginated) SetPlans(v []PlanObject) {
	o.Plans = v
}

// GetMeta returns the Meta field value
func (o *PlansPaginated) GetMeta() PaginationMeta {
	if o == nil {
		var ret PaginationMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *PlansPaginated) GetMetaOk() (*PaginationMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *PlansPaginated) SetMeta(v PaginationMeta) {
	o.Meta = v
}

func (o PlansPaginated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlansPaginated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plans"] = o.Plans
	toSerialize["meta"] = o.Meta
	return toSerialize, nil
}

func (o *PlansPaginated) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plans",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlansPaginated := _PlansPaginated{}

	err = json.Unmarshal(bytes, &varPlansPaginated)

	if err != nil {
		return err
	}

	*o = PlansPaginated(varPlansPaginated)

	return err
}

type NullablePlansPaginated struct {
	value *PlansPaginated
	isSet bool
}

func (v NullablePlansPaginated) Get() *PlansPaginated {
	return v.value
}

func (v *NullablePlansPaginated) Set(val *PlansPaginated) {
	v.value = val
	v.isSet = true
}

func (v NullablePlansPaginated) IsSet() bool {
	return v.isSet
}

func (v *NullablePlansPaginated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlansPaginated(val *PlansPaginated) *NullablePlansPaginated {
	return &NullablePlansPaginated{value: val, isSet: true}
}

func (v NullablePlansPaginated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlansPaginated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


