/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InvoicedUsages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoicedUsages{}

// InvoicedUsages struct for InvoicedUsages
type InvoicedUsages struct {
	InvoicedUsages []InvoicedUsageObject `json:"invoiced_usages"`
}

type _InvoicedUsages InvoicedUsages

// NewInvoicedUsages instantiates a new InvoicedUsages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoicedUsages(invoicedUsages []InvoicedUsageObject) *InvoicedUsages {
	this := InvoicedUsages{}
	this.InvoicedUsages = invoicedUsages
	return &this
}

// NewInvoicedUsagesWithDefaults instantiates a new InvoicedUsages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoicedUsagesWithDefaults() *InvoicedUsages {
	this := InvoicedUsages{}
	return &this
}

// GetInvoicedUsages returns the InvoicedUsages field value
func (o *InvoicedUsages) GetInvoicedUsages() []InvoicedUsageObject {
	if o == nil {
		var ret []InvoicedUsageObject
		return ret
	}

	return o.InvoicedUsages
}

// GetInvoicedUsagesOk returns a tuple with the InvoicedUsages field value
// and a boolean to check if the value has been set.
func (o *InvoicedUsages) GetInvoicedUsagesOk() ([]InvoicedUsageObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvoicedUsages, true
}

// SetInvoicedUsages sets field value
func (o *InvoicedUsages) SetInvoicedUsages(v []InvoicedUsageObject) {
	o.InvoicedUsages = v
}

func (o InvoicedUsages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoicedUsages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invoiced_usages"] = o.InvoicedUsages
	return toSerialize, nil
}

func (o *InvoicedUsages) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invoiced_usages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoicedUsages := _InvoicedUsages{}

	err = json.Unmarshal(bytes, &varInvoicedUsages)

	if err != nil {
		return err
	}

	*o = InvoicedUsages(varInvoicedUsages)

	return err
}

type NullableInvoicedUsages struct {
	value *InvoicedUsages
	isSet bool
}

func (v NullableInvoicedUsages) Get() *InvoicedUsages {
	return v.value
}

func (v *NullableInvoicedUsages) Set(val *InvoicedUsages) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoicedUsages) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoicedUsages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoicedUsages(val *InvoicedUsages) *NullableInvoicedUsages {
	return &NullableInvoicedUsages{value: val, isSet: true}
}

func (v NullableInvoicedUsages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoicedUsages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


