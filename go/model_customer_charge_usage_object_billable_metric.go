/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerChargeUsageObjectBillableMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerChargeUsageObjectBillableMetric{}

// CustomerChargeUsageObjectBillableMetric The related billable metric object.
type CustomerChargeUsageObjectBillableMetric struct {
	// Unique identifier assigned to the billable metric within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the billable metricâ€™s record within the Lago system.
	LagoId string `json:"lago_id"`
	// The name of the billable metric used for this charge.
	Name string `json:"name"`
	// The code of the billable metric used for this charge.
	Code string `json:"code"`
	// The aggregation type of the billable metric used for this charge. Possible values are `count_agg`, `sum_agg`, `max_agg` or `unique_count_agg`.
	AggregationType string `json:"aggregation_type"`
}

type _CustomerChargeUsageObjectBillableMetric CustomerChargeUsageObjectBillableMetric

// NewCustomerChargeUsageObjectBillableMetric instantiates a new CustomerChargeUsageObjectBillableMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerChargeUsageObjectBillableMetric(lagoId string, name string, code string, aggregationType string) *CustomerChargeUsageObjectBillableMetric {
	this := CustomerChargeUsageObjectBillableMetric{}
	this.LagoId = lagoId
	this.Name = name
	this.Code = code
	this.AggregationType = aggregationType
	return &this
}

// NewCustomerChargeUsageObjectBillableMetricWithDefaults instantiates a new CustomerChargeUsageObjectBillableMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerChargeUsageObjectBillableMetricWithDefaults() *CustomerChargeUsageObjectBillableMetric {
	this := CustomerChargeUsageObjectBillableMetric{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *CustomerChargeUsageObjectBillableMetric) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *CustomerChargeUsageObjectBillableMetric) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *CustomerChargeUsageObjectBillableMetric) SetLagoId(v string) {
	o.LagoId = v
}

// GetName returns the Name field value
func (o *CustomerChargeUsageObjectBillableMetric) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomerChargeUsageObjectBillableMetric) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomerChargeUsageObjectBillableMetric) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *CustomerChargeUsageObjectBillableMetric) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CustomerChargeUsageObjectBillableMetric) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CustomerChargeUsageObjectBillableMetric) SetCode(v string) {
	o.Code = v
}

// GetAggregationType returns the AggregationType field value
func (o *CustomerChargeUsageObjectBillableMetric) GetAggregationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *CustomerChargeUsageObjectBillableMetric) GetAggregationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *CustomerChargeUsageObjectBillableMetric) SetAggregationType(v string) {
	o.AggregationType = v
}

func (o CustomerChargeUsageObjectBillableMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerChargeUsageObjectBillableMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["aggregation_type"] = o.AggregationType
	return toSerialize, nil
}

func (o *CustomerChargeUsageObjectBillableMetric) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"name",
		"code",
		"aggregation_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerChargeUsageObjectBillableMetric := _CustomerChargeUsageObjectBillableMetric{}

	err = json.Unmarshal(bytes, &varCustomerChargeUsageObjectBillableMetric)

	if err != nil {
		return err
	}

	*o = CustomerChargeUsageObjectBillableMetric(varCustomerChargeUsageObjectBillableMetric)

	return err
}

type NullableCustomerChargeUsageObjectBillableMetric struct {
	value *CustomerChargeUsageObjectBillableMetric
	isSet bool
}

func (v NullableCustomerChargeUsageObjectBillableMetric) Get() *CustomerChargeUsageObjectBillableMetric {
	return v.value
}

func (v *NullableCustomerChargeUsageObjectBillableMetric) Set(val *CustomerChargeUsageObjectBillableMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerChargeUsageObjectBillableMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerChargeUsageObjectBillableMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerChargeUsageObjectBillableMetric(val *CustomerChargeUsageObjectBillableMetric) *NullableCustomerChargeUsageObjectBillableMetric {
	return &NullableCustomerChargeUsageObjectBillableMetric{value: val, isSet: true}
}

func (v NullableCustomerChargeUsageObjectBillableMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerChargeUsageObjectBillableMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


