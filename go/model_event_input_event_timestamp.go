/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// EventInputEventTimestamp This field captures the Unix timestamp in seconds indicating the occurrence of the event in Coordinated Universal Time (UTC). If this timestamp is not provided, the API will automatically set it to the time of event reception. You can also provide miliseconds precision by appending decimals to the timestamp. 
type EventInputEventTimestamp struct {
	int32 *int32
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EventInputEventTimestamp) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into int32
	err = json.Unmarshal(data, &dst.int32);
	if err == nil {
		jsonint32, _ := json.Marshal(dst.int32)
		if string(jsonint32) == "{}" { // empty struct
			dst.int32 = nil
		} else {
			return nil // data stored in dst.int32, return on the first match
		}
	} else {
		dst.int32 = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(EventInputEventTimestamp)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EventInputEventTimestamp) MarshalJSON() ([]byte, error) {
	if src.int32 != nil {
		return json.Marshal(&src.int32)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableEventInputEventTimestamp struct {
	value *EventInputEventTimestamp
	isSet bool
}

func (v NullableEventInputEventTimestamp) Get() *EventInputEventTimestamp {
	return v.value
}

func (v *NullableEventInputEventTimestamp) Set(val *EventInputEventTimestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInputEventTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInputEventTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInputEventTimestamp(val *EventInputEventTimestamp) *NullableEventInputEventTimestamp {
	return &NullableEventInputEventTimestamp{value: val, isSet: true}
}

func (v NullableEventInputEventTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInputEventTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


