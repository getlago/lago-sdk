/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the WalletCreateInputWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletCreateInputWallet{}

// WalletCreateInputWallet struct for WalletCreateInputWallet
type WalletCreateInputWallet struct {
	// The name of the wallet.
	Name *string `json:"name,omitempty"`
	// The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
	RateAmount string `json:"rate_amount"`
	Currency Currency `json:"currency"`
	// The number of paid credits. Required only if there is no granted credits.
	PaidCredits NullableString `json:"paid_credits,omitempty"`
	// The number of free granted credits. Required only if there is no paid credits.
	GrantedCredits NullableString `json:"granted_credits,omitempty"`
	// The customer external unique identifier (provided by your own application)
	ExternalCustomerId string `json:"external_customer_id"`
	// The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
	ExpirationAt NullableTime `json:"expiration_at,omitempty"`
}

type _WalletCreateInputWallet WalletCreateInputWallet

// NewWalletCreateInputWallet instantiates a new WalletCreateInputWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletCreateInputWallet(rateAmount string, currency Currency, externalCustomerId string) *WalletCreateInputWallet {
	this := WalletCreateInputWallet{}
	this.RateAmount = rateAmount
	this.Currency = currency
	this.ExternalCustomerId = externalCustomerId
	return &this
}

// NewWalletCreateInputWalletWithDefaults instantiates a new WalletCreateInputWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletCreateInputWalletWithDefaults() *WalletCreateInputWallet {
	this := WalletCreateInputWallet{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WalletCreateInputWallet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletCreateInputWallet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WalletCreateInputWallet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WalletCreateInputWallet) SetName(v string) {
	o.Name = &v
}

// GetRateAmount returns the RateAmount field value
func (o *WalletCreateInputWallet) GetRateAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RateAmount
}

// GetRateAmountOk returns a tuple with the RateAmount field value
// and a boolean to check if the value has been set.
func (o *WalletCreateInputWallet) GetRateAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RateAmount, true
}

// SetRateAmount sets field value
func (o *WalletCreateInputWallet) SetRateAmount(v string) {
	o.RateAmount = v
}

// GetCurrency returns the Currency field value
func (o *WalletCreateInputWallet) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *WalletCreateInputWallet) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *WalletCreateInputWallet) SetCurrency(v Currency) {
	o.Currency = v
}

// GetPaidCredits returns the PaidCredits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletCreateInputWallet) GetPaidCredits() string {
	if o == nil || IsNil(o.PaidCredits.Get()) {
		var ret string
		return ret
	}
	return *o.PaidCredits.Get()
}

// GetPaidCreditsOk returns a tuple with the PaidCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletCreateInputWallet) GetPaidCreditsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaidCredits.Get(), o.PaidCredits.IsSet()
}

// HasPaidCredits returns a boolean if a field has been set.
func (o *WalletCreateInputWallet) HasPaidCredits() bool {
	if o != nil && o.PaidCredits.IsSet() {
		return true
	}

	return false
}

// SetPaidCredits gets a reference to the given NullableString and assigns it to the PaidCredits field.
func (o *WalletCreateInputWallet) SetPaidCredits(v string) {
	o.PaidCredits.Set(&v)
}
// SetPaidCreditsNil sets the value for PaidCredits to be an explicit nil
func (o *WalletCreateInputWallet) SetPaidCreditsNil() {
	o.PaidCredits.Set(nil)
}

// UnsetPaidCredits ensures that no value is present for PaidCredits, not even an explicit nil
func (o *WalletCreateInputWallet) UnsetPaidCredits() {
	o.PaidCredits.Unset()
}

// GetGrantedCredits returns the GrantedCredits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletCreateInputWallet) GetGrantedCredits() string {
	if o == nil || IsNil(o.GrantedCredits.Get()) {
		var ret string
		return ret
	}
	return *o.GrantedCredits.Get()
}

// GetGrantedCreditsOk returns a tuple with the GrantedCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletCreateInputWallet) GetGrantedCreditsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrantedCredits.Get(), o.GrantedCredits.IsSet()
}

// HasGrantedCredits returns a boolean if a field has been set.
func (o *WalletCreateInputWallet) HasGrantedCredits() bool {
	if o != nil && o.GrantedCredits.IsSet() {
		return true
	}

	return false
}

// SetGrantedCredits gets a reference to the given NullableString and assigns it to the GrantedCredits field.
func (o *WalletCreateInputWallet) SetGrantedCredits(v string) {
	o.GrantedCredits.Set(&v)
}
// SetGrantedCreditsNil sets the value for GrantedCredits to be an explicit nil
func (o *WalletCreateInputWallet) SetGrantedCreditsNil() {
	o.GrantedCredits.Set(nil)
}

// UnsetGrantedCredits ensures that no value is present for GrantedCredits, not even an explicit nil
func (o *WalletCreateInputWallet) UnsetGrantedCredits() {
	o.GrantedCredits.Unset()
}

// GetExternalCustomerId returns the ExternalCustomerId field value
func (o *WalletCreateInputWallet) GetExternalCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalCustomerId
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value
// and a boolean to check if the value has been set.
func (o *WalletCreateInputWallet) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalCustomerId, true
}

// SetExternalCustomerId sets field value
func (o *WalletCreateInputWallet) SetExternalCustomerId(v string) {
	o.ExternalCustomerId = v
}

// GetExpirationAt returns the ExpirationAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletCreateInputWallet) GetExpirationAt() time.Time {
	if o == nil || IsNil(o.ExpirationAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationAt.Get()
}

// GetExpirationAtOk returns a tuple with the ExpirationAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletCreateInputWallet) GetExpirationAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationAt.Get(), o.ExpirationAt.IsSet()
}

// HasExpirationAt returns a boolean if a field has been set.
func (o *WalletCreateInputWallet) HasExpirationAt() bool {
	if o != nil && o.ExpirationAt.IsSet() {
		return true
	}

	return false
}

// SetExpirationAt gets a reference to the given NullableTime and assigns it to the ExpirationAt field.
func (o *WalletCreateInputWallet) SetExpirationAt(v time.Time) {
	o.ExpirationAt.Set(&v)
}
// SetExpirationAtNil sets the value for ExpirationAt to be an explicit nil
func (o *WalletCreateInputWallet) SetExpirationAtNil() {
	o.ExpirationAt.Set(nil)
}

// UnsetExpirationAt ensures that no value is present for ExpirationAt, not even an explicit nil
func (o *WalletCreateInputWallet) UnsetExpirationAt() {
	o.ExpirationAt.Unset()
}

func (o WalletCreateInputWallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletCreateInputWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["rate_amount"] = o.RateAmount
	toSerialize["currency"] = o.Currency
	if o.PaidCredits.IsSet() {
		toSerialize["paid_credits"] = o.PaidCredits.Get()
	}
	if o.GrantedCredits.IsSet() {
		toSerialize["granted_credits"] = o.GrantedCredits.Get()
	}
	toSerialize["external_customer_id"] = o.ExternalCustomerId
	if o.ExpirationAt.IsSet() {
		toSerialize["expiration_at"] = o.ExpirationAt.Get()
	}
	return toSerialize, nil
}

func (o *WalletCreateInputWallet) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rate_amount",
		"currency",
		"external_customer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletCreateInputWallet := _WalletCreateInputWallet{}

	err = json.Unmarshal(bytes, &varWalletCreateInputWallet)

	if err != nil {
		return err
	}

	*o = WalletCreateInputWallet(varWalletCreateInputWallet)

	return err
}

type NullableWalletCreateInputWallet struct {
	value *WalletCreateInputWallet
	isSet bool
}

func (v NullableWalletCreateInputWallet) Get() *WalletCreateInputWallet {
	return v.value
}

func (v *NullableWalletCreateInputWallet) Set(val *WalletCreateInputWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletCreateInputWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletCreateInputWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletCreateInputWallet(val *WalletCreateInputWallet) *NullableWalletCreateInputWallet {
	return &NullableWalletCreateInputWallet{value: val, isSet: true}
}

func (v NullableWalletCreateInputWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletCreateInputWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


