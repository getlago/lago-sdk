/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionUpdateInputSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionUpdateInputSubscription{}

// SubscriptionUpdateInputSubscription struct for SubscriptionUpdateInputSubscription
type SubscriptionUpdateInputSubscription struct {
	// The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
	Name NullableString `json:"name,omitempty"`
	// The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
	EndingAt *time.Time `json:"ending_at,omitempty"`
	// The start date and time of the subscription. This field can only be modified for pending subscriptions that have not yet started. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
	SubscriptionAt *time.Time `json:"subscription_at,omitempty"`
	PlanOverrides *PlanOverridesObject `json:"plan_overrides,omitempty"`
}

// NewSubscriptionUpdateInputSubscription instantiates a new SubscriptionUpdateInputSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionUpdateInputSubscription() *SubscriptionUpdateInputSubscription {
	this := SubscriptionUpdateInputSubscription{}
	return &this
}

// NewSubscriptionUpdateInputSubscriptionWithDefaults instantiates a new SubscriptionUpdateInputSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionUpdateInputSubscriptionWithDefaults() *SubscriptionUpdateInputSubscription {
	this := SubscriptionUpdateInputSubscription{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionUpdateInputSubscription) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionUpdateInputSubscription) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SubscriptionUpdateInputSubscription) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SubscriptionUpdateInputSubscription) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SubscriptionUpdateInputSubscription) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SubscriptionUpdateInputSubscription) UnsetName() {
	o.Name.Unset()
}

// GetEndingAt returns the EndingAt field value if set, zero value otherwise.
func (o *SubscriptionUpdateInputSubscription) GetEndingAt() time.Time {
	if o == nil || IsNil(o.EndingAt) {
		var ret time.Time
		return ret
	}
	return *o.EndingAt
}

// GetEndingAtOk returns a tuple with the EndingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateInputSubscription) GetEndingAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndingAt) {
		return nil, false
	}
	return o.EndingAt, true
}

// HasEndingAt returns a boolean if a field has been set.
func (o *SubscriptionUpdateInputSubscription) HasEndingAt() bool {
	if o != nil && !IsNil(o.EndingAt) {
		return true
	}

	return false
}

// SetEndingAt gets a reference to the given time.Time and assigns it to the EndingAt field.
func (o *SubscriptionUpdateInputSubscription) SetEndingAt(v time.Time) {
	o.EndingAt = &v
}

// GetSubscriptionAt returns the SubscriptionAt field value if set, zero value otherwise.
func (o *SubscriptionUpdateInputSubscription) GetSubscriptionAt() time.Time {
	if o == nil || IsNil(o.SubscriptionAt) {
		var ret time.Time
		return ret
	}
	return *o.SubscriptionAt
}

// GetSubscriptionAtOk returns a tuple with the SubscriptionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateInputSubscription) GetSubscriptionAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubscriptionAt) {
		return nil, false
	}
	return o.SubscriptionAt, true
}

// HasSubscriptionAt returns a boolean if a field has been set.
func (o *SubscriptionUpdateInputSubscription) HasSubscriptionAt() bool {
	if o != nil && !IsNil(o.SubscriptionAt) {
		return true
	}

	return false
}

// SetSubscriptionAt gets a reference to the given time.Time and assigns it to the SubscriptionAt field.
func (o *SubscriptionUpdateInputSubscription) SetSubscriptionAt(v time.Time) {
	o.SubscriptionAt = &v
}

// GetPlanOverrides returns the PlanOverrides field value if set, zero value otherwise.
func (o *SubscriptionUpdateInputSubscription) GetPlanOverrides() PlanOverridesObject {
	if o == nil || IsNil(o.PlanOverrides) {
		var ret PlanOverridesObject
		return ret
	}
	return *o.PlanOverrides
}

// GetPlanOverridesOk returns a tuple with the PlanOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionUpdateInputSubscription) GetPlanOverridesOk() (*PlanOverridesObject, bool) {
	if o == nil || IsNil(o.PlanOverrides) {
		return nil, false
	}
	return o.PlanOverrides, true
}

// HasPlanOverrides returns a boolean if a field has been set.
func (o *SubscriptionUpdateInputSubscription) HasPlanOverrides() bool {
	if o != nil && !IsNil(o.PlanOverrides) {
		return true
	}

	return false
}

// SetPlanOverrides gets a reference to the given PlanOverridesObject and assigns it to the PlanOverrides field.
func (o *SubscriptionUpdateInputSubscription) SetPlanOverrides(v PlanOverridesObject) {
	o.PlanOverrides = &v
}

func (o SubscriptionUpdateInputSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionUpdateInputSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.EndingAt) {
		toSerialize["ending_at"] = o.EndingAt
	}
	if !IsNil(o.SubscriptionAt) {
		toSerialize["subscription_at"] = o.SubscriptionAt
	}
	if !IsNil(o.PlanOverrides) {
		toSerialize["plan_overrides"] = o.PlanOverrides
	}
	return toSerialize, nil
}

type NullableSubscriptionUpdateInputSubscription struct {
	value *SubscriptionUpdateInputSubscription
	isSet bool
}

func (v NullableSubscriptionUpdateInputSubscription) Get() *SubscriptionUpdateInputSubscription {
	return v.value
}

func (v *NullableSubscriptionUpdateInputSubscription) Set(val *SubscriptionUpdateInputSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionUpdateInputSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionUpdateInputSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionUpdateInputSubscription(val *SubscriptionUpdateInputSubscription) *NullableSubscriptionUpdateInputSubscription {
	return &NullableSubscriptionUpdateInputSubscription{value: val, isSet: true}
}

func (v NullableSubscriptionUpdateInputSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionUpdateInputSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


