/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InvoicedUsageObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvoicedUsageObject{}

// InvoicedUsageObject struct for InvoicedUsageObject
type InvoicedUsageObject struct {
	// Identifies the month to analyze revenue.
	Month string `json:"month"`
	// The code of the usage-based billable metrics.
	Code *string `json:"code,omitempty"`
	// The total amount of revenue for a period, expressed in cents.
	AmountCents int32 `json:"amount_cents"`
	Currency Currency `json:"currency"`
}

type _InvoicedUsageObject InvoicedUsageObject

// NewInvoicedUsageObject instantiates a new InvoicedUsageObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoicedUsageObject(month string, amountCents int32, currency Currency) *InvoicedUsageObject {
	this := InvoicedUsageObject{}
	this.Month = month
	this.AmountCents = amountCents
	this.Currency = currency
	return &this
}

// NewInvoicedUsageObjectWithDefaults instantiates a new InvoicedUsageObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoicedUsageObjectWithDefaults() *InvoicedUsageObject {
	this := InvoicedUsageObject{}
	return &this
}

// GetMonth returns the Month field value
func (o *InvoicedUsageObject) GetMonth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *InvoicedUsageObject) GetMonthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *InvoicedUsageObject) SetMonth(v string) {
	o.Month = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InvoicedUsageObject) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoicedUsageObject) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InvoicedUsageObject) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InvoicedUsageObject) SetCode(v string) {
	o.Code = &v
}

// GetAmountCents returns the AmountCents field value
func (o *InvoicedUsageObject) GetAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value
// and a boolean to check if the value has been set.
func (o *InvoicedUsageObject) GetAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCents, true
}

// SetAmountCents sets field value
func (o *InvoicedUsageObject) SetAmountCents(v int32) {
	o.AmountCents = v
}

// GetCurrency returns the Currency field value
func (o *InvoicedUsageObject) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *InvoicedUsageObject) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *InvoicedUsageObject) SetCurrency(v Currency) {
	o.Currency = v
}

func (o InvoicedUsageObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvoicedUsageObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["month"] = o.Month
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["amount_cents"] = o.AmountCents
	toSerialize["currency"] = o.Currency
	return toSerialize, nil
}

func (o *InvoicedUsageObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
		"amount_cents",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvoicedUsageObject := _InvoicedUsageObject{}

	err = json.Unmarshal(bytes, &varInvoicedUsageObject)

	if err != nil {
		return err
	}

	*o = InvoicedUsageObject(varInvoicedUsageObject)

	return err
}

type NullableInvoicedUsageObject struct {
	value *InvoicedUsageObject
	isSet bool
}

func (v NullableInvoicedUsageObject) Get() *InvoicedUsageObject {
	return v.value
}

func (v *NullableInvoicedUsageObject) Set(val *InvoicedUsageObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoicedUsageObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoicedUsageObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoicedUsageObject(val *InvoicedUsageObject) *NullableInvoicedUsageObject {
	return &NullableInvoicedUsageObject{value: val, isSet: true}
}

func (v NullableInvoicedUsageObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoicedUsageObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


