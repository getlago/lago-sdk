/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
)

// checks if the EventBatchInputEventProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventBatchInputEventProperties{}

// EventBatchInputEventProperties This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required.
type EventBatchInputEventProperties struct {
	// The `operation_type` field is only necessary when adding or removing a specific unit when the targeted billable metric adopts a `unique_count_agg` aggregation method. In other cases, the `operation_type` field is not required. The valid values for the `operation_type` field are `add` or `remove`, which indicate whether the unit is being added or removed from the unique count aggregation, respectively.
	OperationType *string `json:"operation_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventBatchInputEventProperties EventBatchInputEventProperties

// NewEventBatchInputEventProperties instantiates a new EventBatchInputEventProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventBatchInputEventProperties() *EventBatchInputEventProperties {
	this := EventBatchInputEventProperties{}
	return &this
}

// NewEventBatchInputEventPropertiesWithDefaults instantiates a new EventBatchInputEventProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventBatchInputEventPropertiesWithDefaults() *EventBatchInputEventProperties {
	this := EventBatchInputEventProperties{}
	return &this
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *EventBatchInputEventProperties) GetOperationType() string {
	if o == nil || IsNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBatchInputEventProperties) GetOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *EventBatchInputEventProperties) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *EventBatchInputEventProperties) SetOperationType(v string) {
	o.OperationType = &v
}

func (o EventBatchInputEventProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventBatchInputEventProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperationType) {
		toSerialize["operation_type"] = o.OperationType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventBatchInputEventProperties) UnmarshalJSON(bytes []byte) (err error) {
	varEventBatchInputEventProperties := _EventBatchInputEventProperties{}

	err = json.Unmarshal(bytes, &varEventBatchInputEventProperties)

	if err != nil {
		return err
	}

	*o = EventBatchInputEventProperties(varEventBatchInputEventProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "operation_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventBatchInputEventProperties struct {
	value *EventBatchInputEventProperties
	isSet bool
}

func (v NullableEventBatchInputEventProperties) Get() *EventBatchInputEventProperties {
	return v.value
}

func (v *NullableEventBatchInputEventProperties) Set(val *EventBatchInputEventProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableEventBatchInputEventProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableEventBatchInputEventProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventBatchInputEventProperties(val *EventBatchInputEventProperties) *NullableEventBatchInputEventProperties {
	return &NullableEventBatchInputEventProperties{value: val, isSet: true}
}

func (v NullableEventBatchInputEventProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventBatchInputEventProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


