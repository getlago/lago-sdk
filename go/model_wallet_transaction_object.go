/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the WalletTransactionObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletTransactionObject{}

// WalletTransactionObject struct for WalletTransactionObject
type WalletTransactionObject struct {
	// Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction’s record within the Lago system.
	LagoId string `json:"lago_id"`
	// Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet’s record within the Lago system.
	LagoWalletId string `json:"lago_wallet_id"`
	// The status of the wallet transaction. Possible values are `pending` or `settled`.
	Status string `json:"status"`
	// The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).
	TransactionType string `json:"transaction_type"`
	// The amount of credits based on the rate and the currency.
	Amount string `json:"amount"`
	// The number of credits used in the wallet transaction.
	CreditAmount string `json:"credit_amount"`
	// The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
	SettledAt *time.Time `json:"settled_at,omitempty"`
	// The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
	CreatedAt time.Time `json:"created_at"`
}

type _WalletTransactionObject WalletTransactionObject

// NewWalletTransactionObject instantiates a new WalletTransactionObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletTransactionObject(lagoId string, lagoWalletId string, status string, transactionType string, amount string, creditAmount string, createdAt time.Time) *WalletTransactionObject {
	this := WalletTransactionObject{}
	this.LagoId = lagoId
	this.LagoWalletId = lagoWalletId
	this.Status = status
	this.TransactionType = transactionType
	this.Amount = amount
	this.CreditAmount = creditAmount
	this.CreatedAt = createdAt
	return &this
}

// NewWalletTransactionObjectWithDefaults instantiates a new WalletTransactionObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletTransactionObjectWithDefaults() *WalletTransactionObject {
	this := WalletTransactionObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *WalletTransactionObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *WalletTransactionObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetLagoWalletId returns the LagoWalletId field value
func (o *WalletTransactionObject) GetLagoWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoWalletId
}

// GetLagoWalletIdOk returns a tuple with the LagoWalletId field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetLagoWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoWalletId, true
}

// SetLagoWalletId sets field value
func (o *WalletTransactionObject) SetLagoWalletId(v string) {
	o.LagoWalletId = v
}

// GetStatus returns the Status field value
func (o *WalletTransactionObject) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WalletTransactionObject) SetStatus(v string) {
	o.Status = v
}

// GetTransactionType returns the TransactionType field value
func (o *WalletTransactionObject) GetTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *WalletTransactionObject) SetTransactionType(v string) {
	o.TransactionType = v
}

// GetAmount returns the Amount field value
func (o *WalletTransactionObject) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WalletTransactionObject) SetAmount(v string) {
	o.Amount = v
}

// GetCreditAmount returns the CreditAmount field value
func (o *WalletTransactionObject) GetCreditAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditAmount
}

// GetCreditAmountOk returns a tuple with the CreditAmount field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetCreditAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditAmount, true
}

// SetCreditAmount sets field value
func (o *WalletTransactionObject) SetCreditAmount(v string) {
	o.CreditAmount = v
}

// GetSettledAt returns the SettledAt field value if set, zero value otherwise.
func (o *WalletTransactionObject) GetSettledAt() time.Time {
	if o == nil || IsNil(o.SettledAt) {
		var ret time.Time
		return ret
	}
	return *o.SettledAt
}

// GetSettledAtOk returns a tuple with the SettledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetSettledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SettledAt) {
		return nil, false
	}
	return o.SettledAt, true
}

// HasSettledAt returns a boolean if a field has been set.
func (o *WalletTransactionObject) HasSettledAt() bool {
	if o != nil && !IsNil(o.SettledAt) {
		return true
	}

	return false
}

// SetSettledAt gets a reference to the given time.Time and assigns it to the SettledAt field.
func (o *WalletTransactionObject) SetSettledAt(v time.Time) {
	o.SettledAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WalletTransactionObject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WalletTransactionObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WalletTransactionObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o WalletTransactionObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletTransactionObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["lago_wallet_id"] = o.LagoWalletId
	toSerialize["status"] = o.Status
	toSerialize["transaction_type"] = o.TransactionType
	toSerialize["amount"] = o.Amount
	toSerialize["credit_amount"] = o.CreditAmount
	if !IsNil(o.SettledAt) {
		toSerialize["settled_at"] = o.SettledAt
	}
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *WalletTransactionObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"lago_wallet_id",
		"status",
		"transaction_type",
		"amount",
		"credit_amount",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletTransactionObject := _WalletTransactionObject{}

	err = json.Unmarshal(bytes, &varWalletTransactionObject)

	if err != nil {
		return err
	}

	*o = WalletTransactionObject(varWalletTransactionObject)

	return err
}

type NullableWalletTransactionObject struct {
	value *WalletTransactionObject
	isSet bool
}

func (v NullableWalletTransactionObject) Get() *WalletTransactionObject {
	return v.value
}

func (v *NullableWalletTransactionObject) Set(val *WalletTransactionObject) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletTransactionObject) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletTransactionObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletTransactionObject(val *WalletTransactionObject) *NullableWalletTransactionObject {
	return &NullableWalletTransactionObject{value: val, isSet: true}
}

func (v NullableWalletTransactionObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletTransactionObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


