/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreditNoteCreateInputCreditNote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditNoteCreateInputCreditNote{}

// CreditNoteCreateInputCreditNote struct for CreditNoteCreateInputCreditNote
type CreditNoteCreateInputCreditNote struct {
	// The invoice unique identifier, created by Lago.
	InvoiceId string `json:"invoice_id"`
	// The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
	Reason NullableString `json:"reason,omitempty"`
	// The description of the credit note.
	Description *string `json:"description,omitempty"`
	// The total amount to be credited on the customer balance.
	CreditAmountCents NullableInt32 `json:"credit_amount_cents,omitempty"`
	// The total amount to be refunded to the customer.
	RefundAmountCents NullableInt32 `json:"refund_amount_cents,omitempty"`
	// The list of credit noteâ€™s items.
	Items []CreditNoteEstimateInputCreditNoteItemsInner `json:"items"`
}

type _CreditNoteCreateInputCreditNote CreditNoteCreateInputCreditNote

// NewCreditNoteCreateInputCreditNote instantiates a new CreditNoteCreateInputCreditNote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditNoteCreateInputCreditNote(invoiceId string, items []CreditNoteEstimateInputCreditNoteItemsInner) *CreditNoteCreateInputCreditNote {
	this := CreditNoteCreateInputCreditNote{}
	this.InvoiceId = invoiceId
	this.Items = items
	return &this
}

// NewCreditNoteCreateInputCreditNoteWithDefaults instantiates a new CreditNoteCreateInputCreditNote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditNoteCreateInputCreditNoteWithDefaults() *CreditNoteCreateInputCreditNote {
	this := CreditNoteCreateInputCreditNote{}
	return &this
}

// GetInvoiceId returns the InvoiceId field value
func (o *CreditNoteCreateInputCreditNote) GetInvoiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value
// and a boolean to check if the value has been set.
func (o *CreditNoteCreateInputCreditNote) GetInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceId, true
}

// SetInvoiceId sets field value
func (o *CreditNoteCreateInputCreditNote) SetInvoiceId(v string) {
	o.InvoiceId = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteCreateInputCreditNote) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteCreateInputCreditNote) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *CreditNoteCreateInputCreditNote) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *CreditNoteCreateInputCreditNote) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *CreditNoteCreateInputCreditNote) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *CreditNoteCreateInputCreditNote) UnsetReason() {
	o.Reason.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreditNoteCreateInputCreditNote) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteCreateInputCreditNote) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreditNoteCreateInputCreditNote) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreditNoteCreateInputCreditNote) SetDescription(v string) {
	o.Description = &v
}

// GetCreditAmountCents returns the CreditAmountCents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteCreateInputCreditNote) GetCreditAmountCents() int32 {
	if o == nil || IsNil(o.CreditAmountCents.Get()) {
		var ret int32
		return ret
	}
	return *o.CreditAmountCents.Get()
}

// GetCreditAmountCentsOk returns a tuple with the CreditAmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteCreateInputCreditNote) GetCreditAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreditAmountCents.Get(), o.CreditAmountCents.IsSet()
}

// HasCreditAmountCents returns a boolean if a field has been set.
func (o *CreditNoteCreateInputCreditNote) HasCreditAmountCents() bool {
	if o != nil && o.CreditAmountCents.IsSet() {
		return true
	}

	return false
}

// SetCreditAmountCents gets a reference to the given NullableInt32 and assigns it to the CreditAmountCents field.
func (o *CreditNoteCreateInputCreditNote) SetCreditAmountCents(v int32) {
	o.CreditAmountCents.Set(&v)
}
// SetCreditAmountCentsNil sets the value for CreditAmountCents to be an explicit nil
func (o *CreditNoteCreateInputCreditNote) SetCreditAmountCentsNil() {
	o.CreditAmountCents.Set(nil)
}

// UnsetCreditAmountCents ensures that no value is present for CreditAmountCents, not even an explicit nil
func (o *CreditNoteCreateInputCreditNote) UnsetCreditAmountCents() {
	o.CreditAmountCents.Unset()
}

// GetRefundAmountCents returns the RefundAmountCents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteCreateInputCreditNote) GetRefundAmountCents() int32 {
	if o == nil || IsNil(o.RefundAmountCents.Get()) {
		var ret int32
		return ret
	}
	return *o.RefundAmountCents.Get()
}

// GetRefundAmountCentsOk returns a tuple with the RefundAmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteCreateInputCreditNote) GetRefundAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundAmountCents.Get(), o.RefundAmountCents.IsSet()
}

// HasRefundAmountCents returns a boolean if a field has been set.
func (o *CreditNoteCreateInputCreditNote) HasRefundAmountCents() bool {
	if o != nil && o.RefundAmountCents.IsSet() {
		return true
	}

	return false
}

// SetRefundAmountCents gets a reference to the given NullableInt32 and assigns it to the RefundAmountCents field.
func (o *CreditNoteCreateInputCreditNote) SetRefundAmountCents(v int32) {
	o.RefundAmountCents.Set(&v)
}
// SetRefundAmountCentsNil sets the value for RefundAmountCents to be an explicit nil
func (o *CreditNoteCreateInputCreditNote) SetRefundAmountCentsNil() {
	o.RefundAmountCents.Set(nil)
}

// UnsetRefundAmountCents ensures that no value is present for RefundAmountCents, not even an explicit nil
func (o *CreditNoteCreateInputCreditNote) UnsetRefundAmountCents() {
	o.RefundAmountCents.Unset()
}

// GetItems returns the Items field value
func (o *CreditNoteCreateInputCreditNote) GetItems() []CreditNoteEstimateInputCreditNoteItemsInner {
	if o == nil {
		var ret []CreditNoteEstimateInputCreditNoteItemsInner
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CreditNoteCreateInputCreditNote) GetItemsOk() ([]CreditNoteEstimateInputCreditNoteItemsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CreditNoteCreateInputCreditNote) SetItems(v []CreditNoteEstimateInputCreditNoteItemsInner) {
	o.Items = v
}

func (o CreditNoteCreateInputCreditNote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditNoteCreateInputCreditNote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["invoice_id"] = o.InvoiceId
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.CreditAmountCents.IsSet() {
		toSerialize["credit_amount_cents"] = o.CreditAmountCents.Get()
	}
	if o.RefundAmountCents.IsSet() {
		toSerialize["refund_amount_cents"] = o.RefundAmountCents.Get()
	}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CreditNoteCreateInputCreditNote) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"invoice_id",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditNoteCreateInputCreditNote := _CreditNoteCreateInputCreditNote{}

	err = json.Unmarshal(bytes, &varCreditNoteCreateInputCreditNote)

	if err != nil {
		return err
	}

	*o = CreditNoteCreateInputCreditNote(varCreditNoteCreateInputCreditNote)

	return err
}

type NullableCreditNoteCreateInputCreditNote struct {
	value *CreditNoteCreateInputCreditNote
	isSet bool
}

func (v NullableCreditNoteCreateInputCreditNote) Get() *CreditNoteCreateInputCreditNote {
	return v.value
}

func (v *NullableCreditNoteCreateInputCreditNote) Set(val *CreditNoteCreateInputCreditNote) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNoteCreateInputCreditNote) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNoteCreateInputCreditNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNoteCreateInputCreditNote(val *CreditNoteCreateInputCreditNote) *NullableCreditNoteCreateInputCreditNote {
	return &NullableCreditNoteCreateInputCreditNote{value: val, isSet: true}
}

func (v NullableCreditNoteCreateInputCreditNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNoteCreateInputCreditNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


