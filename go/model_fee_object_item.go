/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the FeeObjectItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeObjectItem{}

// FeeObjectItem Item attached to the fee
type FeeObjectItem struct {
	// The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
	Type string `json:"type"`
	// The code of the fee item. It can be the code of the `add-o`n, the code of the `charge`, the code of the `credit` or the code of the `subscription`.
	Code string `json:"code"`
	// The name of the fee item. It can be the name of the `add-on`, the name of the `charge`, the name of the `credit` or the name of the `subscription`.
	Name string `json:"name"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	GroupInvoiceDisplayName *string `json:"group_invoice_display_name,omitempty"`
	// Unique identifier of the fee item, created by Lago. It can be the identifier of the `add-on`, the identifier of the `charge`, the identifier of the `credit` or the identifier of the `subscription`.
	LagoItemId string `json:"lago_item_id"`
	// The type of the fee item. Possible values are `AddOn`, `BillableMetric`, `WalletTransaction` or `Subscription`.
	ItemType string `json:"item_type"`
}

type _FeeObjectItem FeeObjectItem

// NewFeeObjectItem instantiates a new FeeObjectItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeObjectItem(type_ string, code string, name string, lagoItemId string, itemType string) *FeeObjectItem {
	this := FeeObjectItem{}
	this.Type = type_
	this.Code = code
	this.Name = name
	this.LagoItemId = lagoItemId
	this.ItemType = itemType
	return &this
}

// NewFeeObjectItemWithDefaults instantiates a new FeeObjectItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeObjectItemWithDefaults() *FeeObjectItem {
	this := FeeObjectItem{}
	return &this
}

// GetType returns the Type field value
func (o *FeeObjectItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FeeObjectItem) SetType(v string) {
	o.Type = v
}

// GetCode returns the Code field value
func (o *FeeObjectItem) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *FeeObjectItem) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *FeeObjectItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeeObjectItem) SetName(v string) {
	o.Name = v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *FeeObjectItem) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *FeeObjectItem) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *FeeObjectItem) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetGroupInvoiceDisplayName returns the GroupInvoiceDisplayName field value if set, zero value otherwise.
func (o *FeeObjectItem) GetGroupInvoiceDisplayName() string {
	if o == nil || IsNil(o.GroupInvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.GroupInvoiceDisplayName
}

// GetGroupInvoiceDisplayNameOk returns a tuple with the GroupInvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetGroupInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupInvoiceDisplayName) {
		return nil, false
	}
	return o.GroupInvoiceDisplayName, true
}

// HasGroupInvoiceDisplayName returns a boolean if a field has been set.
func (o *FeeObjectItem) HasGroupInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.GroupInvoiceDisplayName) {
		return true
	}

	return false
}

// SetGroupInvoiceDisplayName gets a reference to the given string and assigns it to the GroupInvoiceDisplayName field.
func (o *FeeObjectItem) SetGroupInvoiceDisplayName(v string) {
	o.GroupInvoiceDisplayName = &v
}

// GetLagoItemId returns the LagoItemId field value
func (o *FeeObjectItem) GetLagoItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoItemId
}

// GetLagoItemIdOk returns a tuple with the LagoItemId field value
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetLagoItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoItemId, true
}

// SetLagoItemId sets field value
func (o *FeeObjectItem) SetLagoItemId(v string) {
	o.LagoItemId = v
}

// GetItemType returns the ItemType field value
func (o *FeeObjectItem) GetItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *FeeObjectItem) GetItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *FeeObjectItem) SetItemType(v string) {
	o.ItemType = v
}

func (o FeeObjectItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeObjectItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	if !IsNil(o.GroupInvoiceDisplayName) {
		toSerialize["group_invoice_display_name"] = o.GroupInvoiceDisplayName
	}
	toSerialize["lago_item_id"] = o.LagoItemId
	toSerialize["item_type"] = o.ItemType
	return toSerialize, nil
}

func (o *FeeObjectItem) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"code",
		"name",
		"lago_item_id",
		"item_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeObjectItem := _FeeObjectItem{}

	err = json.Unmarshal(bytes, &varFeeObjectItem)

	if err != nil {
		return err
	}

	*o = FeeObjectItem(varFeeObjectItem)

	return err
}

type NullableFeeObjectItem struct {
	value *FeeObjectItem
	isSet bool
}

func (v NullableFeeObjectItem) Get() *FeeObjectItem {
	return v.value
}

func (v *NullableFeeObjectItem) Set(val *FeeObjectItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeObjectItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeObjectItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeObjectItem(val *FeeObjectItem) *NullableFeeObjectItem {
	return &NullableFeeObjectItem{value: val, isSet: true}
}

func (v NullableFeeObjectItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeObjectItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


