/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the TaxObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxObject{}

// TaxObject struct for TaxObject
type TaxObject struct {
	// Unique identifier of the tax, created by Lago.
	LagoId string `json:"lago_id"`
	// Name of the tax.
	Name string `json:"name"`
	// Unique code used to identify the tax associated with the API request.
	Code string `json:"code"`
	// Internal description of the taxe
	Description *string `json:"description,omitempty"`
	// The percentage rate of the tax
	Rate float32 `json:"rate"`
	// Set to `true` if the tax is used as one of the organization's default
	AppliedToOrganization bool `json:"applied_to_organization"`
	// Number of add-ons this tax is applied to.
	AddOnsCount *int32 `json:"add_ons_count,omitempty"`
	// Number of charges this tax is applied to.
	ChargesCount *int32 `json:"charges_count,omitempty"`
	// Number of customers this tax is applied to (directly or via the organization's default).
	CustomersCount int32 `json:"customers_count"`
	// Number of plans this tax is applied to.
	PlansCount *int32 `json:"plans_count,omitempty"`
	// Creation date of the tax.
	CreatedAt time.Time `json:"created_at"`
}

type _TaxObject TaxObject

// NewTaxObject instantiates a new TaxObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxObject(lagoId string, name string, code string, rate float32, appliedToOrganization bool, customersCount int32, createdAt time.Time) *TaxObject {
	this := TaxObject{}
	this.LagoId = lagoId
	this.Name = name
	this.Code = code
	this.Rate = rate
	this.AppliedToOrganization = appliedToOrganization
	this.CustomersCount = customersCount
	this.CreatedAt = createdAt
	return &this
}

// NewTaxObjectWithDefaults instantiates a new TaxObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxObjectWithDefaults() *TaxObject {
	this := TaxObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *TaxObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *TaxObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetName returns the Name field value
func (o *TaxObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TaxObject) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *TaxObject) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TaxObject) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaxObject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxObject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaxObject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaxObject) SetDescription(v string) {
	o.Description = &v
}

// GetRate returns the Rate field value
func (o *TaxObject) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *TaxObject) SetRate(v float32) {
	o.Rate = v
}

// GetAppliedToOrganization returns the AppliedToOrganization field value
func (o *TaxObject) GetAppliedToOrganization() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AppliedToOrganization
}

// GetAppliedToOrganizationOk returns a tuple with the AppliedToOrganization field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetAppliedToOrganizationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppliedToOrganization, true
}

// SetAppliedToOrganization sets field value
func (o *TaxObject) SetAppliedToOrganization(v bool) {
	o.AppliedToOrganization = v
}

// GetAddOnsCount returns the AddOnsCount field value if set, zero value otherwise.
func (o *TaxObject) GetAddOnsCount() int32 {
	if o == nil || IsNil(o.AddOnsCount) {
		var ret int32
		return ret
	}
	return *o.AddOnsCount
}

// GetAddOnsCountOk returns a tuple with the AddOnsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxObject) GetAddOnsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AddOnsCount) {
		return nil, false
	}
	return o.AddOnsCount, true
}

// HasAddOnsCount returns a boolean if a field has been set.
func (o *TaxObject) HasAddOnsCount() bool {
	if o != nil && !IsNil(o.AddOnsCount) {
		return true
	}

	return false
}

// SetAddOnsCount gets a reference to the given int32 and assigns it to the AddOnsCount field.
func (o *TaxObject) SetAddOnsCount(v int32) {
	o.AddOnsCount = &v
}

// GetChargesCount returns the ChargesCount field value if set, zero value otherwise.
func (o *TaxObject) GetChargesCount() int32 {
	if o == nil || IsNil(o.ChargesCount) {
		var ret int32
		return ret
	}
	return *o.ChargesCount
}

// GetChargesCountOk returns a tuple with the ChargesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxObject) GetChargesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ChargesCount) {
		return nil, false
	}
	return o.ChargesCount, true
}

// HasChargesCount returns a boolean if a field has been set.
func (o *TaxObject) HasChargesCount() bool {
	if o != nil && !IsNil(o.ChargesCount) {
		return true
	}

	return false
}

// SetChargesCount gets a reference to the given int32 and assigns it to the ChargesCount field.
func (o *TaxObject) SetChargesCount(v int32) {
	o.ChargesCount = &v
}

// GetCustomersCount returns the CustomersCount field value
func (o *TaxObject) GetCustomersCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CustomersCount
}

// GetCustomersCountOk returns a tuple with the CustomersCount field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetCustomersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomersCount, true
}

// SetCustomersCount sets field value
func (o *TaxObject) SetCustomersCount(v int32) {
	o.CustomersCount = v
}

// GetPlansCount returns the PlansCount field value if set, zero value otherwise.
func (o *TaxObject) GetPlansCount() int32 {
	if o == nil || IsNil(o.PlansCount) {
		var ret int32
		return ret
	}
	return *o.PlansCount
}

// GetPlansCountOk returns a tuple with the PlansCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxObject) GetPlansCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PlansCount) {
		return nil, false
	}
	return o.PlansCount, true
}

// HasPlansCount returns a boolean if a field has been set.
func (o *TaxObject) HasPlansCount() bool {
	if o != nil && !IsNil(o.PlansCount) {
		return true
	}

	return false
}

// SetPlansCount gets a reference to the given int32 and assigns it to the PlansCount field.
func (o *TaxObject) SetPlansCount(v int32) {
	o.PlansCount = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TaxObject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TaxObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TaxObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o TaxObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["rate"] = o.Rate
	toSerialize["applied_to_organization"] = o.AppliedToOrganization
	if !IsNil(o.AddOnsCount) {
		toSerialize["add_ons_count"] = o.AddOnsCount
	}
	if !IsNil(o.ChargesCount) {
		toSerialize["charges_count"] = o.ChargesCount
	}
	toSerialize["customers_count"] = o.CustomersCount
	if !IsNil(o.PlansCount) {
		toSerialize["plans_count"] = o.PlansCount
	}
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *TaxObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"name",
		"code",
		"rate",
		"applied_to_organization",
		"customers_count",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxObject := _TaxObject{}

	err = json.Unmarshal(bytes, &varTaxObject)

	if err != nil {
		return err
	}

	*o = TaxObject(varTaxObject)

	return err
}

type NullableTaxObject struct {
	value *TaxObject
	isSet bool
}

func (v NullableTaxObject) Get() *TaxObject {
	return v.value
}

func (v *NullableTaxObject) Set(val *TaxObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxObject(val *TaxObject) *NullableTaxObject {
	return &NullableTaxObject{value: val, isSet: true}
}

func (v NullableTaxObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


