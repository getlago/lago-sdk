/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
)

// checks if the CouponBaseInputAppliesTo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouponBaseInputAppliesTo{}

// CouponBaseInputAppliesTo Set coupon limitations to plans or specific metrics.
type CouponBaseInputAppliesTo struct {
	// An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon's usage to specific plans only.
	PlanCodes []string `json:"plan_codes,omitempty"`
	// An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon's usage to specific metrics only.
	BillableMetricCodes []string `json:"billable_metric_codes,omitempty"`
}

// NewCouponBaseInputAppliesTo instantiates a new CouponBaseInputAppliesTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouponBaseInputAppliesTo() *CouponBaseInputAppliesTo {
	this := CouponBaseInputAppliesTo{}
	return &this
}

// NewCouponBaseInputAppliesToWithDefaults instantiates a new CouponBaseInputAppliesTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouponBaseInputAppliesToWithDefaults() *CouponBaseInputAppliesTo {
	this := CouponBaseInputAppliesTo{}
	return &this
}

// GetPlanCodes returns the PlanCodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponBaseInputAppliesTo) GetPlanCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.PlanCodes
}

// GetPlanCodesOk returns a tuple with the PlanCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponBaseInputAppliesTo) GetPlanCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.PlanCodes) {
		return nil, false
	}
	return o.PlanCodes, true
}

// HasPlanCodes returns a boolean if a field has been set.
func (o *CouponBaseInputAppliesTo) HasPlanCodes() bool {
	if o != nil && IsNil(o.PlanCodes) {
		return true
	}

	return false
}

// SetPlanCodes gets a reference to the given []string and assigns it to the PlanCodes field.
func (o *CouponBaseInputAppliesTo) SetPlanCodes(v []string) {
	o.PlanCodes = v
}

// GetBillableMetricCodes returns the BillableMetricCodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponBaseInputAppliesTo) GetBillableMetricCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BillableMetricCodes
}

// GetBillableMetricCodesOk returns a tuple with the BillableMetricCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponBaseInputAppliesTo) GetBillableMetricCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.BillableMetricCodes) {
		return nil, false
	}
	return o.BillableMetricCodes, true
}

// HasBillableMetricCodes returns a boolean if a field has been set.
func (o *CouponBaseInputAppliesTo) HasBillableMetricCodes() bool {
	if o != nil && IsNil(o.BillableMetricCodes) {
		return true
	}

	return false
}

// SetBillableMetricCodes gets a reference to the given []string and assigns it to the BillableMetricCodes field.
func (o *CouponBaseInputAppliesTo) SetBillableMetricCodes(v []string) {
	o.BillableMetricCodes = v
}

func (o CouponBaseInputAppliesTo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouponBaseInputAppliesTo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PlanCodes != nil {
		toSerialize["plan_codes"] = o.PlanCodes
	}
	if o.BillableMetricCodes != nil {
		toSerialize["billable_metric_codes"] = o.BillableMetricCodes
	}
	return toSerialize, nil
}

type NullableCouponBaseInputAppliesTo struct {
	value *CouponBaseInputAppliesTo
	isSet bool
}

func (v NullableCouponBaseInputAppliesTo) Get() *CouponBaseInputAppliesTo {
	return v.value
}

func (v *NullableCouponBaseInputAppliesTo) Set(val *CouponBaseInputAppliesTo) {
	v.value = val
	v.isSet = true
}

func (v NullableCouponBaseInputAppliesTo) IsSet() bool {
	return v.isSet
}

func (v *NullableCouponBaseInputAppliesTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouponBaseInputAppliesTo(val *CouponBaseInputAppliesTo) *NullableCouponBaseInputAppliesTo {
	return &NullableCouponBaseInputAppliesTo{value: val, isSet: true}
}

func (v NullableCouponBaseInputAppliesTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouponBaseInputAppliesTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


