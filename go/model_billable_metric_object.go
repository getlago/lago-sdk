/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the BillableMetricObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillableMetricObject{}

// BillableMetricObject struct for BillableMetricObject
type BillableMetricObject struct {
	// Unique identifier of the billable metric created by Lago.
	LagoId string `json:"lago_id"`
	// Name of the billable metric.
	Name string `json:"name"`
	// Unique code used to identify the billable metric associated with the API request. This code associates each event with the correct metric.
	Code string `json:"code"`
	// Internal description of the billable metric.
	Description NullableString `json:"description,omitempty"`
	// Defines if the billable metric is persisted billing period over billing period.  - If set to `true`: the accumulated number of units calculated from the previous billing period is persisted to the next billing period. - If set to `false`: the accumulated number of units is reset to 0 at the end of the billing period. - If not defined in the request, default value is `false`.
	Recurring bool `json:"recurring"`
	// Creation date of the billable metric.
	CreatedAt time.Time `json:"created_at"`
	// Property of the billable metric used for aggregating usage data. This field is not required for `count_agg`.
	FieldName NullableString `json:"field_name,omitempty"`
	// Aggregation method used to compute usage for this billable metric.
	AggregationType string `json:"aggregation_type"`
	// Parameter exclusively utilized in conjunction with the `weighted_sum` aggregation type. It serves to adjust the aggregation result by assigning weights and proration to the result based on time intervals. When this field is not provided, the default time interval is assumed to be in `seconds`.
	WeightedInterval NullableString `json:"weighted_interval,omitempty"`
	Group *BillableMetricGroup `json:"group,omitempty"`
	// Number of active subscriptions using this billable metric.
	ActiveSubscriptionsCount int32 `json:"active_subscriptions_count"`
	// Number of draft invoices for which this billable metric is listed as an invoice item.
	DraftInvoicesCount int32 `json:"draft_invoices_count"`
	// Number of plans using this billable metric.
	PlansCount int32 `json:"plans_count"`
}

type _BillableMetricObject BillableMetricObject

// NewBillableMetricObject instantiates a new BillableMetricObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillableMetricObject(lagoId string, name string, code string, recurring bool, createdAt time.Time, aggregationType string, activeSubscriptionsCount int32, draftInvoicesCount int32, plansCount int32) *BillableMetricObject {
	this := BillableMetricObject{}
	this.LagoId = lagoId
	this.Name = name
	this.Code = code
	this.Recurring = recurring
	this.CreatedAt = createdAt
	this.AggregationType = aggregationType
	this.ActiveSubscriptionsCount = activeSubscriptionsCount
	this.DraftInvoicesCount = draftInvoicesCount
	this.PlansCount = plansCount
	return &this
}

// NewBillableMetricObjectWithDefaults instantiates a new BillableMetricObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillableMetricObjectWithDefaults() *BillableMetricObject {
	this := BillableMetricObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *BillableMetricObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *BillableMetricObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetName returns the Name field value
func (o *BillableMetricObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BillableMetricObject) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *BillableMetricObject) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *BillableMetricObject) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillableMetricObject) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillableMetricObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BillableMetricObject) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BillableMetricObject) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BillableMetricObject) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BillableMetricObject) UnsetDescription() {
	o.Description.Unset()
}

// GetRecurring returns the Recurring field value
func (o *BillableMetricObject) GetRecurring() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetRecurringOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Recurring, true
}

// SetRecurring sets field value
func (o *BillableMetricObject) SetRecurring(v bool) {
	o.Recurring = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BillableMetricObject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BillableMetricObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillableMetricObject) GetFieldName() string {
	if o == nil || IsNil(o.FieldName.Get()) {
		var ret string
		return ret
	}
	return *o.FieldName.Get()
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillableMetricObject) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldName.Get(), o.FieldName.IsSet()
}

// HasFieldName returns a boolean if a field has been set.
func (o *BillableMetricObject) HasFieldName() bool {
	if o != nil && o.FieldName.IsSet() {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given NullableString and assigns it to the FieldName field.
func (o *BillableMetricObject) SetFieldName(v string) {
	o.FieldName.Set(&v)
}
// SetFieldNameNil sets the value for FieldName to be an explicit nil
func (o *BillableMetricObject) SetFieldNameNil() {
	o.FieldName.Set(nil)
}

// UnsetFieldName ensures that no value is present for FieldName, not even an explicit nil
func (o *BillableMetricObject) UnsetFieldName() {
	o.FieldName.Unset()
}

// GetAggregationType returns the AggregationType field value
func (o *BillableMetricObject) GetAggregationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetAggregationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregationType, true
}

// SetAggregationType sets field value
func (o *BillableMetricObject) SetAggregationType(v string) {
	o.AggregationType = v
}

// GetWeightedInterval returns the WeightedInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillableMetricObject) GetWeightedInterval() string {
	if o == nil || IsNil(o.WeightedInterval.Get()) {
		var ret string
		return ret
	}
	return *o.WeightedInterval.Get()
}

// GetWeightedIntervalOk returns a tuple with the WeightedInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillableMetricObject) GetWeightedIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeightedInterval.Get(), o.WeightedInterval.IsSet()
}

// HasWeightedInterval returns a boolean if a field has been set.
func (o *BillableMetricObject) HasWeightedInterval() bool {
	if o != nil && o.WeightedInterval.IsSet() {
		return true
	}

	return false
}

// SetWeightedInterval gets a reference to the given NullableString and assigns it to the WeightedInterval field.
func (o *BillableMetricObject) SetWeightedInterval(v string) {
	o.WeightedInterval.Set(&v)
}
// SetWeightedIntervalNil sets the value for WeightedInterval to be an explicit nil
func (o *BillableMetricObject) SetWeightedIntervalNil() {
	o.WeightedInterval.Set(nil)
}

// UnsetWeightedInterval ensures that no value is present for WeightedInterval, not even an explicit nil
func (o *BillableMetricObject) UnsetWeightedInterval() {
	o.WeightedInterval.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *BillableMetricObject) GetGroup() BillableMetricGroup {
	if o == nil || IsNil(o.Group) {
		var ret BillableMetricGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetGroupOk() (*BillableMetricGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *BillableMetricObject) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given BillableMetricGroup and assigns it to the Group field.
func (o *BillableMetricObject) SetGroup(v BillableMetricGroup) {
	o.Group = &v
}

// GetActiveSubscriptionsCount returns the ActiveSubscriptionsCount field value
func (o *BillableMetricObject) GetActiveSubscriptionsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveSubscriptionsCount
}

// GetActiveSubscriptionsCountOk returns a tuple with the ActiveSubscriptionsCount field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetActiveSubscriptionsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveSubscriptionsCount, true
}

// SetActiveSubscriptionsCount sets field value
func (o *BillableMetricObject) SetActiveSubscriptionsCount(v int32) {
	o.ActiveSubscriptionsCount = v
}

// GetDraftInvoicesCount returns the DraftInvoicesCount field value
func (o *BillableMetricObject) GetDraftInvoicesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DraftInvoicesCount
}

// GetDraftInvoicesCountOk returns a tuple with the DraftInvoicesCount field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetDraftInvoicesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DraftInvoicesCount, true
}

// SetDraftInvoicesCount sets field value
func (o *BillableMetricObject) SetDraftInvoicesCount(v int32) {
	o.DraftInvoicesCount = v
}

// GetPlansCount returns the PlansCount field value
func (o *BillableMetricObject) GetPlansCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlansCount
}

// GetPlansCountOk returns a tuple with the PlansCount field value
// and a boolean to check if the value has been set.
func (o *BillableMetricObject) GetPlansCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlansCount, true
}

// SetPlansCount sets field value
func (o *BillableMetricObject) SetPlansCount(v int32) {
	o.PlansCount = v
}

func (o BillableMetricObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillableMetricObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["recurring"] = o.Recurring
	toSerialize["created_at"] = o.CreatedAt
	if o.FieldName.IsSet() {
		toSerialize["field_name"] = o.FieldName.Get()
	}
	toSerialize["aggregation_type"] = o.AggregationType
	if o.WeightedInterval.IsSet() {
		toSerialize["weighted_interval"] = o.WeightedInterval.Get()
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["active_subscriptions_count"] = o.ActiveSubscriptionsCount
	toSerialize["draft_invoices_count"] = o.DraftInvoicesCount
	toSerialize["plans_count"] = o.PlansCount
	return toSerialize, nil
}

func (o *BillableMetricObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"name",
		"code",
		"recurring",
		"created_at",
		"aggregation_type",
		"active_subscriptions_count",
		"draft_invoices_count",
		"plans_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillableMetricObject := _BillableMetricObject{}

	err = json.Unmarshal(bytes, &varBillableMetricObject)

	if err != nil {
		return err
	}

	*o = BillableMetricObject(varBillableMetricObject)

	return err
}

type NullableBillableMetricObject struct {
	value *BillableMetricObject
	isSet bool
}

func (v NullableBillableMetricObject) Get() *BillableMetricObject {
	return v.value
}

func (v *NullableBillableMetricObject) Set(val *BillableMetricObject) {
	v.value = val
	v.isSet = true
}

func (v NullableBillableMetricObject) IsSet() bool {
	return v.isSet
}

func (v *NullableBillableMetricObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillableMetricObject(val *BillableMetricObject) *NullableBillableMetricObject {
	return &NullableBillableMetricObject{value: val, isSet: true}
}

func (v NullableBillableMetricObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillableMetricObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


