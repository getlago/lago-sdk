/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CreditNoteObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditNoteObject{}

// CreditNoteObject struct for CreditNoteObject
type CreditNoteObject struct {
	// The credit note unique identifier, created by Lago.
	LagoId string `json:"lago_id"`
	// The sequential identifier of the credit note, specifically scoped on the associated invoice. It provides a unique numerical identifier for the credit note within the context of the invoice.
	SequentialId int32 `json:"sequential_id"`
	// The credit note unique number.
	Number string `json:"number"`
	// Unique identifier assigned to the invoice that the credit note belongs to
	LagoInvoiceId string `json:"lago_invoice_id"`
	// The invoice unique number, related to the credit note.
	InvoiceNumber string `json:"invoice_number"`
	// The date of creation of the credit note. It follows the ISO 8601 date format and provides the specific date when the credit note was created.
	IssuingDate string `json:"issuing_date"`
	// The status of the credit portion of the credit note. It indicates the current state or condition of the credit amount associated with the credit note. The possible values for this field are:  - `available`: this status indicates that an amount remains available for future usage. The credit can be applied towards future transactions or invoices. - `consumed`: this status indicates that the credit amount has been fully consumed. The remaining amount is 0, indicating that the credit has been utilized in its entirety. - `voided`: this status indicates that the remaining amount of the credit cannot be used any further. The credit has been voided and is no longer available for application or redemption.
	CreditStatus NullableString `json:"credit_status,omitempty"`
	// The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:  - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet. - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient. - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
	RefundStatus NullableString `json:"refund_status,omitempty"`
	// The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
	Reason string `json:"reason"`
	// The description of the credit note.
	Description NullableString `json:"description,omitempty"`
	Currency Currency `json:"currency"`
	// The total amount of the credit note, expressed in cents.
	TotalAmountCents int32 `json:"total_amount_cents"`
	// The tax amount of the credit note, expressed in cents.
	TaxesAmountCents int32 `json:"taxes_amount_cents"`
	// The tax rate associated with this specific credit note.
	TaxesRate float32 `json:"taxes_rate"`
	// The subtotal of the credit note excluding any applicable taxes, expressed in cents.
	SubTotalExcludingTaxesAmountCents int32 `json:"sub_total_excluding_taxes_amount_cents"`
	// The remaining credit note amount, expressed in cents.
	BalanceAmountCents int32 `json:"balance_amount_cents"`
	// The credited amount of the credit note, expressed in cents.
	CreditAmountCents int32 `json:"credit_amount_cents"`
	// The refunded amount of the credit note, expressed in cents.
	RefundAmountCents int32 `json:"refund_amount_cents"`
	// The pro-rated amount of the coupons applied to the source invoice.
	CouponsAdjustmentAmountCents int32 `json:"coupons_adjustment_amount_cents"`
	// The date when the credit note was created. It is expressed in Coordinated Universal Time (UTC).
	CreatedAt time.Time `json:"created_at"`
	// The date when the credit note was last updated. It is expressed in Coordinated Universal Time (UTC).
	UpdatedAt time.Time `json:"updated_at"`
	// The PDF file of the credit note.
	FileUrl NullableString `json:"file_url,omitempty"`
	// Array of credit noteâ€™s items.
	Items []CreditNoteItemObject `json:"items,omitempty"`
	AppliedTaxes []CreditNoteAppliedTaxObject `json:"applied_taxes,omitempty"`
}

type _CreditNoteObject CreditNoteObject

// NewCreditNoteObject instantiates a new CreditNoteObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditNoteObject(lagoId string, sequentialId int32, number string, lagoInvoiceId string, invoiceNumber string, issuingDate string, reason string, currency Currency, totalAmountCents int32, taxesAmountCents int32, taxesRate float32, subTotalExcludingTaxesAmountCents int32, balanceAmountCents int32, creditAmountCents int32, refundAmountCents int32, couponsAdjustmentAmountCents int32, createdAt time.Time, updatedAt time.Time) *CreditNoteObject {
	this := CreditNoteObject{}
	this.LagoId = lagoId
	this.SequentialId = sequentialId
	this.Number = number
	this.LagoInvoiceId = lagoInvoiceId
	this.InvoiceNumber = invoiceNumber
	this.IssuingDate = issuingDate
	this.Reason = reason
	this.Currency = currency
	this.TotalAmountCents = totalAmountCents
	this.TaxesAmountCents = taxesAmountCents
	this.TaxesRate = taxesRate
	this.SubTotalExcludingTaxesAmountCents = subTotalExcludingTaxesAmountCents
	this.BalanceAmountCents = balanceAmountCents
	this.CreditAmountCents = creditAmountCents
	this.RefundAmountCents = refundAmountCents
	this.CouponsAdjustmentAmountCents = couponsAdjustmentAmountCents
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewCreditNoteObjectWithDefaults instantiates a new CreditNoteObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditNoteObjectWithDefaults() *CreditNoteObject {
	this := CreditNoteObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *CreditNoteObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *CreditNoteObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetSequentialId returns the SequentialId field value
func (o *CreditNoteObject) GetSequentialId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SequentialId
}

// GetSequentialIdOk returns a tuple with the SequentialId field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetSequentialIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequentialId, true
}

// SetSequentialId sets field value
func (o *CreditNoteObject) SetSequentialId(v int32) {
	o.SequentialId = v
}

// GetNumber returns the Number field value
func (o *CreditNoteObject) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *CreditNoteObject) SetNumber(v string) {
	o.Number = v
}

// GetLagoInvoiceId returns the LagoInvoiceId field value
func (o *CreditNoteObject) GetLagoInvoiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoInvoiceId
}

// GetLagoInvoiceIdOk returns a tuple with the LagoInvoiceId field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetLagoInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoInvoiceId, true
}

// SetLagoInvoiceId sets field value
func (o *CreditNoteObject) SetLagoInvoiceId(v string) {
	o.LagoInvoiceId = v
}

// GetInvoiceNumber returns the InvoiceNumber field value
func (o *CreditNoteObject) GetInvoiceNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetInvoiceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceNumber, true
}

// SetInvoiceNumber sets field value
func (o *CreditNoteObject) SetInvoiceNumber(v string) {
	o.InvoiceNumber = v
}

// GetIssuingDate returns the IssuingDate field value
func (o *CreditNoteObject) GetIssuingDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuingDate
}

// GetIssuingDateOk returns a tuple with the IssuingDate field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetIssuingDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuingDate, true
}

// SetIssuingDate sets field value
func (o *CreditNoteObject) SetIssuingDate(v string) {
	o.IssuingDate = v
}

// GetCreditStatus returns the CreditStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteObject) GetCreditStatus() string {
	if o == nil || IsNil(o.CreditStatus.Get()) {
		var ret string
		return ret
	}
	return *o.CreditStatus.Get()
}

// GetCreditStatusOk returns a tuple with the CreditStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteObject) GetCreditStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreditStatus.Get(), o.CreditStatus.IsSet()
}

// HasCreditStatus returns a boolean if a field has been set.
func (o *CreditNoteObject) HasCreditStatus() bool {
	if o != nil && o.CreditStatus.IsSet() {
		return true
	}

	return false
}

// SetCreditStatus gets a reference to the given NullableString and assigns it to the CreditStatus field.
func (o *CreditNoteObject) SetCreditStatus(v string) {
	o.CreditStatus.Set(&v)
}
// SetCreditStatusNil sets the value for CreditStatus to be an explicit nil
func (o *CreditNoteObject) SetCreditStatusNil() {
	o.CreditStatus.Set(nil)
}

// UnsetCreditStatus ensures that no value is present for CreditStatus, not even an explicit nil
func (o *CreditNoteObject) UnsetCreditStatus() {
	o.CreditStatus.Unset()
}

// GetRefundStatus returns the RefundStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteObject) GetRefundStatus() string {
	if o == nil || IsNil(o.RefundStatus.Get()) {
		var ret string
		return ret
	}
	return *o.RefundStatus.Get()
}

// GetRefundStatusOk returns a tuple with the RefundStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteObject) GetRefundStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundStatus.Get(), o.RefundStatus.IsSet()
}

// HasRefundStatus returns a boolean if a field has been set.
func (o *CreditNoteObject) HasRefundStatus() bool {
	if o != nil && o.RefundStatus.IsSet() {
		return true
	}

	return false
}

// SetRefundStatus gets a reference to the given NullableString and assigns it to the RefundStatus field.
func (o *CreditNoteObject) SetRefundStatus(v string) {
	o.RefundStatus.Set(&v)
}
// SetRefundStatusNil sets the value for RefundStatus to be an explicit nil
func (o *CreditNoteObject) SetRefundStatusNil() {
	o.RefundStatus.Set(nil)
}

// UnsetRefundStatus ensures that no value is present for RefundStatus, not even an explicit nil
func (o *CreditNoteObject) UnsetRefundStatus() {
	o.RefundStatus.Unset()
}

// GetReason returns the Reason field value
func (o *CreditNoteObject) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CreditNoteObject) SetReason(v string) {
	o.Reason = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteObject) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreditNoteObject) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreditNoteObject) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreditNoteObject) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreditNoteObject) UnsetDescription() {
	o.Description.Unset()
}

// GetCurrency returns the Currency field value
func (o *CreditNoteObject) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CreditNoteObject) SetCurrency(v Currency) {
	o.Currency = v
}

// GetTotalAmountCents returns the TotalAmountCents field value
func (o *CreditNoteObject) GetTotalAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAmountCents
}

// GetTotalAmountCentsOk returns a tuple with the TotalAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetTotalAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmountCents, true
}

// SetTotalAmountCents sets field value
func (o *CreditNoteObject) SetTotalAmountCents(v int32) {
	o.TotalAmountCents = v
}

// GetTaxesAmountCents returns the TaxesAmountCents field value
func (o *CreditNoteObject) GetTaxesAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TaxesAmountCents
}

// GetTaxesAmountCentsOk returns a tuple with the TaxesAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetTaxesAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxesAmountCents, true
}

// SetTaxesAmountCents sets field value
func (o *CreditNoteObject) SetTaxesAmountCents(v int32) {
	o.TaxesAmountCents = v
}

// GetTaxesRate returns the TaxesRate field value
func (o *CreditNoteObject) GetTaxesRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TaxesRate
}

// GetTaxesRateOk returns a tuple with the TaxesRate field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetTaxesRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxesRate, true
}

// SetTaxesRate sets field value
func (o *CreditNoteObject) SetTaxesRate(v float32) {
	o.TaxesRate = v
}

// GetSubTotalExcludingTaxesAmountCents returns the SubTotalExcludingTaxesAmountCents field value
func (o *CreditNoteObject) GetSubTotalExcludingTaxesAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubTotalExcludingTaxesAmountCents
}

// GetSubTotalExcludingTaxesAmountCentsOk returns a tuple with the SubTotalExcludingTaxesAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetSubTotalExcludingTaxesAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubTotalExcludingTaxesAmountCents, true
}

// SetSubTotalExcludingTaxesAmountCents sets field value
func (o *CreditNoteObject) SetSubTotalExcludingTaxesAmountCents(v int32) {
	o.SubTotalExcludingTaxesAmountCents = v
}

// GetBalanceAmountCents returns the BalanceAmountCents field value
func (o *CreditNoteObject) GetBalanceAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BalanceAmountCents
}

// GetBalanceAmountCentsOk returns a tuple with the BalanceAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetBalanceAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BalanceAmountCents, true
}

// SetBalanceAmountCents sets field value
func (o *CreditNoteObject) SetBalanceAmountCents(v int32) {
	o.BalanceAmountCents = v
}

// GetCreditAmountCents returns the CreditAmountCents field value
func (o *CreditNoteObject) GetCreditAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreditAmountCents
}

// GetCreditAmountCentsOk returns a tuple with the CreditAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetCreditAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditAmountCents, true
}

// SetCreditAmountCents sets field value
func (o *CreditNoteObject) SetCreditAmountCents(v int32) {
	o.CreditAmountCents = v
}

// GetRefundAmountCents returns the RefundAmountCents field value
func (o *CreditNoteObject) GetRefundAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RefundAmountCents
}

// GetRefundAmountCentsOk returns a tuple with the RefundAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetRefundAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefundAmountCents, true
}

// SetRefundAmountCents sets field value
func (o *CreditNoteObject) SetRefundAmountCents(v int32) {
	o.RefundAmountCents = v
}

// GetCouponsAdjustmentAmountCents returns the CouponsAdjustmentAmountCents field value
func (o *CreditNoteObject) GetCouponsAdjustmentAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CouponsAdjustmentAmountCents
}

// GetCouponsAdjustmentAmountCentsOk returns a tuple with the CouponsAdjustmentAmountCents field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetCouponsAdjustmentAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CouponsAdjustmentAmountCents, true
}

// SetCouponsAdjustmentAmountCents sets field value
func (o *CreditNoteObject) SetCouponsAdjustmentAmountCents(v int32) {
	o.CouponsAdjustmentAmountCents = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CreditNoteObject) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CreditNoteObject) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CreditNoteObject) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CreditNoteObject) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetFileUrl returns the FileUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditNoteObject) GetFileUrl() string {
	if o == nil || IsNil(o.FileUrl.Get()) {
		var ret string
		return ret
	}
	return *o.FileUrl.Get()
}

// GetFileUrlOk returns a tuple with the FileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditNoteObject) GetFileUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileUrl.Get(), o.FileUrl.IsSet()
}

// HasFileUrl returns a boolean if a field has been set.
func (o *CreditNoteObject) HasFileUrl() bool {
	if o != nil && o.FileUrl.IsSet() {
		return true
	}

	return false
}

// SetFileUrl gets a reference to the given NullableString and assigns it to the FileUrl field.
func (o *CreditNoteObject) SetFileUrl(v string) {
	o.FileUrl.Set(&v)
}
// SetFileUrlNil sets the value for FileUrl to be an explicit nil
func (o *CreditNoteObject) SetFileUrlNil() {
	o.FileUrl.Set(nil)
}

// UnsetFileUrl ensures that no value is present for FileUrl, not even an explicit nil
func (o *CreditNoteObject) UnsetFileUrl() {
	o.FileUrl.Unset()
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CreditNoteObject) GetItems() []CreditNoteItemObject {
	if o == nil || IsNil(o.Items) {
		var ret []CreditNoteItemObject
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetItemsOk() ([]CreditNoteItemObject, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CreditNoteObject) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []CreditNoteItemObject and assigns it to the Items field.
func (o *CreditNoteObject) SetItems(v []CreditNoteItemObject) {
	o.Items = v
}

// GetAppliedTaxes returns the AppliedTaxes field value if set, zero value otherwise.
func (o *CreditNoteObject) GetAppliedTaxes() []CreditNoteAppliedTaxObject {
	if o == nil || IsNil(o.AppliedTaxes) {
		var ret []CreditNoteAppliedTaxObject
		return ret
	}
	return o.AppliedTaxes
}

// GetAppliedTaxesOk returns a tuple with the AppliedTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteObject) GetAppliedTaxesOk() ([]CreditNoteAppliedTaxObject, bool) {
	if o == nil || IsNil(o.AppliedTaxes) {
		return nil, false
	}
	return o.AppliedTaxes, true
}

// HasAppliedTaxes returns a boolean if a field has been set.
func (o *CreditNoteObject) HasAppliedTaxes() bool {
	if o != nil && !IsNil(o.AppliedTaxes) {
		return true
	}

	return false
}

// SetAppliedTaxes gets a reference to the given []CreditNoteAppliedTaxObject and assigns it to the AppliedTaxes field.
func (o *CreditNoteObject) SetAppliedTaxes(v []CreditNoteAppliedTaxObject) {
	o.AppliedTaxes = v
}

func (o CreditNoteObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditNoteObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["sequential_id"] = o.SequentialId
	toSerialize["number"] = o.Number
	toSerialize["lago_invoice_id"] = o.LagoInvoiceId
	toSerialize["invoice_number"] = o.InvoiceNumber
	toSerialize["issuing_date"] = o.IssuingDate
	if o.CreditStatus.IsSet() {
		toSerialize["credit_status"] = o.CreditStatus.Get()
	}
	if o.RefundStatus.IsSet() {
		toSerialize["refund_status"] = o.RefundStatus.Get()
	}
	toSerialize["reason"] = o.Reason
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["currency"] = o.Currency
	toSerialize["total_amount_cents"] = o.TotalAmountCents
	toSerialize["taxes_amount_cents"] = o.TaxesAmountCents
	toSerialize["taxes_rate"] = o.TaxesRate
	toSerialize["sub_total_excluding_taxes_amount_cents"] = o.SubTotalExcludingTaxesAmountCents
	toSerialize["balance_amount_cents"] = o.BalanceAmountCents
	toSerialize["credit_amount_cents"] = o.CreditAmountCents
	toSerialize["refund_amount_cents"] = o.RefundAmountCents
	toSerialize["coupons_adjustment_amount_cents"] = o.CouponsAdjustmentAmountCents
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if o.FileUrl.IsSet() {
		toSerialize["file_url"] = o.FileUrl.Get()
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.AppliedTaxes) {
		toSerialize["applied_taxes"] = o.AppliedTaxes
	}
	return toSerialize, nil
}

func (o *CreditNoteObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"sequential_id",
		"number",
		"lago_invoice_id",
		"invoice_number",
		"issuing_date",
		"reason",
		"currency",
		"total_amount_cents",
		"taxes_amount_cents",
		"taxes_rate",
		"sub_total_excluding_taxes_amount_cents",
		"balance_amount_cents",
		"credit_amount_cents",
		"refund_amount_cents",
		"coupons_adjustment_amount_cents",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditNoteObject := _CreditNoteObject{}

	err = json.Unmarshal(bytes, &varCreditNoteObject)

	if err != nil {
		return err
	}

	*o = CreditNoteObject(varCreditNoteObject)

	return err
}

type NullableCreditNoteObject struct {
	value *CreditNoteObject
	isSet bool
}

func (v NullableCreditNoteObject) Get() *CreditNoteObject {
	return v.value
}

func (v *NullableCreditNoteObject) Set(val *CreditNoteObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNoteObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNoteObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNoteObject(val *CreditNoteObject) *NullableCreditNoteObject {
	return &NullableCreditNoteObject{value: val, isSet: true}
}

func (v NullableCreditNoteObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNoteObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


