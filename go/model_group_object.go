/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GroupObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupObject{}

// GroupObject struct for GroupObject
type GroupObject struct {
	// Unique identifier of a specific group associated with the billable metric.
	LagoId string `json:"lago_id"`
	// Key of a specific group associated with the billable metric.
	Key string `json:"key"`
	// One of the values for a specific group associated with the billable metric.
	Value string `json:"value"`
}

type _GroupObject GroupObject

// NewGroupObject instantiates a new GroupObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupObject(lagoId string, key string, value string) *GroupObject {
	this := GroupObject{}
	this.LagoId = lagoId
	this.Key = key
	this.Value = value
	return &this
}

// NewGroupObjectWithDefaults instantiates a new GroupObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupObjectWithDefaults() *GroupObject {
	this := GroupObject{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *GroupObject) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *GroupObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *GroupObject) SetLagoId(v string) {
	o.LagoId = v
}

// GetKey returns the Key field value
func (o *GroupObject) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *GroupObject) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *GroupObject) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *GroupObject) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GroupObject) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GroupObject) SetValue(v string) {
	o.Value = v
}

func (o GroupObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *GroupObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupObject := _GroupObject{}

	err = json.Unmarshal(bytes, &varGroupObject)

	if err != nil {
		return err
	}

	*o = GroupObject(varGroupObject)

	return err
}

type NullableGroupObject struct {
	value *GroupObject
	isSet bool
}

func (v NullableGroupObject) Get() *GroupObject {
	return v.value
}

func (v *NullableGroupObject) Set(val *GroupObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupObject(val *GroupObject) *NullableGroupObject {
	return &NullableGroupObject{value: val, isSet: true}
}

func (v NullableGroupObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


