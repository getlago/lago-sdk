/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WalletTransactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletTransactions{}

// WalletTransactions struct for WalletTransactions
type WalletTransactions struct {
	WalletTransactions []WalletTransactionObject `json:"wallet_transactions"`
}

type _WalletTransactions WalletTransactions

// NewWalletTransactions instantiates a new WalletTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletTransactions(walletTransactions []WalletTransactionObject) *WalletTransactions {
	this := WalletTransactions{}
	this.WalletTransactions = walletTransactions
	return &this
}

// NewWalletTransactionsWithDefaults instantiates a new WalletTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletTransactionsWithDefaults() *WalletTransactions {
	this := WalletTransactions{}
	return &this
}

// GetWalletTransactions returns the WalletTransactions field value
func (o *WalletTransactions) GetWalletTransactions() []WalletTransactionObject {
	if o == nil {
		var ret []WalletTransactionObject
		return ret
	}

	return o.WalletTransactions
}

// GetWalletTransactionsOk returns a tuple with the WalletTransactions field value
// and a boolean to check if the value has been set.
func (o *WalletTransactions) GetWalletTransactionsOk() ([]WalletTransactionObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.WalletTransactions, true
}

// SetWalletTransactions sets field value
func (o *WalletTransactions) SetWalletTransactions(v []WalletTransactionObject) {
	o.WalletTransactions = v
}

func (o WalletTransactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletTransactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["wallet_transactions"] = o.WalletTransactions
	return toSerialize, nil
}

func (o *WalletTransactions) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"wallet_transactions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWalletTransactions := _WalletTransactions{}

	err = json.Unmarshal(bytes, &varWalletTransactions)

	if err != nil {
		return err
	}

	*o = WalletTransactions(varWalletTransactions)

	return err
}

type NullableWalletTransactions struct {
	value *WalletTransactions
	isSet bool
}

func (v NullableWalletTransactions) Get() *WalletTransactions {
	return v.value
}

func (v *NullableWalletTransactions) Set(val *WalletTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletTransactions(val *WalletTransactions) *NullableWalletTransactions {
	return &NullableWalletTransactions{value: val, isSet: true}
}

func (v NullableWalletTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


