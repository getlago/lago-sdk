/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CustomerMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerMetadata{}

// CustomerMetadata Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format
type CustomerMetadata struct {
	// A unique identifier for the customer metadata object in the Lago application. Can be used to update a key-value pair
	LagoId string `json:"lago_id"`
	// The metadata object key
	Key string `json:"key"`
	// The metadata object value
	Value string `json:"value"`
	// Determines whether the item or information should be displayed in the invoice. If set to true, the item or information will be included and visible in the generated invoice. If set to false, the item or information will be excluded and not displayed in the invoice.
	DisplayInInvoice bool `json:"display_in_invoice"`
	// The date of the metadata object creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the metadata object was created
	CreatedAt time.Time `json:"created_at"`
}

type _CustomerMetadata CustomerMetadata

// NewCustomerMetadata instantiates a new CustomerMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerMetadata(lagoId string, key string, value string, displayInInvoice bool, createdAt time.Time) *CustomerMetadata {
	this := CustomerMetadata{}
	this.LagoId = lagoId
	this.Key = key
	this.Value = value
	this.DisplayInInvoice = displayInInvoice
	this.CreatedAt = createdAt
	return &this
}

// NewCustomerMetadataWithDefaults instantiates a new CustomerMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerMetadataWithDefaults() *CustomerMetadata {
	this := CustomerMetadata{}
	return &this
}

// GetLagoId returns the LagoId field value
func (o *CustomerMetadata) GetLagoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LagoId
}

// GetLagoIdOk returns a tuple with the LagoId field value
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LagoId, true
}

// SetLagoId sets field value
func (o *CustomerMetadata) SetLagoId(v string) {
	o.LagoId = v
}

// GetKey returns the Key field value
func (o *CustomerMetadata) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CustomerMetadata) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *CustomerMetadata) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CustomerMetadata) SetValue(v string) {
	o.Value = v
}

// GetDisplayInInvoice returns the DisplayInInvoice field value
func (o *CustomerMetadata) GetDisplayInInvoice() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisplayInInvoice
}

// GetDisplayInInvoiceOk returns a tuple with the DisplayInInvoice field value
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetDisplayInInvoiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayInInvoice, true
}

// SetDisplayInInvoice sets field value
func (o *CustomerMetadata) SetDisplayInInvoice(v bool) {
	o.DisplayInInvoice = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CustomerMetadata) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CustomerMetadata) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CustomerMetadata) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o CustomerMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lago_id"] = o.LagoId
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	toSerialize["display_in_invoice"] = o.DisplayInInvoice
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *CustomerMetadata) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lago_id",
		"key",
		"value",
		"display_in_invoice",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerMetadata := _CustomerMetadata{}

	err = json.Unmarshal(bytes, &varCustomerMetadata)

	if err != nil {
		return err
	}

	*o = CustomerMetadata(varCustomerMetadata)

	return err
}

type NullableCustomerMetadata struct {
	value *CustomerMetadata
	isSet bool
}

func (v NullableCustomerMetadata) Get() *CustomerMetadata {
	return v.value
}

func (v *NullableCustomerMetadata) Set(val *CustomerMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerMetadata(val *CustomerMetadata) *NullableCustomerMetadata {
	return &NullableCustomerMetadata{value: val, isSet: true}
}

func (v NullableCustomerMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


