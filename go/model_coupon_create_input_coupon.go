/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the CouponCreateInputCoupon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouponCreateInputCoupon{}

// CouponCreateInputCoupon struct for CouponCreateInputCoupon
type CouponCreateInputCoupon struct {
	// The name of the coupon.
	Name string `json:"name"`
	// Unique code used to identify the coupon.
	Code string `json:"code"`
	// Description of the coupon.
	Description NullableString `json:"description,omitempty"`
	// The type of the coupon. It can have two possible values: `fixed_amount` or `percentage`.  - If set to `fixed_amount`, the coupon represents a fixed amount discount. - If set to `percentage`, the coupon represents a percentage-based discount.
	CouponType string `json:"coupon_type"`
	// The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
	AmountCents NullableInt32 `json:"amount_cents,omitempty"`
	AmountCurrency *Currency `json:"amount_currency,omitempty"`
	// Indicates whether the coupon can be reused or not. If set to `true`, the coupon is reusable, meaning it can be applied multiple times to the same customer. If set to `false`, the coupon can only be used once and is not reusable. If not specified, this field is set to `true` by default.
	Reusable *bool `json:"reusable,omitempty"`
	// The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
	PercentageRate NullableString `json:"percentage_rate,omitempty"`
	// The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.  - If set to `once`, the coupon is applicable only for a single use. - If set to `recurring`, the coupon can be used multiple times for recurring billing periods. - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
	Frequency string `json:"frequency"`
	// Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
	FrequencyDuration NullableInt32 `json:"frequency_duration,omitempty"`
	// Specifies the type of expiration for the coupon. It can have two possible values: `time_limit` or `no_expiration`.  - If set to `time_limit`, the coupon has an expiration based on a specified time limit. - If set to `no_expiration`, the coupon does not have an expiration date and remains valid indefinitely.
	Expiration *string `json:"expiration,omitempty"`
	// The expiration date and time of the coupon. This field is required only for coupons with `expiration` set to `time_limit`. The expiration date and time should be specified in UTC format according to the ISO 8601 datetime standard. It indicates the exact moment when the coupon will expire and is no longer valid.
	ExpirationAt NullableTime `json:"expiration_at,omitempty"`
	AppliesTo NullableCouponBaseInputAppliesTo `json:"applies_to,omitempty"`
}

type _CouponCreateInputCoupon CouponCreateInputCoupon

// NewCouponCreateInputCoupon instantiates a new CouponCreateInputCoupon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouponCreateInputCoupon(name string, code string, couponType string, frequency string) *CouponCreateInputCoupon {
	this := CouponCreateInputCoupon{}
	this.Name = name
	this.Code = code
	this.CouponType = couponType
	this.Frequency = frequency
	return &this
}

// NewCouponCreateInputCouponWithDefaults instantiates a new CouponCreateInputCoupon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouponCreateInputCouponWithDefaults() *CouponCreateInputCoupon {
	this := CouponCreateInputCoupon{}
	return &this
}

// GetName returns the Name field value
func (o *CouponCreateInputCoupon) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CouponCreateInputCoupon) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *CouponCreateInputCoupon) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CouponCreateInputCoupon) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCreateInputCoupon) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCreateInputCoupon) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CouponCreateInputCoupon) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CouponCreateInputCoupon) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CouponCreateInputCoupon) UnsetDescription() {
	o.Description.Unset()
}

// GetCouponType returns the CouponType field value
func (o *CouponCreateInputCoupon) GetCouponType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CouponType
}

// GetCouponTypeOk returns a tuple with the CouponType field value
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetCouponTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CouponType, true
}

// SetCouponType sets field value
func (o *CouponCreateInputCoupon) SetCouponType(v string) {
	o.CouponType = v
}

// GetAmountCents returns the AmountCents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCreateInputCoupon) GetAmountCents() int32 {
	if o == nil || IsNil(o.AmountCents.Get()) {
		var ret int32
		return ret
	}
	return *o.AmountCents.Get()
}

// GetAmountCentsOk returns a tuple with the AmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCreateInputCoupon) GetAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountCents.Get(), o.AmountCents.IsSet()
}

// HasAmountCents returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasAmountCents() bool {
	if o != nil && o.AmountCents.IsSet() {
		return true
	}

	return false
}

// SetAmountCents gets a reference to the given NullableInt32 and assigns it to the AmountCents field.
func (o *CouponCreateInputCoupon) SetAmountCents(v int32) {
	o.AmountCents.Set(&v)
}
// SetAmountCentsNil sets the value for AmountCents to be an explicit nil
func (o *CouponCreateInputCoupon) SetAmountCentsNil() {
	o.AmountCents.Set(nil)
}

// UnsetAmountCents ensures that no value is present for AmountCents, not even an explicit nil
func (o *CouponCreateInputCoupon) UnsetAmountCents() {
	o.AmountCents.Unset()
}

// GetAmountCurrency returns the AmountCurrency field value if set, zero value otherwise.
func (o *CouponCreateInputCoupon) GetAmountCurrency() Currency {
	if o == nil || IsNil(o.AmountCurrency) {
		var ret Currency
		return ret
	}
	return *o.AmountCurrency
}

// GetAmountCurrencyOk returns a tuple with the AmountCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetAmountCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.AmountCurrency) {
		return nil, false
	}
	return o.AmountCurrency, true
}

// HasAmountCurrency returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasAmountCurrency() bool {
	if o != nil && !IsNil(o.AmountCurrency) {
		return true
	}

	return false
}

// SetAmountCurrency gets a reference to the given Currency and assigns it to the AmountCurrency field.
func (o *CouponCreateInputCoupon) SetAmountCurrency(v Currency) {
	o.AmountCurrency = &v
}

// GetReusable returns the Reusable field value if set, zero value otherwise.
func (o *CouponCreateInputCoupon) GetReusable() bool {
	if o == nil || IsNil(o.Reusable) {
		var ret bool
		return ret
	}
	return *o.Reusable
}

// GetReusableOk returns a tuple with the Reusable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetReusableOk() (*bool, bool) {
	if o == nil || IsNil(o.Reusable) {
		return nil, false
	}
	return o.Reusable, true
}

// HasReusable returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasReusable() bool {
	if o != nil && !IsNil(o.Reusable) {
		return true
	}

	return false
}

// SetReusable gets a reference to the given bool and assigns it to the Reusable field.
func (o *CouponCreateInputCoupon) SetReusable(v bool) {
	o.Reusable = &v
}

// GetPercentageRate returns the PercentageRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCreateInputCoupon) GetPercentageRate() string {
	if o == nil || IsNil(o.PercentageRate.Get()) {
		var ret string
		return ret
	}
	return *o.PercentageRate.Get()
}

// GetPercentageRateOk returns a tuple with the PercentageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCreateInputCoupon) GetPercentageRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PercentageRate.Get(), o.PercentageRate.IsSet()
}

// HasPercentageRate returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasPercentageRate() bool {
	if o != nil && o.PercentageRate.IsSet() {
		return true
	}

	return false
}

// SetPercentageRate gets a reference to the given NullableString and assigns it to the PercentageRate field.
func (o *CouponCreateInputCoupon) SetPercentageRate(v string) {
	o.PercentageRate.Set(&v)
}
// SetPercentageRateNil sets the value for PercentageRate to be an explicit nil
func (o *CouponCreateInputCoupon) SetPercentageRateNil() {
	o.PercentageRate.Set(nil)
}

// UnsetPercentageRate ensures that no value is present for PercentageRate, not even an explicit nil
func (o *CouponCreateInputCoupon) UnsetPercentageRate() {
	o.PercentageRate.Unset()
}

// GetFrequency returns the Frequency field value
func (o *CouponCreateInputCoupon) GetFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *CouponCreateInputCoupon) SetFrequency(v string) {
	o.Frequency = v
}

// GetFrequencyDuration returns the FrequencyDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCreateInputCoupon) GetFrequencyDuration() int32 {
	if o == nil || IsNil(o.FrequencyDuration.Get()) {
		var ret int32
		return ret
	}
	return *o.FrequencyDuration.Get()
}

// GetFrequencyDurationOk returns a tuple with the FrequencyDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCreateInputCoupon) GetFrequencyDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrequencyDuration.Get(), o.FrequencyDuration.IsSet()
}

// HasFrequencyDuration returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasFrequencyDuration() bool {
	if o != nil && o.FrequencyDuration.IsSet() {
		return true
	}

	return false
}

// SetFrequencyDuration gets a reference to the given NullableInt32 and assigns it to the FrequencyDuration field.
func (o *CouponCreateInputCoupon) SetFrequencyDuration(v int32) {
	o.FrequencyDuration.Set(&v)
}
// SetFrequencyDurationNil sets the value for FrequencyDuration to be an explicit nil
func (o *CouponCreateInputCoupon) SetFrequencyDurationNil() {
	o.FrequencyDuration.Set(nil)
}

// UnsetFrequencyDuration ensures that no value is present for FrequencyDuration, not even an explicit nil
func (o *CouponCreateInputCoupon) UnsetFrequencyDuration() {
	o.FrequencyDuration.Unset()
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *CouponCreateInputCoupon) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponCreateInputCoupon) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *CouponCreateInputCoupon) SetExpiration(v string) {
	o.Expiration = &v
}

// GetExpirationAt returns the ExpirationAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCreateInputCoupon) GetExpirationAt() time.Time {
	if o == nil || IsNil(o.ExpirationAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationAt.Get()
}

// GetExpirationAtOk returns a tuple with the ExpirationAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCreateInputCoupon) GetExpirationAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationAt.Get(), o.ExpirationAt.IsSet()
}

// HasExpirationAt returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasExpirationAt() bool {
	if o != nil && o.ExpirationAt.IsSet() {
		return true
	}

	return false
}

// SetExpirationAt gets a reference to the given NullableTime and assigns it to the ExpirationAt field.
func (o *CouponCreateInputCoupon) SetExpirationAt(v time.Time) {
	o.ExpirationAt.Set(&v)
}
// SetExpirationAtNil sets the value for ExpirationAt to be an explicit nil
func (o *CouponCreateInputCoupon) SetExpirationAtNil() {
	o.ExpirationAt.Set(nil)
}

// UnsetExpirationAt ensures that no value is present for ExpirationAt, not even an explicit nil
func (o *CouponCreateInputCoupon) UnsetExpirationAt() {
	o.ExpirationAt.Unset()
}

// GetAppliesTo returns the AppliesTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouponCreateInputCoupon) GetAppliesTo() CouponBaseInputAppliesTo {
	if o == nil || IsNil(o.AppliesTo.Get()) {
		var ret CouponBaseInputAppliesTo
		return ret
	}
	return *o.AppliesTo.Get()
}

// GetAppliesToOk returns a tuple with the AppliesTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouponCreateInputCoupon) GetAppliesToOk() (*CouponBaseInputAppliesTo, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppliesTo.Get(), o.AppliesTo.IsSet()
}

// HasAppliesTo returns a boolean if a field has been set.
func (o *CouponCreateInputCoupon) HasAppliesTo() bool {
	if o != nil && o.AppliesTo.IsSet() {
		return true
	}

	return false
}

// SetAppliesTo gets a reference to the given NullableCouponBaseInputAppliesTo and assigns it to the AppliesTo field.
func (o *CouponCreateInputCoupon) SetAppliesTo(v CouponBaseInputAppliesTo) {
	o.AppliesTo.Set(&v)
}
// SetAppliesToNil sets the value for AppliesTo to be an explicit nil
func (o *CouponCreateInputCoupon) SetAppliesToNil() {
	o.AppliesTo.Set(nil)
}

// UnsetAppliesTo ensures that no value is present for AppliesTo, not even an explicit nil
func (o *CouponCreateInputCoupon) UnsetAppliesTo() {
	o.AppliesTo.Unset()
}

func (o CouponCreateInputCoupon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouponCreateInputCoupon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["coupon_type"] = o.CouponType
	if o.AmountCents.IsSet() {
		toSerialize["amount_cents"] = o.AmountCents.Get()
	}
	if !IsNil(o.AmountCurrency) {
		toSerialize["amount_currency"] = o.AmountCurrency
	}
	if !IsNil(o.Reusable) {
		toSerialize["reusable"] = o.Reusable
	}
	if o.PercentageRate.IsSet() {
		toSerialize["percentage_rate"] = o.PercentageRate.Get()
	}
	toSerialize["frequency"] = o.Frequency
	if o.FrequencyDuration.IsSet() {
		toSerialize["frequency_duration"] = o.FrequencyDuration.Get()
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if o.ExpirationAt.IsSet() {
		toSerialize["expiration_at"] = o.ExpirationAt.Get()
	}
	if o.AppliesTo.IsSet() {
		toSerialize["applies_to"] = o.AppliesTo.Get()
	}
	return toSerialize, nil
}

func (o *CouponCreateInputCoupon) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"coupon_type",
		"frequency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCouponCreateInputCoupon := _CouponCreateInputCoupon{}

	err = json.Unmarshal(bytes, &varCouponCreateInputCoupon)

	if err != nil {
		return err
	}

	*o = CouponCreateInputCoupon(varCouponCreateInputCoupon)

	return err
}

type NullableCouponCreateInputCoupon struct {
	value *CouponCreateInputCoupon
	isSet bool
}

func (v NullableCouponCreateInputCoupon) Get() *CouponCreateInputCoupon {
	return v.value
}

func (v *NullableCouponCreateInputCoupon) Set(val *CouponCreateInputCoupon) {
	v.value = val
	v.isSet = true
}

func (v NullableCouponCreateInputCoupon) IsSet() bool {
	return v.isSet
}

func (v *NullableCouponCreateInputCoupon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouponCreateInputCoupon(val *CouponCreateInputCoupon) *NullableCouponCreateInputCoupon {
	return &NullableCouponCreateInputCoupon{value: val, isSet: true}
}

func (v NullableCouponCreateInputCoupon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouponCreateInputCoupon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


