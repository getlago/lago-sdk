/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GrossRevenueObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GrossRevenueObject{}

// GrossRevenueObject struct for GrossRevenueObject
type GrossRevenueObject struct {
	// Identifies the month to analyze revenue.
	Month string `json:"month"`
	// The total amount of revenue for a period, expressed in cents.
	AmountCents *int32 `json:"amount_cents,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
}

type _GrossRevenueObject GrossRevenueObject

// NewGrossRevenueObject instantiates a new GrossRevenueObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrossRevenueObject(month string) *GrossRevenueObject {
	this := GrossRevenueObject{}
	this.Month = month
	return &this
}

// NewGrossRevenueObjectWithDefaults instantiates a new GrossRevenueObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrossRevenueObjectWithDefaults() *GrossRevenueObject {
	this := GrossRevenueObject{}
	return &this
}

// GetMonth returns the Month field value
func (o *GrossRevenueObject) GetMonth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *GrossRevenueObject) GetMonthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *GrossRevenueObject) SetMonth(v string) {
	o.Month = v
}

// GetAmountCents returns the AmountCents field value if set, zero value otherwise.
func (o *GrossRevenueObject) GetAmountCents() int32 {
	if o == nil || IsNil(o.AmountCents) {
		var ret int32
		return ret
	}
	return *o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrossRevenueObject) GetAmountCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountCents) {
		return nil, false
	}
	return o.AmountCents, true
}

// HasAmountCents returns a boolean if a field has been set.
func (o *GrossRevenueObject) HasAmountCents() bool {
	if o != nil && !IsNil(o.AmountCents) {
		return true
	}

	return false
}

// SetAmountCents gets a reference to the given int32 and assigns it to the AmountCents field.
func (o *GrossRevenueObject) SetAmountCents(v int32) {
	o.AmountCents = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *GrossRevenueObject) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrossRevenueObject) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *GrossRevenueObject) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *GrossRevenueObject) SetCurrency(v Currency) {
	o.Currency = &v
}

func (o GrossRevenueObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GrossRevenueObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["month"] = o.Month
	if !IsNil(o.AmountCents) {
		toSerialize["amount_cents"] = o.AmountCents
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

func (o *GrossRevenueObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGrossRevenueObject := _GrossRevenueObject{}

	err = json.Unmarshal(bytes, &varGrossRevenueObject)

	if err != nil {
		return err
	}

	*o = GrossRevenueObject(varGrossRevenueObject)

	return err
}

type NullableGrossRevenueObject struct {
	value *GrossRevenueObject
	isSet bool
}

func (v NullableGrossRevenueObject) Get() *GrossRevenueObject {
	return v.value
}

func (v *NullableGrossRevenueObject) Set(val *GrossRevenueObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGrossRevenueObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGrossRevenueObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrossRevenueObject(val *GrossRevenueObject) *NullableGrossRevenueObject {
	return &NullableGrossRevenueObject{value: val, isSet: true}
}

func (v NullableGrossRevenueObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrossRevenueObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


