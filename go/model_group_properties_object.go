/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GroupPropertiesObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPropertiesObject{}

// GroupPropertiesObject struct for GroupPropertiesObject
type GroupPropertiesObject struct {
	// Unique identifier of a billable metric group, created by Lago.
	GroupId string `json:"group_id"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual group will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	Values GroupPropertiesObjectValues `json:"values"`
}

type _GroupPropertiesObject GroupPropertiesObject

// NewGroupPropertiesObject instantiates a new GroupPropertiesObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPropertiesObject(groupId string, values GroupPropertiesObjectValues) *GroupPropertiesObject {
	this := GroupPropertiesObject{}
	this.GroupId = groupId
	this.Values = values
	return &this
}

// NewGroupPropertiesObjectWithDefaults instantiates a new GroupPropertiesObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPropertiesObjectWithDefaults() *GroupPropertiesObject {
	this := GroupPropertiesObject{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *GroupPropertiesObject) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *GroupPropertiesObject) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *GroupPropertiesObject) SetGroupId(v string) {
	o.GroupId = v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *GroupPropertiesObject) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPropertiesObject) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *GroupPropertiesObject) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *GroupPropertiesObject) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetValues returns the Values field value
func (o *GroupPropertiesObject) GetValues() GroupPropertiesObjectValues {
	if o == nil {
		var ret GroupPropertiesObjectValues
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *GroupPropertiesObject) GetValuesOk() (*GroupPropertiesObjectValues, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *GroupPropertiesObject) SetValues(v GroupPropertiesObjectValues) {
	o.Values = v
}

func (o GroupPropertiesObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPropertiesObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_id"] = o.GroupId
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *GroupPropertiesObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupPropertiesObject := _GroupPropertiesObject{}

	err = json.Unmarshal(bytes, &varGroupPropertiesObject)

	if err != nil {
		return err
	}

	*o = GroupPropertiesObject(varGroupPropertiesObject)

	return err
}

type NullableGroupPropertiesObject struct {
	value *GroupPropertiesObject
	isSet bool
}

func (v NullableGroupPropertiesObject) Get() *GroupPropertiesObject {
	return v.value
}

func (v *NullableGroupPropertiesObject) Set(val *GroupPropertiesObject) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPropertiesObject) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPropertiesObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPropertiesObject(val *GroupPropertiesObject) *NullableGroupPropertiesObject {
	return &NullableGroupPropertiesObject{value: val, isSet: true}
}

func (v NullableGroupPropertiesObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPropertiesObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


