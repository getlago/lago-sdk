/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
)

// checks if the WalletUpdateInputWallet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletUpdateInputWallet{}

// WalletUpdateInputWallet struct for WalletUpdateInputWallet
type WalletUpdateInputWallet struct {
	// The name of the wallet.
	Name NullableString `json:"name,omitempty"`
	// The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
	ExpirationAt NullableTime `json:"expiration_at,omitempty"`
}

// NewWalletUpdateInputWallet instantiates a new WalletUpdateInputWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletUpdateInputWallet() *WalletUpdateInputWallet {
	this := WalletUpdateInputWallet{}
	return &this
}

// NewWalletUpdateInputWalletWithDefaults instantiates a new WalletUpdateInputWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletUpdateInputWalletWithDefaults() *WalletUpdateInputWallet {
	this := WalletUpdateInputWallet{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletUpdateInputWallet) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletUpdateInputWallet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *WalletUpdateInputWallet) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *WalletUpdateInputWallet) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *WalletUpdateInputWallet) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *WalletUpdateInputWallet) UnsetName() {
	o.Name.Unset()
}

// GetExpirationAt returns the ExpirationAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletUpdateInputWallet) GetExpirationAt() time.Time {
	if o == nil || IsNil(o.ExpirationAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationAt.Get()
}

// GetExpirationAtOk returns a tuple with the ExpirationAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletUpdateInputWallet) GetExpirationAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationAt.Get(), o.ExpirationAt.IsSet()
}

// HasExpirationAt returns a boolean if a field has been set.
func (o *WalletUpdateInputWallet) HasExpirationAt() bool {
	if o != nil && o.ExpirationAt.IsSet() {
		return true
	}

	return false
}

// SetExpirationAt gets a reference to the given NullableTime and assigns it to the ExpirationAt field.
func (o *WalletUpdateInputWallet) SetExpirationAt(v time.Time) {
	o.ExpirationAt.Set(&v)
}
// SetExpirationAtNil sets the value for ExpirationAt to be an explicit nil
func (o *WalletUpdateInputWallet) SetExpirationAtNil() {
	o.ExpirationAt.Set(nil)
}

// UnsetExpirationAt ensures that no value is present for ExpirationAt, not even an explicit nil
func (o *WalletUpdateInputWallet) UnsetExpirationAt() {
	o.ExpirationAt.Unset()
}

func (o WalletUpdateInputWallet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletUpdateInputWallet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ExpirationAt.IsSet() {
		toSerialize["expiration_at"] = o.ExpirationAt.Get()
	}
	return toSerialize, nil
}

type NullableWalletUpdateInputWallet struct {
	value *WalletUpdateInputWallet
	isSet bool
}

func (v NullableWalletUpdateInputWallet) Get() *WalletUpdateInputWallet {
	return v.value
}

func (v *NullableWalletUpdateInputWallet) Set(val *WalletUpdateInputWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletUpdateInputWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletUpdateInputWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletUpdateInputWallet(val *WalletUpdateInputWallet) *NullableWalletUpdateInputWallet {
	return &NullableWalletUpdateInputWallet{value: val, isSet: true}
}

func (v NullableWalletUpdateInputWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletUpdateInputWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


