/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TaxUpdateInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxUpdateInput{}

// TaxUpdateInput struct for TaxUpdateInput
type TaxUpdateInput struct {
	Tax TaxBaseInput `json:"tax"`
}

type _TaxUpdateInput TaxUpdateInput

// NewTaxUpdateInput instantiates a new TaxUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxUpdateInput(tax TaxBaseInput) *TaxUpdateInput {
	this := TaxUpdateInput{}
	this.Tax = tax
	return &this
}

// NewTaxUpdateInputWithDefaults instantiates a new TaxUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxUpdateInputWithDefaults() *TaxUpdateInput {
	this := TaxUpdateInput{}
	return &this
}

// GetTax returns the Tax field value
func (o *TaxUpdateInput) GetTax() TaxBaseInput {
	if o == nil {
		var ret TaxBaseInput
		return ret
	}

	return o.Tax
}

// GetTaxOk returns a tuple with the Tax field value
// and a boolean to check if the value has been set.
func (o *TaxUpdateInput) GetTaxOk() (*TaxBaseInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tax, true
}

// SetTax sets field value
func (o *TaxUpdateInput) SetTax(v TaxBaseInput) {
	o.Tax = v
}

func (o TaxUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxUpdateInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tax"] = o.Tax
	return toSerialize, nil
}

func (o *TaxUpdateInput) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tax",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxUpdateInput := _TaxUpdateInput{}

	err = json.Unmarshal(bytes, &varTaxUpdateInput)

	if err != nil {
		return err
	}

	*o = TaxUpdateInput(varTaxUpdateInput)

	return err
}

type NullableTaxUpdateInput struct {
	value *TaxUpdateInput
	isSet bool
}

func (v NullableTaxUpdateInput) Get() *TaxUpdateInput {
	return v.value
}

func (v *NullableTaxUpdateInput) Set(val *TaxUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxUpdateInput(val *TaxUpdateInput) *NullableTaxUpdateInput {
	return &NullableTaxUpdateInput{value: val, isSet: true}
}

func (v NullableTaxUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


