/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
)

// checks if the PlanOverridesObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanOverridesObject{}

// PlanOverridesObject Based plan overrides.
type PlanOverridesObject struct {
	// The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
	AmountCents *int32 `json:"amount_cents,omitempty"`
	AmountCurrency *Currency `json:"amount_currency,omitempty"`
	// The description on the plan.
	Description *string `json:"description,omitempty"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// The name of the plan.
	Name *string `json:"name,omitempty"`
	// List of unique code used to identify the taxes.
	TaxCodes []string `json:"tax_codes,omitempty"`
	// The duration in days during which the base cost of the plan is offered for free.
	TrialPeriod *float32 `json:"trial_period,omitempty"`
	// Additional usage-based charges for this plan.
	Charges []PlanOverridesObjectChargesInner `json:"charges,omitempty"`
}

// NewPlanOverridesObject instantiates a new PlanOverridesObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanOverridesObject() *PlanOverridesObject {
	this := PlanOverridesObject{}
	return &this
}

// NewPlanOverridesObjectWithDefaults instantiates a new PlanOverridesObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanOverridesObjectWithDefaults() *PlanOverridesObject {
	this := PlanOverridesObject{}
	return &this
}

// GetAmountCents returns the AmountCents field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetAmountCents() int32 {
	if o == nil || IsNil(o.AmountCents) {
		var ret int32
		return ret
	}
	return *o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetAmountCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountCents) {
		return nil, false
	}
	return o.AmountCents, true
}

// HasAmountCents returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasAmountCents() bool {
	if o != nil && !IsNil(o.AmountCents) {
		return true
	}

	return false
}

// SetAmountCents gets a reference to the given int32 and assigns it to the AmountCents field.
func (o *PlanOverridesObject) SetAmountCents(v int32) {
	o.AmountCents = &v
}

// GetAmountCurrency returns the AmountCurrency field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetAmountCurrency() Currency {
	if o == nil || IsNil(o.AmountCurrency) {
		var ret Currency
		return ret
	}
	return *o.AmountCurrency
}

// GetAmountCurrencyOk returns a tuple with the AmountCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetAmountCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.AmountCurrency) {
		return nil, false
	}
	return o.AmountCurrency, true
}

// HasAmountCurrency returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasAmountCurrency() bool {
	if o != nil && !IsNil(o.AmountCurrency) {
		return true
	}

	return false
}

// SetAmountCurrency gets a reference to the given Currency and assigns it to the AmountCurrency field.
func (o *PlanOverridesObject) SetAmountCurrency(v Currency) {
	o.AmountCurrency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlanOverridesObject) SetDescription(v string) {
	o.Description = &v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *PlanOverridesObject) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlanOverridesObject) SetName(v string) {
	o.Name = &v
}

// GetTaxCodes returns the TaxCodes field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetTaxCodes() []string {
	if o == nil || IsNil(o.TaxCodes) {
		var ret []string
		return ret
	}
	return o.TaxCodes
}

// GetTaxCodesOk returns a tuple with the TaxCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetTaxCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TaxCodes) {
		return nil, false
	}
	return o.TaxCodes, true
}

// HasTaxCodes returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasTaxCodes() bool {
	if o != nil && !IsNil(o.TaxCodes) {
		return true
	}

	return false
}

// SetTaxCodes gets a reference to the given []string and assigns it to the TaxCodes field.
func (o *PlanOverridesObject) SetTaxCodes(v []string) {
	o.TaxCodes = v
}

// GetTrialPeriod returns the TrialPeriod field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetTrialPeriod() float32 {
	if o == nil || IsNil(o.TrialPeriod) {
		var ret float32
		return ret
	}
	return *o.TrialPeriod
}

// GetTrialPeriodOk returns a tuple with the TrialPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetTrialPeriodOk() (*float32, bool) {
	if o == nil || IsNil(o.TrialPeriod) {
		return nil, false
	}
	return o.TrialPeriod, true
}

// HasTrialPeriod returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasTrialPeriod() bool {
	if o != nil && !IsNil(o.TrialPeriod) {
		return true
	}

	return false
}

// SetTrialPeriod gets a reference to the given float32 and assigns it to the TrialPeriod field.
func (o *PlanOverridesObject) SetTrialPeriod(v float32) {
	o.TrialPeriod = &v
}

// GetCharges returns the Charges field value if set, zero value otherwise.
func (o *PlanOverridesObject) GetCharges() []PlanOverridesObjectChargesInner {
	if o == nil || IsNil(o.Charges) {
		var ret []PlanOverridesObjectChargesInner
		return ret
	}
	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanOverridesObject) GetChargesOk() ([]PlanOverridesObjectChargesInner, bool) {
	if o == nil || IsNil(o.Charges) {
		return nil, false
	}
	return o.Charges, true
}

// HasCharges returns a boolean if a field has been set.
func (o *PlanOverridesObject) HasCharges() bool {
	if o != nil && !IsNil(o.Charges) {
		return true
	}

	return false
}

// SetCharges gets a reference to the given []PlanOverridesObjectChargesInner and assigns it to the Charges field.
func (o *PlanOverridesObject) SetCharges(v []PlanOverridesObjectChargesInner) {
	o.Charges = v
}

func (o PlanOverridesObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanOverridesObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountCents) {
		toSerialize["amount_cents"] = o.AmountCents
	}
	if !IsNil(o.AmountCurrency) {
		toSerialize["amount_currency"] = o.AmountCurrency
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TaxCodes) {
		toSerialize["tax_codes"] = o.TaxCodes
	}
	if !IsNil(o.TrialPeriod) {
		toSerialize["trial_period"] = o.TrialPeriod
	}
	if !IsNil(o.Charges) {
		toSerialize["charges"] = o.Charges
	}
	return toSerialize, nil
}

type NullablePlanOverridesObject struct {
	value *PlanOverridesObject
	isSet bool
}

func (v NullablePlanOverridesObject) Get() *PlanOverridesObject {
	return v.value
}

func (v *NullablePlanOverridesObject) Set(val *PlanOverridesObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanOverridesObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanOverridesObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanOverridesObject(val *PlanOverridesObject) *NullablePlanOverridesObject {
	return &NullablePlanOverridesObject{value: val, isSet: true}
}

func (v NullablePlanOverridesObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanOverridesObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


