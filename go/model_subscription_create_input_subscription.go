/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SubscriptionCreateInputSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionCreateInputSubscription{}

// SubscriptionCreateInputSubscription struct for SubscriptionCreateInputSubscription
type SubscriptionCreateInputSubscription struct {
	// The customer external unique identifier (provided by your own application)
	ExternalCustomerId string `json:"external_customer_id"`
	// The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.
	PlanCode string `json:"plan_code"`
	// The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
	Name *string `json:"name,omitempty"`
	// The unique external identifier for the subscription. This identifier serves as an idempotency key, ensuring that each subscription is unique.
	ExternalId string `json:"external_id"`
	// The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).
	BillingTime *string `json:"billing_time,omitempty"`
	// The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
	EndingAt *time.Time `json:"ending_at,omitempty"`
	// The start date for the subscription, allowing for the creation of subscriptions that can begin in the past or future. Please note that it cannot be used to update the start date of a pending subscription or schedule an upgrade/downgrade. The start_date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
	SubscriptionAt *time.Time `json:"subscription_at,omitempty"`
	PlanOverrides *PlanOverridesObject `json:"plan_overrides,omitempty"`
}

type _SubscriptionCreateInputSubscription SubscriptionCreateInputSubscription

// NewSubscriptionCreateInputSubscription instantiates a new SubscriptionCreateInputSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionCreateInputSubscription(externalCustomerId string, planCode string, externalId string) *SubscriptionCreateInputSubscription {
	this := SubscriptionCreateInputSubscription{}
	this.ExternalCustomerId = externalCustomerId
	this.PlanCode = planCode
	this.ExternalId = externalId
	return &this
}

// NewSubscriptionCreateInputSubscriptionWithDefaults instantiates a new SubscriptionCreateInputSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionCreateInputSubscriptionWithDefaults() *SubscriptionCreateInputSubscription {
	this := SubscriptionCreateInputSubscription{}
	return &this
}

// GetExternalCustomerId returns the ExternalCustomerId field value
func (o *SubscriptionCreateInputSubscription) GetExternalCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalCustomerId
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalCustomerId, true
}

// SetExternalCustomerId sets field value
func (o *SubscriptionCreateInputSubscription) SetExternalCustomerId(v string) {
	o.ExternalCustomerId = v
}

// GetPlanCode returns the PlanCode field value
func (o *SubscriptionCreateInputSubscription) GetPlanCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanCode
}

// GetPlanCodeOk returns a tuple with the PlanCode field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetPlanCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanCode, true
}

// SetPlanCode sets field value
func (o *SubscriptionCreateInputSubscription) SetPlanCode(v string) {
	o.PlanCode = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubscriptionCreateInputSubscription) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubscriptionCreateInputSubscription) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubscriptionCreateInputSubscription) SetName(v string) {
	o.Name = &v
}

// GetExternalId returns the ExternalId field value
func (o *SubscriptionCreateInputSubscription) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *SubscriptionCreateInputSubscription) SetExternalId(v string) {
	o.ExternalId = v
}

// GetBillingTime returns the BillingTime field value if set, zero value otherwise.
func (o *SubscriptionCreateInputSubscription) GetBillingTime() string {
	if o == nil || IsNil(o.BillingTime) {
		var ret string
		return ret
	}
	return *o.BillingTime
}

// GetBillingTimeOk returns a tuple with the BillingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetBillingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.BillingTime) {
		return nil, false
	}
	return o.BillingTime, true
}

// HasBillingTime returns a boolean if a field has been set.
func (o *SubscriptionCreateInputSubscription) HasBillingTime() bool {
	if o != nil && !IsNil(o.BillingTime) {
		return true
	}

	return false
}

// SetBillingTime gets a reference to the given string and assigns it to the BillingTime field.
func (o *SubscriptionCreateInputSubscription) SetBillingTime(v string) {
	o.BillingTime = &v
}

// GetEndingAt returns the EndingAt field value if set, zero value otherwise.
func (o *SubscriptionCreateInputSubscription) GetEndingAt() time.Time {
	if o == nil || IsNil(o.EndingAt) {
		var ret time.Time
		return ret
	}
	return *o.EndingAt
}

// GetEndingAtOk returns a tuple with the EndingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetEndingAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndingAt) {
		return nil, false
	}
	return o.EndingAt, true
}

// HasEndingAt returns a boolean if a field has been set.
func (o *SubscriptionCreateInputSubscription) HasEndingAt() bool {
	if o != nil && !IsNil(o.EndingAt) {
		return true
	}

	return false
}

// SetEndingAt gets a reference to the given time.Time and assigns it to the EndingAt field.
func (o *SubscriptionCreateInputSubscription) SetEndingAt(v time.Time) {
	o.EndingAt = &v
}

// GetSubscriptionAt returns the SubscriptionAt field value if set, zero value otherwise.
func (o *SubscriptionCreateInputSubscription) GetSubscriptionAt() time.Time {
	if o == nil || IsNil(o.SubscriptionAt) {
		var ret time.Time
		return ret
	}
	return *o.SubscriptionAt
}

// GetSubscriptionAtOk returns a tuple with the SubscriptionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetSubscriptionAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubscriptionAt) {
		return nil, false
	}
	return o.SubscriptionAt, true
}

// HasSubscriptionAt returns a boolean if a field has been set.
func (o *SubscriptionCreateInputSubscription) HasSubscriptionAt() bool {
	if o != nil && !IsNil(o.SubscriptionAt) {
		return true
	}

	return false
}

// SetSubscriptionAt gets a reference to the given time.Time and assigns it to the SubscriptionAt field.
func (o *SubscriptionCreateInputSubscription) SetSubscriptionAt(v time.Time) {
	o.SubscriptionAt = &v
}

// GetPlanOverrides returns the PlanOverrides field value if set, zero value otherwise.
func (o *SubscriptionCreateInputSubscription) GetPlanOverrides() PlanOverridesObject {
	if o == nil || IsNil(o.PlanOverrides) {
		var ret PlanOverridesObject
		return ret
	}
	return *o.PlanOverrides
}

// GetPlanOverridesOk returns a tuple with the PlanOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionCreateInputSubscription) GetPlanOverridesOk() (*PlanOverridesObject, bool) {
	if o == nil || IsNil(o.PlanOverrides) {
		return nil, false
	}
	return o.PlanOverrides, true
}

// HasPlanOverrides returns a boolean if a field has been set.
func (o *SubscriptionCreateInputSubscription) HasPlanOverrides() bool {
	if o != nil && !IsNil(o.PlanOverrides) {
		return true
	}

	return false
}

// SetPlanOverrides gets a reference to the given PlanOverridesObject and assigns it to the PlanOverrides field.
func (o *SubscriptionCreateInputSubscription) SetPlanOverrides(v PlanOverridesObject) {
	o.PlanOverrides = &v
}

func (o SubscriptionCreateInputSubscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionCreateInputSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["external_customer_id"] = o.ExternalCustomerId
	toSerialize["plan_code"] = o.PlanCode
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["external_id"] = o.ExternalId
	if !IsNil(o.BillingTime) {
		toSerialize["billing_time"] = o.BillingTime
	}
	if !IsNil(o.EndingAt) {
		toSerialize["ending_at"] = o.EndingAt
	}
	if !IsNil(o.SubscriptionAt) {
		toSerialize["subscription_at"] = o.SubscriptionAt
	}
	if !IsNil(o.PlanOverrides) {
		toSerialize["plan_overrides"] = o.PlanOverrides
	}
	return toSerialize, nil
}

func (o *SubscriptionCreateInputSubscription) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"external_customer_id",
		"plan_code",
		"external_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionCreateInputSubscription := _SubscriptionCreateInputSubscription{}

	err = json.Unmarshal(bytes, &varSubscriptionCreateInputSubscription)

	if err != nil {
		return err
	}

	*o = SubscriptionCreateInputSubscription(varSubscriptionCreateInputSubscription)

	return err
}

type NullableSubscriptionCreateInputSubscription struct {
	value *SubscriptionCreateInputSubscription
	isSet bool
}

func (v NullableSubscriptionCreateInputSubscription) Get() *SubscriptionCreateInputSubscription {
	return v.value
}

func (v *NullableSubscriptionCreateInputSubscription) Set(val *SubscriptionCreateInputSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCreateInputSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCreateInputSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCreateInputSubscription(val *SubscriptionCreateInputSubscription) *NullableSubscriptionCreateInputSubscription {
	return &NullableSubscriptionCreateInputSubscription{value: val, isSet: true}
}

func (v NullableSubscriptionCreateInputSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCreateInputSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


