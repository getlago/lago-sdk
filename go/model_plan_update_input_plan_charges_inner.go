/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
)

// checks if the PlanUpdateInputPlanChargesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanUpdateInputPlanChargesInner{}

// PlanUpdateInputPlanChargesInner struct for PlanUpdateInputPlanChargesInner
type PlanUpdateInputPlanChargesInner struct {
	// Unique identifier of the charge created by Lago.
	Id *string `json:"id,omitempty"`
	// Unique identifier of the billable metric created by Lago.
	BillableMetricId *string `json:"billable_metric_id,omitempty"`
	// Specifies the pricing model used for the calculation of the final fee. It can be `standard`, `graduated`, `graduated_percentage`, `package`, `percentage` or `volume`.
	ChargeModel *string `json:"charge_model,omitempty"`
	// This field determines the billing timing for this specific usage-based charge. When set to `true`, the charge is due and invoiced immediately. Conversely, when set to false, the charge is due and invoiced at the end of each billing period.
	PayInAdvance *bool `json:"pay_in_advance,omitempty"`
	// This field specifies whether the charge should be included in a proper invoice. If set to false, no invoice will be issued for this charge. You can only set it to `false` when `pay_in_advance` is `true`.
	Invoiceable *bool `json:"invoiceable,omitempty"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// Specifies whether a charge is prorated based on the remaining number of days in the billing period or billed fully.  - If set to `true`, the charge is prorated based on the remaining days in the current billing period. - If set to `false`, the charge is billed in full. - If not defined in the request, default value is `false`.
	Prorated *bool `json:"prorated,omitempty"`
	// The minimum spending amount required for the charge, measured in cents and excluding any applicable taxes. It indicates the minimum amount that needs to be charged for each billing period.
	MinAmountCents *int32 `json:"min_amount_cents,omitempty"`
	Properties *ChargeObjectProperties `json:"properties,omitempty"`
	// All charge information, sorted by groups.
	GroupProperties []PlanCreateInputPlanChargesInnerGroupPropertiesInner `json:"group_properties,omitempty"`
	// List of unique code used to identify the taxes.
	TaxCodes []string `json:"tax_codes,omitempty"`
}

// NewPlanUpdateInputPlanChargesInner instantiates a new PlanUpdateInputPlanChargesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanUpdateInputPlanChargesInner() *PlanUpdateInputPlanChargesInner {
	this := PlanUpdateInputPlanChargesInner{}
	return &this
}

// NewPlanUpdateInputPlanChargesInnerWithDefaults instantiates a new PlanUpdateInputPlanChargesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanUpdateInputPlanChargesInnerWithDefaults() *PlanUpdateInputPlanChargesInner {
	this := PlanUpdateInputPlanChargesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlanUpdateInputPlanChargesInner) SetId(v string) {
	o.Id = &v
}

// GetBillableMetricId returns the BillableMetricId field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetBillableMetricId() string {
	if o == nil || IsNil(o.BillableMetricId) {
		var ret string
		return ret
	}
	return *o.BillableMetricId
}

// GetBillableMetricIdOk returns a tuple with the BillableMetricId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetBillableMetricIdOk() (*string, bool) {
	if o == nil || IsNil(o.BillableMetricId) {
		return nil, false
	}
	return o.BillableMetricId, true
}

// HasBillableMetricId returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasBillableMetricId() bool {
	if o != nil && !IsNil(o.BillableMetricId) {
		return true
	}

	return false
}

// SetBillableMetricId gets a reference to the given string and assigns it to the BillableMetricId field.
func (o *PlanUpdateInputPlanChargesInner) SetBillableMetricId(v string) {
	o.BillableMetricId = &v
}

// GetChargeModel returns the ChargeModel field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetChargeModel() string {
	if o == nil || IsNil(o.ChargeModel) {
		var ret string
		return ret
	}
	return *o.ChargeModel
}

// GetChargeModelOk returns a tuple with the ChargeModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetChargeModelOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeModel) {
		return nil, false
	}
	return o.ChargeModel, true
}

// HasChargeModel returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasChargeModel() bool {
	if o != nil && !IsNil(o.ChargeModel) {
		return true
	}

	return false
}

// SetChargeModel gets a reference to the given string and assigns it to the ChargeModel field.
func (o *PlanUpdateInputPlanChargesInner) SetChargeModel(v string) {
	o.ChargeModel = &v
}

// GetPayInAdvance returns the PayInAdvance field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetPayInAdvance() bool {
	if o == nil || IsNil(o.PayInAdvance) {
		var ret bool
		return ret
	}
	return *o.PayInAdvance
}

// GetPayInAdvanceOk returns a tuple with the PayInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetPayInAdvanceOk() (*bool, bool) {
	if o == nil || IsNil(o.PayInAdvance) {
		return nil, false
	}
	return o.PayInAdvance, true
}

// HasPayInAdvance returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasPayInAdvance() bool {
	if o != nil && !IsNil(o.PayInAdvance) {
		return true
	}

	return false
}

// SetPayInAdvance gets a reference to the given bool and assigns it to the PayInAdvance field.
func (o *PlanUpdateInputPlanChargesInner) SetPayInAdvance(v bool) {
	o.PayInAdvance = &v
}

// GetInvoiceable returns the Invoiceable field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetInvoiceable() bool {
	if o == nil || IsNil(o.Invoiceable) {
		var ret bool
		return ret
	}
	return *o.Invoiceable
}

// GetInvoiceableOk returns a tuple with the Invoiceable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetInvoiceableOk() (*bool, bool) {
	if o == nil || IsNil(o.Invoiceable) {
		return nil, false
	}
	return o.Invoiceable, true
}

// HasInvoiceable returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasInvoiceable() bool {
	if o != nil && !IsNil(o.Invoiceable) {
		return true
	}

	return false
}

// SetInvoiceable gets a reference to the given bool and assigns it to the Invoiceable field.
func (o *PlanUpdateInputPlanChargesInner) SetInvoiceable(v bool) {
	o.Invoiceable = &v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *PlanUpdateInputPlanChargesInner) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetProrated returns the Prorated field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetProrated() bool {
	if o == nil || IsNil(o.Prorated) {
		var ret bool
		return ret
	}
	return *o.Prorated
}

// GetProratedOk returns a tuple with the Prorated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetProratedOk() (*bool, bool) {
	if o == nil || IsNil(o.Prorated) {
		return nil, false
	}
	return o.Prorated, true
}

// HasProrated returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasProrated() bool {
	if o != nil && !IsNil(o.Prorated) {
		return true
	}

	return false
}

// SetProrated gets a reference to the given bool and assigns it to the Prorated field.
func (o *PlanUpdateInputPlanChargesInner) SetProrated(v bool) {
	o.Prorated = &v
}

// GetMinAmountCents returns the MinAmountCents field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetMinAmountCents() int32 {
	if o == nil || IsNil(o.MinAmountCents) {
		var ret int32
		return ret
	}
	return *o.MinAmountCents
}

// GetMinAmountCentsOk returns a tuple with the MinAmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetMinAmountCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinAmountCents) {
		return nil, false
	}
	return o.MinAmountCents, true
}

// HasMinAmountCents returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasMinAmountCents() bool {
	if o != nil && !IsNil(o.MinAmountCents) {
		return true
	}

	return false
}

// SetMinAmountCents gets a reference to the given int32 and assigns it to the MinAmountCents field.
func (o *PlanUpdateInputPlanChargesInner) SetMinAmountCents(v int32) {
	o.MinAmountCents = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetProperties() ChargeObjectProperties {
	if o == nil || IsNil(o.Properties) {
		var ret ChargeObjectProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetPropertiesOk() (*ChargeObjectProperties, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given ChargeObjectProperties and assigns it to the Properties field.
func (o *PlanUpdateInputPlanChargesInner) SetProperties(v ChargeObjectProperties) {
	o.Properties = &v
}

// GetGroupProperties returns the GroupProperties field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetGroupProperties() []PlanCreateInputPlanChargesInnerGroupPropertiesInner {
	if o == nil || IsNil(o.GroupProperties) {
		var ret []PlanCreateInputPlanChargesInnerGroupPropertiesInner
		return ret
	}
	return o.GroupProperties
}

// GetGroupPropertiesOk returns a tuple with the GroupProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetGroupPropertiesOk() ([]PlanCreateInputPlanChargesInnerGroupPropertiesInner, bool) {
	if o == nil || IsNil(o.GroupProperties) {
		return nil, false
	}
	return o.GroupProperties, true
}

// HasGroupProperties returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasGroupProperties() bool {
	if o != nil && !IsNil(o.GroupProperties) {
		return true
	}

	return false
}

// SetGroupProperties gets a reference to the given []PlanCreateInputPlanChargesInnerGroupPropertiesInner and assigns it to the GroupProperties field.
func (o *PlanUpdateInputPlanChargesInner) SetGroupProperties(v []PlanCreateInputPlanChargesInnerGroupPropertiesInner) {
	o.GroupProperties = v
}

// GetTaxCodes returns the TaxCodes field value if set, zero value otherwise.
func (o *PlanUpdateInputPlanChargesInner) GetTaxCodes() []string {
	if o == nil || IsNil(o.TaxCodes) {
		var ret []string
		return ret
	}
	return o.TaxCodes
}

// GetTaxCodesOk returns a tuple with the TaxCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateInputPlanChargesInner) GetTaxCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TaxCodes) {
		return nil, false
	}
	return o.TaxCodes, true
}

// HasTaxCodes returns a boolean if a field has been set.
func (o *PlanUpdateInputPlanChargesInner) HasTaxCodes() bool {
	if o != nil && !IsNil(o.TaxCodes) {
		return true
	}

	return false
}

// SetTaxCodes gets a reference to the given []string and assigns it to the TaxCodes field.
func (o *PlanUpdateInputPlanChargesInner) SetTaxCodes(v []string) {
	o.TaxCodes = v
}

func (o PlanUpdateInputPlanChargesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanUpdateInputPlanChargesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.BillableMetricId) {
		toSerialize["billable_metric_id"] = o.BillableMetricId
	}
	if !IsNil(o.ChargeModel) {
		toSerialize["charge_model"] = o.ChargeModel
	}
	if !IsNil(o.PayInAdvance) {
		toSerialize["pay_in_advance"] = o.PayInAdvance
	}
	if !IsNil(o.Invoiceable) {
		toSerialize["invoiceable"] = o.Invoiceable
	}
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	if !IsNil(o.Prorated) {
		toSerialize["prorated"] = o.Prorated
	}
	if !IsNil(o.MinAmountCents) {
		toSerialize["min_amount_cents"] = o.MinAmountCents
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.GroupProperties) {
		toSerialize["group_properties"] = o.GroupProperties
	}
	if !IsNil(o.TaxCodes) {
		toSerialize["tax_codes"] = o.TaxCodes
	}
	return toSerialize, nil
}

type NullablePlanUpdateInputPlanChargesInner struct {
	value *PlanUpdateInputPlanChargesInner
	isSet bool
}

func (v NullablePlanUpdateInputPlanChargesInner) Get() *PlanUpdateInputPlanChargesInner {
	return v.value
}

func (v *NullablePlanUpdateInputPlanChargesInner) Set(val *PlanUpdateInputPlanChargesInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanUpdateInputPlanChargesInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanUpdateInputPlanChargesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanUpdateInputPlanChargesInner(val *PlanUpdateInputPlanChargesInner) *NullablePlanUpdateInputPlanChargesInner {
	return &NullablePlanUpdateInputPlanChargesInner{value: val, isSet: true}
}

func (v NullablePlanUpdateInputPlanChargesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanUpdateInputPlanChargesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


