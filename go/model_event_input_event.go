/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EventInputEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventInputEvent{}

// EventInputEvent struct for EventInputEvent
type EventInputEvent struct {
	// This field represents a unique identifier for the event. It is crucial for ensuring idempotency, meaning that each event can be uniquely identified and processed without causing any unintended side effects.
	TransactionId string `json:"transaction_id"`
	// The customer external unique identifier (provided by your own application). This field is optional if you send the `external_subscription_id`, targeting a specific subscription.
	ExternalCustomerId *string `json:"external_customer_id,omitempty"`
	// The unique identifier of the subscription within your application. It is a mandatory field when the customer possesses multiple subscriptions or when the `external_customer_id` is not provided.
	ExternalSubscriptionId *string `json:"external_subscription_id,omitempty"`
	// The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.
	Code string `json:"code"`
	Timestamp *EventInputEventTimestamp `json:"timestamp,omitempty"`
	// This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required.
	Properties *map[string]string `json:"properties,omitempty"`
}

type _EventInputEvent EventInputEvent

// NewEventInputEvent instantiates a new EventInputEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventInputEvent(transactionId string, code string) *EventInputEvent {
	this := EventInputEvent{}
	this.TransactionId = transactionId
	this.Code = code
	return &this
}

// NewEventInputEventWithDefaults instantiates a new EventInputEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventInputEventWithDefaults() *EventInputEvent {
	this := EventInputEvent{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *EventInputEvent) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *EventInputEvent) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *EventInputEvent) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetExternalCustomerId returns the ExternalCustomerId field value if set, zero value otherwise.
func (o *EventInputEvent) GetExternalCustomerId() string {
	if o == nil || IsNil(o.ExternalCustomerId) {
		var ret string
		return ret
	}
	return *o.ExternalCustomerId
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInputEvent) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCustomerId) {
		return nil, false
	}
	return o.ExternalCustomerId, true
}

// HasExternalCustomerId returns a boolean if a field has been set.
func (o *EventInputEvent) HasExternalCustomerId() bool {
	if o != nil && !IsNil(o.ExternalCustomerId) {
		return true
	}

	return false
}

// SetExternalCustomerId gets a reference to the given string and assigns it to the ExternalCustomerId field.
func (o *EventInputEvent) SetExternalCustomerId(v string) {
	o.ExternalCustomerId = &v
}

// GetExternalSubscriptionId returns the ExternalSubscriptionId field value if set, zero value otherwise.
func (o *EventInputEvent) GetExternalSubscriptionId() string {
	if o == nil || IsNil(o.ExternalSubscriptionId) {
		var ret string
		return ret
	}
	return *o.ExternalSubscriptionId
}

// GetExternalSubscriptionIdOk returns a tuple with the ExternalSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInputEvent) GetExternalSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSubscriptionId) {
		return nil, false
	}
	return o.ExternalSubscriptionId, true
}

// HasExternalSubscriptionId returns a boolean if a field has been set.
func (o *EventInputEvent) HasExternalSubscriptionId() bool {
	if o != nil && !IsNil(o.ExternalSubscriptionId) {
		return true
	}

	return false
}

// SetExternalSubscriptionId gets a reference to the given string and assigns it to the ExternalSubscriptionId field.
func (o *EventInputEvent) SetExternalSubscriptionId(v string) {
	o.ExternalSubscriptionId = &v
}

// GetCode returns the Code field value
func (o *EventInputEvent) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *EventInputEvent) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *EventInputEvent) SetCode(v string) {
	o.Code = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *EventInputEvent) GetTimestamp() EventInputEventTimestamp {
	if o == nil || IsNil(o.Timestamp) {
		var ret EventInputEventTimestamp
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInputEvent) GetTimestampOk() (*EventInputEventTimestamp, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *EventInputEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given EventInputEventTimestamp and assigns it to the Timestamp field.
func (o *EventInputEvent) SetTimestamp(v EventInputEventTimestamp) {
	o.Timestamp = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EventInputEvent) GetProperties() map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInputEvent) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EventInputEvent) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *EventInputEvent) SetProperties(v map[string]string) {
	o.Properties = &v
}

func (o EventInputEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventInputEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_id"] = o.TransactionId
	if !IsNil(o.ExternalCustomerId) {
		toSerialize["external_customer_id"] = o.ExternalCustomerId
	}
	if !IsNil(o.ExternalSubscriptionId) {
		toSerialize["external_subscription_id"] = o.ExternalSubscriptionId
	}
	toSerialize["code"] = o.Code
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *EventInputEvent) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_id",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventInputEvent := _EventInputEvent{}

	err = json.Unmarshal(bytes, &varEventInputEvent)

	if err != nil {
		return err
	}

	*o = EventInputEvent(varEventInputEvent)

	return err
}

type NullableEventInputEvent struct {
	value *EventInputEvent
	isSet bool
}

func (v NullableEventInputEvent) Get() *EventInputEvent {
	return v.value
}

func (v *NullableEventInputEvent) Set(val *EventInputEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInputEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInputEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInputEvent(val *EventInputEvent) *NullableEventInputEvent {
	return &NullableEventInputEvent{value: val, isSet: true}
}

func (v NullableEventInputEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInputEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


