/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
)

// checks if the AddOnBaseInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOnBaseInput{}

// AddOnBaseInput struct for AddOnBaseInput
type AddOnBaseInput struct {
	// The name of the add-on.
	Name *string `json:"name,omitempty"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// Unique code used to identify the add-on.
	Code *string `json:"code,omitempty"`
	// The cost of the add-on in cents, excluding any applicable taxes, that is billed to a customer. By creating a one-off invoice, you will be able to override this value.
	AmountCents *int32 `json:"amount_cents,omitempty"`
	AmountCurrency *Currency `json:"amount_currency,omitempty"`
	// The description of the add-on.
	Description NullableString `json:"description,omitempty"`
	// List of unique code used to identify the taxes.
	TaxCodes []string `json:"tax_codes,omitempty"`
}

// NewAddOnBaseInput instantiates a new AddOnBaseInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOnBaseInput() *AddOnBaseInput {
	this := AddOnBaseInput{}
	return &this
}

// NewAddOnBaseInputWithDefaults instantiates a new AddOnBaseInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOnBaseInputWithDefaults() *AddOnBaseInput {
	this := AddOnBaseInput{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddOnBaseInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnBaseInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddOnBaseInput) SetName(v string) {
	o.Name = &v
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *AddOnBaseInput) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnBaseInput) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *AddOnBaseInput) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AddOnBaseInput) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnBaseInput) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AddOnBaseInput) SetCode(v string) {
	o.Code = &v
}

// GetAmountCents returns the AmountCents field value if set, zero value otherwise.
func (o *AddOnBaseInput) GetAmountCents() int32 {
	if o == nil || IsNil(o.AmountCents) {
		var ret int32
		return ret
	}
	return *o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnBaseInput) GetAmountCentsOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountCents) {
		return nil, false
	}
	return o.AmountCents, true
}

// HasAmountCents returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasAmountCents() bool {
	if o != nil && !IsNil(o.AmountCents) {
		return true
	}

	return false
}

// SetAmountCents gets a reference to the given int32 and assigns it to the AmountCents field.
func (o *AddOnBaseInput) SetAmountCents(v int32) {
	o.AmountCents = &v
}

// GetAmountCurrency returns the AmountCurrency field value if set, zero value otherwise.
func (o *AddOnBaseInput) GetAmountCurrency() Currency {
	if o == nil || IsNil(o.AmountCurrency) {
		var ret Currency
		return ret
	}
	return *o.AmountCurrency
}

// GetAmountCurrencyOk returns a tuple with the AmountCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnBaseInput) GetAmountCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.AmountCurrency) {
		return nil, false
	}
	return o.AmountCurrency, true
}

// HasAmountCurrency returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasAmountCurrency() bool {
	if o != nil && !IsNil(o.AmountCurrency) {
		return true
	}

	return false
}

// SetAmountCurrency gets a reference to the given Currency and assigns it to the AmountCurrency field.
func (o *AddOnBaseInput) SetAmountCurrency(v Currency) {
	o.AmountCurrency = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddOnBaseInput) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddOnBaseInput) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AddOnBaseInput) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AddOnBaseInput) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AddOnBaseInput) UnsetDescription() {
	o.Description.Unset()
}

// GetTaxCodes returns the TaxCodes field value if set, zero value otherwise.
func (o *AddOnBaseInput) GetTaxCodes() []string {
	if o == nil || IsNil(o.TaxCodes) {
		var ret []string
		return ret
	}
	return o.TaxCodes
}

// GetTaxCodesOk returns a tuple with the TaxCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOnBaseInput) GetTaxCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TaxCodes) {
		return nil, false
	}
	return o.TaxCodes, true
}

// HasTaxCodes returns a boolean if a field has been set.
func (o *AddOnBaseInput) HasTaxCodes() bool {
	if o != nil && !IsNil(o.TaxCodes) {
		return true
	}

	return false
}

// SetTaxCodes gets a reference to the given []string and assigns it to the TaxCodes field.
func (o *AddOnBaseInput) SetTaxCodes(v []string) {
	o.TaxCodes = v
}

func (o AddOnBaseInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOnBaseInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.AmountCents) {
		toSerialize["amount_cents"] = o.AmountCents
	}
	if !IsNil(o.AmountCurrency) {
		toSerialize["amount_currency"] = o.AmountCurrency
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.TaxCodes) {
		toSerialize["tax_codes"] = o.TaxCodes
	}
	return toSerialize, nil
}

type NullableAddOnBaseInput struct {
	value *AddOnBaseInput
	isSet bool
}

func (v NullableAddOnBaseInput) Get() *AddOnBaseInput {
	return v.value
}

func (v *NullableAddOnBaseInput) Set(val *AddOnBaseInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOnBaseInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOnBaseInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOnBaseInput(val *AddOnBaseInput) *NullableAddOnBaseInput {
	return &NullableAddOnBaseInput{value: val, isSet: true}
}

func (v NullableAddOnBaseInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOnBaseInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


