/*
Lago API documentation

Lago API allows your application to push customer information and metrics (events) from your application to the billing application.

API version: 0.52.0-beta
Contact: tech@getlago.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lagoapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the FeeObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeObject{}

// FeeObject struct for FeeObject
type FeeObject struct {
	// Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system.
	LagoId NullableString `json:"lago_id,omitempty"`
	// Unique identifier assigned to the group that the fee belongs to
	LagoGroupId NullableString `json:"lago_group_id,omitempty"`
	// Unique identifier assigned to the invoice that the fee belongs to
	LagoInvoiceId NullableString `json:"lago_invoice_id,omitempty"`
	// Unique identifier assigned to the true-up fee when a minimum has been set to the charge. This identifier helps to distinguish and manage the true-up fee associated with the charge, which may be applicable when a minimum threshold or limit is set for the charge amount.
	LagoTrueUpFeeId NullableString `json:"lago_true_up_fee_id,omitempty"`
	// Unique identifier assigned to the parent fee on which the true-up fee is assigned. This identifier establishes the relationship between the parent fee and the associated true-up fee.
	LagoTrueUpParentFeeId NullableString `json:"lago_true_up_parent_fee_id,omitempty"`
	// Unique identifier assigned to the subscription, created by Lago. This field is specifically displayed when the fee type is charge or subscription.
	LagoSubscriptionId NullableString `json:"lago_subscription_id,omitempty"`
	// Unique identifier assigned to the customer, created by Lago. This field is specifically displayed when the fee type is charge or subscription.
	LagoCustomerId NullableString `json:"lago_customer_id,omitempty"`
	// Unique identifier assigned to the customer in your application. This field is specifically displayed when the fee type is charge or subscription.
	ExternalCustomerId NullableString `json:"external_customer_id,omitempty"`
	// Unique identifier assigned to the subscription in your application. This field is specifically displayed when the fee type is charge or subscription.
	ExternalSubscriptionId NullableString `json:"external_subscription_id,omitempty"`
	// Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
	InvoiceDisplayName *string `json:"invoice_display_name,omitempty"`
	// The cost of this specific fee, excluding any applicable taxes.
	AmountCents int32 `json:"amount_cents"`
	AmountCurrency Currency `json:"amount_currency"`
	// The cost of the tax associated with this specific fee.
	TaxesAmountCents int32 `json:"taxes_amount_cents"`
	// The tax rate associated with this specific fee.
	TaxesRate float32 `json:"taxes_rate"`
	// The number of units used to charge the customer. This field indicates the quantity or count of units consumed or utilized in the context of the charge. It helps in determining the basis for calculating the fee or cost associated with the usage of the service or product provided to the customer.
	Units string `json:"units"`
	// The unit amount of the fee per unit, with precision.
	PreciseUnitAmount string `json:"precise_unit_amount"`
	// The cost of this specific fee, including any applicable taxes.
	TotalAmountCents int32 `json:"total_amount_cents"`
	TotalAmountCurrency Currency `json:"total_amount_currency"`
	// The number of events that have been sent and used to charge the customer. This field indicates the count or quantity of events that have been processed and considered in the charging process.
	EventsCount *int32 `json:"events_count,omitempty"`
	// Flag that indicates whether the fee was paid in advance. It serves as a boolean value, where `true` represents that the fee was paid in advance (straightaway), and `false` indicates that the fee was not paid in arrears (at the end of the period).
	PayInAdvance bool `json:"pay_in_advance"`
	// Flag that indicates whether the fee was included on the invoice. It serves as a boolean value, where `true` represents that the fee was included on the invoice, and `false` indicates that the fee was not included on the invoice.
	Invoiceable bool `json:"invoiceable"`
	// The beginning date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the start date of the billing period or subscription period associated with the fee.
	FromDate NullableTime `json:"from_date,omitempty"`
	// The ending date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the end date of the billing period or subscription period associated with the fee.
	ToDate NullableTime `json:"to_date,omitempty"`
	// Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and `refunded`.
	PaymentStatus string `json:"payment_status"`
	// The date and time when the fee was created. It is provided in Coordinated Universal Time (UTC) format.
	CreatedAt NullableTime `json:"created_at,omitempty"`
	// The date and time when the payment for the fee was successfully processed. It is provided in Coordinated Universal Time (UTC) format.
	SucceededAt NullableTime `json:"succeeded_at,omitempty"`
	// The date and time when the payment for the fee failed to process. It is provided in Coordinated Universal Time (UTC) format.
	FailedAt NullableTime `json:"failed_at,omitempty"`
	// The date and time when the payment for the fee was refunded. It is provided in Coordinated Universal Time (UTC) format
	RefundedAt NullableTime `json:"refunded_at,omitempty"`
	// Unique identifier assigned to the transaction. This field is specifically displayed when the fee type is `charge` and the payment for the fee is made in advance (`pay_in_advance` is set to `true`).
	EventTransactionId NullableString `json:"event_transaction_id,omitempty"`
	Item FeeObjectItem `json:"item"`
	// List of fee applied taxes
	AppliedTaxes []FeeAppliedTaxObject `json:"applied_taxes,omitempty"`
}

type _FeeObject FeeObject

// NewFeeObject instantiates a new FeeObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeObject(amountCents int32, amountCurrency Currency, taxesAmountCents int32, taxesRate float32, units string, preciseUnitAmount string, totalAmountCents int32, totalAmountCurrency Currency, payInAdvance bool, invoiceable bool, paymentStatus string, item FeeObjectItem) *FeeObject {
	this := FeeObject{}
	this.AmountCents = amountCents
	this.AmountCurrency = amountCurrency
	this.TaxesAmountCents = taxesAmountCents
	this.TaxesRate = taxesRate
	this.Units = units
	this.PreciseUnitAmount = preciseUnitAmount
	this.TotalAmountCents = totalAmountCents
	this.TotalAmountCurrency = totalAmountCurrency
	this.PayInAdvance = payInAdvance
	this.Invoiceable = invoiceable
	this.PaymentStatus = paymentStatus
	this.Item = item
	return &this
}

// NewFeeObjectWithDefaults instantiates a new FeeObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeObjectWithDefaults() *FeeObject {
	this := FeeObject{}
	return &this
}

// GetLagoId returns the LagoId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoId() string {
	if o == nil || IsNil(o.LagoId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoId.Get()
}

// GetLagoIdOk returns a tuple with the LagoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoId.Get(), o.LagoId.IsSet()
}

// HasLagoId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoId() bool {
	if o != nil && o.LagoId.IsSet() {
		return true
	}

	return false
}

// SetLagoId gets a reference to the given NullableString and assigns it to the LagoId field.
func (o *FeeObject) SetLagoId(v string) {
	o.LagoId.Set(&v)
}
// SetLagoIdNil sets the value for LagoId to be an explicit nil
func (o *FeeObject) SetLagoIdNil() {
	o.LagoId.Set(nil)
}

// UnsetLagoId ensures that no value is present for LagoId, not even an explicit nil
func (o *FeeObject) UnsetLagoId() {
	o.LagoId.Unset()
}

// GetLagoGroupId returns the LagoGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoGroupId() string {
	if o == nil || IsNil(o.LagoGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoGroupId.Get()
}

// GetLagoGroupIdOk returns a tuple with the LagoGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoGroupId.Get(), o.LagoGroupId.IsSet()
}

// HasLagoGroupId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoGroupId() bool {
	if o != nil && o.LagoGroupId.IsSet() {
		return true
	}

	return false
}

// SetLagoGroupId gets a reference to the given NullableString and assigns it to the LagoGroupId field.
func (o *FeeObject) SetLagoGroupId(v string) {
	o.LagoGroupId.Set(&v)
}
// SetLagoGroupIdNil sets the value for LagoGroupId to be an explicit nil
func (o *FeeObject) SetLagoGroupIdNil() {
	o.LagoGroupId.Set(nil)
}

// UnsetLagoGroupId ensures that no value is present for LagoGroupId, not even an explicit nil
func (o *FeeObject) UnsetLagoGroupId() {
	o.LagoGroupId.Unset()
}

// GetLagoInvoiceId returns the LagoInvoiceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoInvoiceId() string {
	if o == nil || IsNil(o.LagoInvoiceId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoInvoiceId.Get()
}

// GetLagoInvoiceIdOk returns a tuple with the LagoInvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoInvoiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoInvoiceId.Get(), o.LagoInvoiceId.IsSet()
}

// HasLagoInvoiceId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoInvoiceId() bool {
	if o != nil && o.LagoInvoiceId.IsSet() {
		return true
	}

	return false
}

// SetLagoInvoiceId gets a reference to the given NullableString and assigns it to the LagoInvoiceId field.
func (o *FeeObject) SetLagoInvoiceId(v string) {
	o.LagoInvoiceId.Set(&v)
}
// SetLagoInvoiceIdNil sets the value for LagoInvoiceId to be an explicit nil
func (o *FeeObject) SetLagoInvoiceIdNil() {
	o.LagoInvoiceId.Set(nil)
}

// UnsetLagoInvoiceId ensures that no value is present for LagoInvoiceId, not even an explicit nil
func (o *FeeObject) UnsetLagoInvoiceId() {
	o.LagoInvoiceId.Unset()
}

// GetLagoTrueUpFeeId returns the LagoTrueUpFeeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoTrueUpFeeId() string {
	if o == nil || IsNil(o.LagoTrueUpFeeId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoTrueUpFeeId.Get()
}

// GetLagoTrueUpFeeIdOk returns a tuple with the LagoTrueUpFeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoTrueUpFeeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoTrueUpFeeId.Get(), o.LagoTrueUpFeeId.IsSet()
}

// HasLagoTrueUpFeeId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoTrueUpFeeId() bool {
	if o != nil && o.LagoTrueUpFeeId.IsSet() {
		return true
	}

	return false
}

// SetLagoTrueUpFeeId gets a reference to the given NullableString and assigns it to the LagoTrueUpFeeId field.
func (o *FeeObject) SetLagoTrueUpFeeId(v string) {
	o.LagoTrueUpFeeId.Set(&v)
}
// SetLagoTrueUpFeeIdNil sets the value for LagoTrueUpFeeId to be an explicit nil
func (o *FeeObject) SetLagoTrueUpFeeIdNil() {
	o.LagoTrueUpFeeId.Set(nil)
}

// UnsetLagoTrueUpFeeId ensures that no value is present for LagoTrueUpFeeId, not even an explicit nil
func (o *FeeObject) UnsetLagoTrueUpFeeId() {
	o.LagoTrueUpFeeId.Unset()
}

// GetLagoTrueUpParentFeeId returns the LagoTrueUpParentFeeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoTrueUpParentFeeId() string {
	if o == nil || IsNil(o.LagoTrueUpParentFeeId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoTrueUpParentFeeId.Get()
}

// GetLagoTrueUpParentFeeIdOk returns a tuple with the LagoTrueUpParentFeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoTrueUpParentFeeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoTrueUpParentFeeId.Get(), o.LagoTrueUpParentFeeId.IsSet()
}

// HasLagoTrueUpParentFeeId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoTrueUpParentFeeId() bool {
	if o != nil && o.LagoTrueUpParentFeeId.IsSet() {
		return true
	}

	return false
}

// SetLagoTrueUpParentFeeId gets a reference to the given NullableString and assigns it to the LagoTrueUpParentFeeId field.
func (o *FeeObject) SetLagoTrueUpParentFeeId(v string) {
	o.LagoTrueUpParentFeeId.Set(&v)
}
// SetLagoTrueUpParentFeeIdNil sets the value for LagoTrueUpParentFeeId to be an explicit nil
func (o *FeeObject) SetLagoTrueUpParentFeeIdNil() {
	o.LagoTrueUpParentFeeId.Set(nil)
}

// UnsetLagoTrueUpParentFeeId ensures that no value is present for LagoTrueUpParentFeeId, not even an explicit nil
func (o *FeeObject) UnsetLagoTrueUpParentFeeId() {
	o.LagoTrueUpParentFeeId.Unset()
}

// GetLagoSubscriptionId returns the LagoSubscriptionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoSubscriptionId() string {
	if o == nil || IsNil(o.LagoSubscriptionId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoSubscriptionId.Get()
}

// GetLagoSubscriptionIdOk returns a tuple with the LagoSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoSubscriptionId.Get(), o.LagoSubscriptionId.IsSet()
}

// HasLagoSubscriptionId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoSubscriptionId() bool {
	if o != nil && o.LagoSubscriptionId.IsSet() {
		return true
	}

	return false
}

// SetLagoSubscriptionId gets a reference to the given NullableString and assigns it to the LagoSubscriptionId field.
func (o *FeeObject) SetLagoSubscriptionId(v string) {
	o.LagoSubscriptionId.Set(&v)
}
// SetLagoSubscriptionIdNil sets the value for LagoSubscriptionId to be an explicit nil
func (o *FeeObject) SetLagoSubscriptionIdNil() {
	o.LagoSubscriptionId.Set(nil)
}

// UnsetLagoSubscriptionId ensures that no value is present for LagoSubscriptionId, not even an explicit nil
func (o *FeeObject) UnsetLagoSubscriptionId() {
	o.LagoSubscriptionId.Unset()
}

// GetLagoCustomerId returns the LagoCustomerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetLagoCustomerId() string {
	if o == nil || IsNil(o.LagoCustomerId.Get()) {
		var ret string
		return ret
	}
	return *o.LagoCustomerId.Get()
}

// GetLagoCustomerIdOk returns a tuple with the LagoCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetLagoCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LagoCustomerId.Get(), o.LagoCustomerId.IsSet()
}

// HasLagoCustomerId returns a boolean if a field has been set.
func (o *FeeObject) HasLagoCustomerId() bool {
	if o != nil && o.LagoCustomerId.IsSet() {
		return true
	}

	return false
}

// SetLagoCustomerId gets a reference to the given NullableString and assigns it to the LagoCustomerId field.
func (o *FeeObject) SetLagoCustomerId(v string) {
	o.LagoCustomerId.Set(&v)
}
// SetLagoCustomerIdNil sets the value for LagoCustomerId to be an explicit nil
func (o *FeeObject) SetLagoCustomerIdNil() {
	o.LagoCustomerId.Set(nil)
}

// UnsetLagoCustomerId ensures that no value is present for LagoCustomerId, not even an explicit nil
func (o *FeeObject) UnsetLagoCustomerId() {
	o.LagoCustomerId.Unset()
}

// GetExternalCustomerId returns the ExternalCustomerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetExternalCustomerId() string {
	if o == nil || IsNil(o.ExternalCustomerId.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalCustomerId.Get()
}

// GetExternalCustomerIdOk returns a tuple with the ExternalCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetExternalCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalCustomerId.Get(), o.ExternalCustomerId.IsSet()
}

// HasExternalCustomerId returns a boolean if a field has been set.
func (o *FeeObject) HasExternalCustomerId() bool {
	if o != nil && o.ExternalCustomerId.IsSet() {
		return true
	}

	return false
}

// SetExternalCustomerId gets a reference to the given NullableString and assigns it to the ExternalCustomerId field.
func (o *FeeObject) SetExternalCustomerId(v string) {
	o.ExternalCustomerId.Set(&v)
}
// SetExternalCustomerIdNil sets the value for ExternalCustomerId to be an explicit nil
func (o *FeeObject) SetExternalCustomerIdNil() {
	o.ExternalCustomerId.Set(nil)
}

// UnsetExternalCustomerId ensures that no value is present for ExternalCustomerId, not even an explicit nil
func (o *FeeObject) UnsetExternalCustomerId() {
	o.ExternalCustomerId.Unset()
}

// GetExternalSubscriptionId returns the ExternalSubscriptionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetExternalSubscriptionId() string {
	if o == nil || IsNil(o.ExternalSubscriptionId.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalSubscriptionId.Get()
}

// GetExternalSubscriptionIdOk returns a tuple with the ExternalSubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetExternalSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalSubscriptionId.Get(), o.ExternalSubscriptionId.IsSet()
}

// HasExternalSubscriptionId returns a boolean if a field has been set.
func (o *FeeObject) HasExternalSubscriptionId() bool {
	if o != nil && o.ExternalSubscriptionId.IsSet() {
		return true
	}

	return false
}

// SetExternalSubscriptionId gets a reference to the given NullableString and assigns it to the ExternalSubscriptionId field.
func (o *FeeObject) SetExternalSubscriptionId(v string) {
	o.ExternalSubscriptionId.Set(&v)
}
// SetExternalSubscriptionIdNil sets the value for ExternalSubscriptionId to be an explicit nil
func (o *FeeObject) SetExternalSubscriptionIdNil() {
	o.ExternalSubscriptionId.Set(nil)
}

// UnsetExternalSubscriptionId ensures that no value is present for ExternalSubscriptionId, not even an explicit nil
func (o *FeeObject) UnsetExternalSubscriptionId() {
	o.ExternalSubscriptionId.Unset()
}

// GetInvoiceDisplayName returns the InvoiceDisplayName field value if set, zero value otherwise.
func (o *FeeObject) GetInvoiceDisplayName() string {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		var ret string
		return ret
	}
	return *o.InvoiceDisplayName
}

// GetInvoiceDisplayNameOk returns a tuple with the InvoiceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeObject) GetInvoiceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceDisplayName) {
		return nil, false
	}
	return o.InvoiceDisplayName, true
}

// HasInvoiceDisplayName returns a boolean if a field has been set.
func (o *FeeObject) HasInvoiceDisplayName() bool {
	if o != nil && !IsNil(o.InvoiceDisplayName) {
		return true
	}

	return false
}

// SetInvoiceDisplayName gets a reference to the given string and assigns it to the InvoiceDisplayName field.
func (o *FeeObject) SetInvoiceDisplayName(v string) {
	o.InvoiceDisplayName = &v
}

// GetAmountCents returns the AmountCents field value
func (o *FeeObject) GetAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountCents
}

// GetAmountCentsOk returns a tuple with the AmountCents field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCents, true
}

// SetAmountCents sets field value
func (o *FeeObject) SetAmountCents(v int32) {
	o.AmountCents = v
}

// GetAmountCurrency returns the AmountCurrency field value
func (o *FeeObject) GetAmountCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.AmountCurrency
}

// GetAmountCurrencyOk returns a tuple with the AmountCurrency field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetAmountCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountCurrency, true
}

// SetAmountCurrency sets field value
func (o *FeeObject) SetAmountCurrency(v Currency) {
	o.AmountCurrency = v
}

// GetTaxesAmountCents returns the TaxesAmountCents field value
func (o *FeeObject) GetTaxesAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TaxesAmountCents
}

// GetTaxesAmountCentsOk returns a tuple with the TaxesAmountCents field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetTaxesAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxesAmountCents, true
}

// SetTaxesAmountCents sets field value
func (o *FeeObject) SetTaxesAmountCents(v int32) {
	o.TaxesAmountCents = v
}

// GetTaxesRate returns the TaxesRate field value
func (o *FeeObject) GetTaxesRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TaxesRate
}

// GetTaxesRateOk returns a tuple with the TaxesRate field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetTaxesRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxesRate, true
}

// SetTaxesRate sets field value
func (o *FeeObject) SetTaxesRate(v float32) {
	o.TaxesRate = v
}

// GetUnits returns the Units field value
func (o *FeeObject) GetUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *FeeObject) SetUnits(v string) {
	o.Units = v
}

// GetPreciseUnitAmount returns the PreciseUnitAmount field value
func (o *FeeObject) GetPreciseUnitAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreciseUnitAmount
}

// GetPreciseUnitAmountOk returns a tuple with the PreciseUnitAmount field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetPreciseUnitAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreciseUnitAmount, true
}

// SetPreciseUnitAmount sets field value
func (o *FeeObject) SetPreciseUnitAmount(v string) {
	o.PreciseUnitAmount = v
}

// GetTotalAmountCents returns the TotalAmountCents field value
func (o *FeeObject) GetTotalAmountCents() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAmountCents
}

// GetTotalAmountCentsOk returns a tuple with the TotalAmountCents field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetTotalAmountCentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmountCents, true
}

// SetTotalAmountCents sets field value
func (o *FeeObject) SetTotalAmountCents(v int32) {
	o.TotalAmountCents = v
}

// GetTotalAmountCurrency returns the TotalAmountCurrency field value
func (o *FeeObject) GetTotalAmountCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.TotalAmountCurrency
}

// GetTotalAmountCurrencyOk returns a tuple with the TotalAmountCurrency field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetTotalAmountCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmountCurrency, true
}

// SetTotalAmountCurrency sets field value
func (o *FeeObject) SetTotalAmountCurrency(v Currency) {
	o.TotalAmountCurrency = v
}

// GetEventsCount returns the EventsCount field value if set, zero value otherwise.
func (o *FeeObject) GetEventsCount() int32 {
	if o == nil || IsNil(o.EventsCount) {
		var ret int32
		return ret
	}
	return *o.EventsCount
}

// GetEventsCountOk returns a tuple with the EventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeObject) GetEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EventsCount) {
		return nil, false
	}
	return o.EventsCount, true
}

// HasEventsCount returns a boolean if a field has been set.
func (o *FeeObject) HasEventsCount() bool {
	if o != nil && !IsNil(o.EventsCount) {
		return true
	}

	return false
}

// SetEventsCount gets a reference to the given int32 and assigns it to the EventsCount field.
func (o *FeeObject) SetEventsCount(v int32) {
	o.EventsCount = &v
}

// GetPayInAdvance returns the PayInAdvance field value
func (o *FeeObject) GetPayInAdvance() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PayInAdvance
}

// GetPayInAdvanceOk returns a tuple with the PayInAdvance field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetPayInAdvanceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayInAdvance, true
}

// SetPayInAdvance sets field value
func (o *FeeObject) SetPayInAdvance(v bool) {
	o.PayInAdvance = v
}

// GetInvoiceable returns the Invoiceable field value
func (o *FeeObject) GetInvoiceable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Invoiceable
}

// GetInvoiceableOk returns a tuple with the Invoiceable field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetInvoiceableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Invoiceable, true
}

// SetInvoiceable sets field value
func (o *FeeObject) SetInvoiceable(v bool) {
	o.Invoiceable = v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetFromDate() time.Time {
	if o == nil || IsNil(o.FromDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FromDate.Get()
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetFromDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromDate.Get(), o.FromDate.IsSet()
}

// HasFromDate returns a boolean if a field has been set.
func (o *FeeObject) HasFromDate() bool {
	if o != nil && o.FromDate.IsSet() {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given NullableTime and assigns it to the FromDate field.
func (o *FeeObject) SetFromDate(v time.Time) {
	o.FromDate.Set(&v)
}
// SetFromDateNil sets the value for FromDate to be an explicit nil
func (o *FeeObject) SetFromDateNil() {
	o.FromDate.Set(nil)
}

// UnsetFromDate ensures that no value is present for FromDate, not even an explicit nil
func (o *FeeObject) UnsetFromDate() {
	o.FromDate.Unset()
}

// GetToDate returns the ToDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetToDate() time.Time {
	if o == nil || IsNil(o.ToDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ToDate.Get()
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetToDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToDate.Get(), o.ToDate.IsSet()
}

// HasToDate returns a boolean if a field has been set.
func (o *FeeObject) HasToDate() bool {
	if o != nil && o.ToDate.IsSet() {
		return true
	}

	return false
}

// SetToDate gets a reference to the given NullableTime and assigns it to the ToDate field.
func (o *FeeObject) SetToDate(v time.Time) {
	o.ToDate.Set(&v)
}
// SetToDateNil sets the value for ToDate to be an explicit nil
func (o *FeeObject) SetToDateNil() {
	o.ToDate.Set(nil)
}

// UnsetToDate ensures that no value is present for ToDate, not even an explicit nil
func (o *FeeObject) UnsetToDate() {
	o.ToDate.Unset()
}

// GetPaymentStatus returns the PaymentStatus field value
func (o *FeeObject) GetPaymentStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentStatus
}

// GetPaymentStatusOk returns a tuple with the PaymentStatus field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetPaymentStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentStatus, true
}

// SetPaymentStatus sets field value
func (o *FeeObject) SetPaymentStatus(v string) {
	o.PaymentStatus = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FeeObject) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableTime and assigns it to the CreatedAt field.
func (o *FeeObject) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *FeeObject) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *FeeObject) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetSucceededAt returns the SucceededAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetSucceededAt() time.Time {
	if o == nil || IsNil(o.SucceededAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SucceededAt.Get()
}

// GetSucceededAtOk returns a tuple with the SucceededAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetSucceededAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SucceededAt.Get(), o.SucceededAt.IsSet()
}

// HasSucceededAt returns a boolean if a field has been set.
func (o *FeeObject) HasSucceededAt() bool {
	if o != nil && o.SucceededAt.IsSet() {
		return true
	}

	return false
}

// SetSucceededAt gets a reference to the given NullableTime and assigns it to the SucceededAt field.
func (o *FeeObject) SetSucceededAt(v time.Time) {
	o.SucceededAt.Set(&v)
}
// SetSucceededAtNil sets the value for SucceededAt to be an explicit nil
func (o *FeeObject) SetSucceededAtNil() {
	o.SucceededAt.Set(nil)
}

// UnsetSucceededAt ensures that no value is present for SucceededAt, not even an explicit nil
func (o *FeeObject) UnsetSucceededAt() {
	o.SucceededAt.Unset()
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetFailedAt() time.Time {
	if o == nil || IsNil(o.FailedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FailedAt.Get()
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetFailedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedAt.Get(), o.FailedAt.IsSet()
}

// HasFailedAt returns a boolean if a field has been set.
func (o *FeeObject) HasFailedAt() bool {
	if o != nil && o.FailedAt.IsSet() {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given NullableTime and assigns it to the FailedAt field.
func (o *FeeObject) SetFailedAt(v time.Time) {
	o.FailedAt.Set(&v)
}
// SetFailedAtNil sets the value for FailedAt to be an explicit nil
func (o *FeeObject) SetFailedAtNil() {
	o.FailedAt.Set(nil)
}

// UnsetFailedAt ensures that no value is present for FailedAt, not even an explicit nil
func (o *FeeObject) UnsetFailedAt() {
	o.FailedAt.Unset()
}

// GetRefundedAt returns the RefundedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetRefundedAt() time.Time {
	if o == nil || IsNil(o.RefundedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RefundedAt.Get()
}

// GetRefundedAtOk returns a tuple with the RefundedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetRefundedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundedAt.Get(), o.RefundedAt.IsSet()
}

// HasRefundedAt returns a boolean if a field has been set.
func (o *FeeObject) HasRefundedAt() bool {
	if o != nil && o.RefundedAt.IsSet() {
		return true
	}

	return false
}

// SetRefundedAt gets a reference to the given NullableTime and assigns it to the RefundedAt field.
func (o *FeeObject) SetRefundedAt(v time.Time) {
	o.RefundedAt.Set(&v)
}
// SetRefundedAtNil sets the value for RefundedAt to be an explicit nil
func (o *FeeObject) SetRefundedAtNil() {
	o.RefundedAt.Set(nil)
}

// UnsetRefundedAt ensures that no value is present for RefundedAt, not even an explicit nil
func (o *FeeObject) UnsetRefundedAt() {
	o.RefundedAt.Unset()
}

// GetEventTransactionId returns the EventTransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeeObject) GetEventTransactionId() string {
	if o == nil || IsNil(o.EventTransactionId.Get()) {
		var ret string
		return ret
	}
	return *o.EventTransactionId.Get()
}

// GetEventTransactionIdOk returns a tuple with the EventTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeeObject) GetEventTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTransactionId.Get(), o.EventTransactionId.IsSet()
}

// HasEventTransactionId returns a boolean if a field has been set.
func (o *FeeObject) HasEventTransactionId() bool {
	if o != nil && o.EventTransactionId.IsSet() {
		return true
	}

	return false
}

// SetEventTransactionId gets a reference to the given NullableString and assigns it to the EventTransactionId field.
func (o *FeeObject) SetEventTransactionId(v string) {
	o.EventTransactionId.Set(&v)
}
// SetEventTransactionIdNil sets the value for EventTransactionId to be an explicit nil
func (o *FeeObject) SetEventTransactionIdNil() {
	o.EventTransactionId.Set(nil)
}

// UnsetEventTransactionId ensures that no value is present for EventTransactionId, not even an explicit nil
func (o *FeeObject) UnsetEventTransactionId() {
	o.EventTransactionId.Unset()
}

// GetItem returns the Item field value
func (o *FeeObject) GetItem() FeeObjectItem {
	if o == nil {
		var ret FeeObjectItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *FeeObject) GetItemOk() (*FeeObjectItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *FeeObject) SetItem(v FeeObjectItem) {
	o.Item = v
}

// GetAppliedTaxes returns the AppliedTaxes field value if set, zero value otherwise.
func (o *FeeObject) GetAppliedTaxes() []FeeAppliedTaxObject {
	if o == nil || IsNil(o.AppliedTaxes) {
		var ret []FeeAppliedTaxObject
		return ret
	}
	return o.AppliedTaxes
}

// GetAppliedTaxesOk returns a tuple with the AppliedTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeObject) GetAppliedTaxesOk() ([]FeeAppliedTaxObject, bool) {
	if o == nil || IsNil(o.AppliedTaxes) {
		return nil, false
	}
	return o.AppliedTaxes, true
}

// HasAppliedTaxes returns a boolean if a field has been set.
func (o *FeeObject) HasAppliedTaxes() bool {
	if o != nil && !IsNil(o.AppliedTaxes) {
		return true
	}

	return false
}

// SetAppliedTaxes gets a reference to the given []FeeAppliedTaxObject and assigns it to the AppliedTaxes field.
func (o *FeeObject) SetAppliedTaxes(v []FeeAppliedTaxObject) {
	o.AppliedTaxes = v
}

func (o FeeObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LagoId.IsSet() {
		toSerialize["lago_id"] = o.LagoId.Get()
	}
	if o.LagoGroupId.IsSet() {
		toSerialize["lago_group_id"] = o.LagoGroupId.Get()
	}
	if o.LagoInvoiceId.IsSet() {
		toSerialize["lago_invoice_id"] = o.LagoInvoiceId.Get()
	}
	if o.LagoTrueUpFeeId.IsSet() {
		toSerialize["lago_true_up_fee_id"] = o.LagoTrueUpFeeId.Get()
	}
	if o.LagoTrueUpParentFeeId.IsSet() {
		toSerialize["lago_true_up_parent_fee_id"] = o.LagoTrueUpParentFeeId.Get()
	}
	if o.LagoSubscriptionId.IsSet() {
		toSerialize["lago_subscription_id"] = o.LagoSubscriptionId.Get()
	}
	if o.LagoCustomerId.IsSet() {
		toSerialize["lago_customer_id"] = o.LagoCustomerId.Get()
	}
	if o.ExternalCustomerId.IsSet() {
		toSerialize["external_customer_id"] = o.ExternalCustomerId.Get()
	}
	if o.ExternalSubscriptionId.IsSet() {
		toSerialize["external_subscription_id"] = o.ExternalSubscriptionId.Get()
	}
	if !IsNil(o.InvoiceDisplayName) {
		toSerialize["invoice_display_name"] = o.InvoiceDisplayName
	}
	toSerialize["amount_cents"] = o.AmountCents
	toSerialize["amount_currency"] = o.AmountCurrency
	toSerialize["taxes_amount_cents"] = o.TaxesAmountCents
	toSerialize["taxes_rate"] = o.TaxesRate
	toSerialize["units"] = o.Units
	toSerialize["precise_unit_amount"] = o.PreciseUnitAmount
	toSerialize["total_amount_cents"] = o.TotalAmountCents
	toSerialize["total_amount_currency"] = o.TotalAmountCurrency
	if !IsNil(o.EventsCount) {
		toSerialize["events_count"] = o.EventsCount
	}
	toSerialize["pay_in_advance"] = o.PayInAdvance
	toSerialize["invoiceable"] = o.Invoiceable
	if o.FromDate.IsSet() {
		toSerialize["from_date"] = o.FromDate.Get()
	}
	if o.ToDate.IsSet() {
		toSerialize["to_date"] = o.ToDate.Get()
	}
	toSerialize["payment_status"] = o.PaymentStatus
	if o.CreatedAt.IsSet() {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if o.SucceededAt.IsSet() {
		toSerialize["succeeded_at"] = o.SucceededAt.Get()
	}
	if o.FailedAt.IsSet() {
		toSerialize["failed_at"] = o.FailedAt.Get()
	}
	if o.RefundedAt.IsSet() {
		toSerialize["refunded_at"] = o.RefundedAt.Get()
	}
	if o.EventTransactionId.IsSet() {
		toSerialize["event_transaction_id"] = o.EventTransactionId.Get()
	}
	toSerialize["item"] = o.Item
	if !IsNil(o.AppliedTaxes) {
		toSerialize["applied_taxes"] = o.AppliedTaxes
	}
	return toSerialize, nil
}

func (o *FeeObject) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount_cents",
		"amount_currency",
		"taxes_amount_cents",
		"taxes_rate",
		"units",
		"precise_unit_amount",
		"total_amount_cents",
		"total_amount_currency",
		"pay_in_advance",
		"invoiceable",
		"payment_status",
		"item",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeObject := _FeeObject{}

	err = json.Unmarshal(bytes, &varFeeObject)

	if err != nil {
		return err
	}

	*o = FeeObject(varFeeObject)

	return err
}

type NullableFeeObject struct {
	value *FeeObject
	isSet bool
}

func (v NullableFeeObject) Get() *FeeObject {
	return v.value
}

func (v *NullableFeeObject) Set(val *FeeObject) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeObject) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeObject(val *FeeObject) *NullableFeeObject {
	return &NullableFeeObject{value: val, isSet: true}
}

func (v NullableFeeObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


